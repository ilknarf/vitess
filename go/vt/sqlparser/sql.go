// Code generated by goyacc -o sql.go sql.y. DO NOT EDIT.

//line sql.y:18
package sqlparser

import __yyfmt__ "fmt"

//line sql.y:18

func setParseTree(yylex interface{}, stmt Statement) {
	yylex.(*Tokenizer).ParseTree = stmt
}

func setAllowComments(yylex interface{}, allow bool) {
	yylex.(*Tokenizer).AllowComments = allow
}

func setDDL(yylex interface{}, ddl *DDL) {
	yylex.(*Tokenizer).partialDDL = ddl
}

func incNesting(yylex interface{}) bool {
	yylex.(*Tokenizer).nesting++
	if yylex.(*Tokenizer).nesting == 200 {
		return true
	}
	return false
}

func decNesting(yylex interface{}) {
	yylex.(*Tokenizer).nesting--
}

// skipToEnd forces the lexer to end prematurely. Not all SQL statements
// are supported by the Parser, thus calling skipToEnd will make the lexer
// return EOF early.
func skipToEnd(yylex interface{}) {
	yylex.(*Tokenizer).SkipToEnd = true
}

//line sql.y:53
type yySymType struct {
	yys                    int
	empty                  struct{}
	statement              Statement
	selStmt                SelectStatement
	ddl                    *DDL
	ins                    *Insert
	byt                    byte
	bytes                  []byte
	bytes2                 [][]byte
	str                    string
	strs                   []string
	selectExprs            SelectExprs
	selectExpr             SelectExpr
	columns                Columns
	partitions             Partitions
	colName                *ColName
	tableExprs             TableExprs
	tableExpr              TableExpr
	joinCondition          JoinCondition
	tableName              TableName
	tableNames             TableNames
	indexHints             *IndexHints
	expr                   Expr
	exprs                  Exprs
	boolVal                BoolVal
	boolean                bool
	literal                *Literal
	colTuple               ColTuple
	values                 Values
	valTuple               ValTuple
	subquery               *Subquery
	whens                  []*When
	when                   *When
	orderBy                OrderBy
	order                  *Order
	limit                  *Limit
	updateExprs            UpdateExprs
	setExprs               SetExprs
	updateExpr             *UpdateExpr
	setExpr                *SetExpr
	characteristic         Characteristic
	characteristics        []Characteristic
	colIdent               ColIdent
	tableIdent             TableIdent
	convertType            *ConvertType
	aliasedTableName       *AliasedTableExpr
	TableSpec              *TableSpec
	columnType             ColumnType
	colKeyOpt              ColumnKeyOption
	optVal                 Expr
	LengthScaleOption      LengthScaleOption
	OnlineDDLHint          *OnlineDDLHint
	columnDefinition       *ColumnDefinition
	indexDefinition        *IndexDefinition
	indexInfo              *IndexInfo
	indexOption            *IndexOption
	indexOptions           []*IndexOption
	indexColumn            *IndexColumn
	indexColumns           []*IndexColumn
	constraintDefinition   *ConstraintDefinition
	constraintInfo         ConstraintInfo
	ReferenceAction        ReferenceAction
	partDefs               []*PartitionDefinition
	partDef                *PartitionDefinition
	partSpec               *PartitionSpec
	vindexParam            VindexParam
	vindexParams           []VindexParam
	showFilter             *ShowFilter
	optLike                *OptLike
	isolationLevel         IsolationLevel
	unionType              UnionType
	insertAction           InsertAction
	scope                  Scope
	ignore                 Ignore
	lock                   Lock
	joinType               JoinType
	comparisonExprOperator ComparisonExprOperator
	isExprOperator         IsExprOperator
	matchExprOption        MatchExprOption
	orderDirection         OrderDirection
	explainType            ExplainType
}

const LEX_ERROR = 57346
const UNION = 57347
const SELECT = 57348
const STREAM = 57349
const VSTREAM = 57350
const INSERT = 57351
const UPDATE = 57352
const DELETE = 57353
const FROM = 57354
const WHERE = 57355
const GROUP = 57356
const HAVING = 57357
const ORDER = 57358
const BY = 57359
const LIMIT = 57360
const OFFSET = 57361
const FOR = 57362
const ALL = 57363
const DISTINCT = 57364
const AS = 57365
const EXISTS = 57366
const ASC = 57367
const DESC = 57368
const INTO = 57369
const DUPLICATE = 57370
const KEY = 57371
const DEFAULT = 57372
const SET = 57373
const LOCK = 57374
const UNLOCK = 57375
const KEYS = 57376
const DO = 57377
const DISTINCTROW = 57378
const OUTFILE = 57379
const S3 = 57380
const DATA = 57381
const LOAD = 57382
const VALUES = 57383
const LAST_INSERT_ID = 57384
const NEXT = 57385
const VALUE = 57386
const SHARE = 57387
const MODE = 57388
const SQL_NO_CACHE = 57389
const SQL_CACHE = 57390
const SQL_CALC_FOUND_ROWS = 57391
const JOIN = 57392
const STRAIGHT_JOIN = 57393
const LEFT = 57394
const RIGHT = 57395
const INNER = 57396
const OUTER = 57397
const CROSS = 57398
const NATURAL = 57399
const USE = 57400
const FORCE = 57401
const ON = 57402
const USING = 57403
const ID = 57404
const AT_ID = 57405
const AT_AT_ID = 57406
const HEX = 57407
const STRING = 57408
const INTEGRAL = 57409
const FLOAT = 57410
const HEXNUM = 57411
const VALUE_ARG = 57412
const LIST_ARG = 57413
const COMMENT = 57414
const COMMENT_KEYWORD = 57415
const BIT_LITERAL = 57416
const NULL = 57417
const TRUE = 57418
const FALSE = 57419
const OFF = 57420
const OR = 57421
const XOR = 57422
const AND = 57423
const NOT = 57424
const BETWEEN = 57425
const CASE = 57426
const WHEN = 57427
const THEN = 57428
const ELSE = 57429
const END = 57430
const LE = 57431
const GE = 57432
const NE = 57433
const NULL_SAFE_EQUAL = 57434
const IS = 57435
const LIKE = 57436
const REGEXP = 57437
const IN = 57438
const SHIFT_LEFT = 57439
const SHIFT_RIGHT = 57440
const DIV = 57441
const MOD = 57442
const UNARY = 57443
const COLLATE = 57444
const BINARY = 57445
const UNDERSCORE_BINARY = 57446
const UNDERSCORE_UTF8MB4 = 57447
const UNDERSCORE_UTF8 = 57448
const UNDERSCORE_LATIN1 = 57449
const INTERVAL = 57450
const JSON_EXTRACT_OP = 57451
const JSON_UNQUOTE_EXTRACT_OP = 57452
const CREATE = 57453
const ALTER = 57454
const DROP = 57455
const RENAME = 57456
const ANALYZE = 57457
const ADD = 57458
const FLUSH = 57459
const SCHEMA = 57460
const TABLE = 57461
const INDEX = 57462
const VIEW = 57463
const TO = 57464
const IGNORE = 57465
const IF = 57466
const UNIQUE = 57467
const PRIMARY = 57468
const COLUMN = 57469
const SPATIAL = 57470
const FULLTEXT = 57471
const KEY_BLOCK_SIZE = 57472
const CHECK = 57473
const INDEXES = 57474
const ACTION = 57475
const CASCADE = 57476
const CONSTRAINT = 57477
const FOREIGN = 57478
const NO = 57479
const REFERENCES = 57480
const RESTRICT = 57481
const SHOW = 57482
const DESCRIBE = 57483
const EXPLAIN = 57484
const DATE = 57485
const ESCAPE = 57486
const REPAIR = 57487
const OPTIMIZE = 57488
const TRUNCATE = 57489
const MAXVALUE = 57490
const PARTITION = 57491
const REORGANIZE = 57492
const LESS = 57493
const THAN = 57494
const PROCEDURE = 57495
const TRIGGER = 57496
const VINDEX = 57497
const VINDEXES = 57498
const STATUS = 57499
const VARIABLES = 57500
const WARNINGS = 57501
const SEQUENCE = 57502
const BEGIN = 57503
const START = 57504
const TRANSACTION = 57505
const COMMIT = 57506
const ROLLBACK = 57507
const SAVEPOINT = 57508
const RELEASE = 57509
const WORK = 57510
const BIT = 57511
const TINYINT = 57512
const SMALLINT = 57513
const MEDIUMINT = 57514
const INT = 57515
const INTEGER = 57516
const BIGINT = 57517
const INTNUM = 57518
const REAL = 57519
const DOUBLE = 57520
const FLOAT_TYPE = 57521
const DECIMAL = 57522
const NUMERIC = 57523
const TIME = 57524
const TIMESTAMP = 57525
const DATETIME = 57526
const YEAR = 57527
const CHAR = 57528
const VARCHAR = 57529
const BOOL = 57530
const CHARACTER = 57531
const VARBINARY = 57532
const NCHAR = 57533
const TEXT = 57534
const TINYTEXT = 57535
const MEDIUMTEXT = 57536
const LONGTEXT = 57537
const BLOB = 57538
const TINYBLOB = 57539
const MEDIUMBLOB = 57540
const LONGBLOB = 57541
const JSON = 57542
const ENUM = 57543
const GEOMETRY = 57544
const POINT = 57545
const LINESTRING = 57546
const POLYGON = 57547
const GEOMETRYCOLLECTION = 57548
const MULTIPOINT = 57549
const MULTILINESTRING = 57550
const MULTIPOLYGON = 57551
const NULLX = 57552
const AUTO_INCREMENT = 57553
const APPROXNUM = 57554
const SIGNED = 57555
const UNSIGNED = 57556
const ZEROFILL = 57557
const COLLATION = 57558
const DATABASES = 57559
const TABLES = 57560
const VITESS_METADATA = 57561
const VSCHEMA = 57562
const FULL = 57563
const PROCESSLIST = 57564
const COLUMNS = 57565
const FIELDS = 57566
const ENGINES = 57567
const PLUGINS = 57568
const EXTENDED = 57569
const KEYSPACES = 57570
const VITESS_KEYSPACES = 57571
const VITESS_SHARDS = 57572
const VITESS_TABLETS = 57573
const NAMES = 57574
const CHARSET = 57575
const GLOBAL = 57576
const SESSION = 57577
const ISOLATION = 57578
const LEVEL = 57579
const READ = 57580
const WRITE = 57581
const ONLY = 57582
const REPEATABLE = 57583
const COMMITTED = 57584
const UNCOMMITTED = 57585
const SERIALIZABLE = 57586
const CURRENT_TIMESTAMP = 57587
const DATABASE = 57588
const CURRENT_DATE = 57589
const CURRENT_TIME = 57590
const LOCALTIME = 57591
const LOCALTIMESTAMP = 57592
const UTC_DATE = 57593
const UTC_TIME = 57594
const UTC_TIMESTAMP = 57595
const REPLACE = 57596
const CONVERT = 57597
const CAST = 57598
const SUBSTR = 57599
const SUBSTRING = 57600
const GROUP_CONCAT = 57601
const SEPARATOR = 57602
const TIMESTAMPADD = 57603
const TIMESTAMPDIFF = 57604
const MATCH = 57605
const AGAINST = 57606
const BOOLEAN = 57607
const LANGUAGE = 57608
const WITH = 57609
const QUERY = 57610
const EXPANSION = 57611
const UNUSED = 57612
const ARRAY = 57613
const CUME_DIST = 57614
const DESCRIPTION = 57615
const DENSE_RANK = 57616
const EMPTY = 57617
const EXCEPT = 57618
const FIRST_VALUE = 57619
const GROUPING = 57620
const GROUPS = 57621
const JSON_TABLE = 57622
const LAG = 57623
const LAST_VALUE = 57624
const LATERAL = 57625
const LEAD = 57626
const MEMBER = 57627
const NTH_VALUE = 57628
const NTILE = 57629
const OF = 57630
const OVER = 57631
const PERCENT_RANK = 57632
const RANK = 57633
const RECURSIVE = 57634
const ROW_NUMBER = 57635
const SYSTEM = 57636
const WINDOW = 57637
const ACTIVE = 57638
const ADMIN = 57639
const BUCKETS = 57640
const CLONE = 57641
const COMPONENT = 57642
const DEFINITION = 57643
const ENFORCED = 57644
const EXCLUDE = 57645
const FOLLOWING = 57646
const GEOMCOLLECTION = 57647
const GET_MASTER_PUBLIC_KEY = 57648
const HISTOGRAM = 57649
const HISTORY = 57650
const INACTIVE = 57651
const INVISIBLE = 57652
const LOCKED = 57653
const MASTER_COMPRESSION_ALGORITHMS = 57654
const MASTER_PUBLIC_KEY_PATH = 57655
const MASTER_TLS_CIPHERSUITES = 57656
const MASTER_ZSTD_COMPRESSION_LEVEL = 57657
const NESTED = 57658
const NETWORK_NAMESPACE = 57659
const NOWAIT = 57660
const NULLS = 57661
const OJ = 57662
const OLD = 57663
const OPTIONAL = 57664
const ORDINALITY = 57665
const ORGANIZATION = 57666
const OTHERS = 57667
const PATH = 57668
const PERSIST = 57669
const PERSIST_ONLY = 57670
const PRECEDING = 57671
const PRIVILEGE_CHECKS_USER = 57672
const PROCESS = 57673
const RANDOM = 57674
const REFERENCE = 57675
const REQUIRE_ROW_FORMAT = 57676
const RESOURCE = 57677
const RESPECT = 57678
const RESTART = 57679
const RETAIN = 57680
const REUSE = 57681
const ROLE = 57682
const SECONDARY = 57683
const SECONDARY_ENGINE = 57684
const SECONDARY_LOAD = 57685
const SECONDARY_UNLOAD = 57686
const SKIP = 57687
const SRID = 57688
const THREAD_PRIORITY = 57689
const TIES = 57690
const UNBOUNDED = 57691
const VCPU = 57692
const VISIBLE = 57693
const FORMAT = 57694
const TREE = 57695
const VITESS = 57696
const TRADITIONAL = 57697

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"LEX_ERROR",
	"UNION",
	"SELECT",
	"STREAM",
	"VSTREAM",
	"INSERT",
	"UPDATE",
	"DELETE",
	"FROM",
	"WHERE",
	"GROUP",
	"HAVING",
	"ORDER",
	"BY",
	"LIMIT",
	"OFFSET",
	"FOR",
	"ALL",
	"DISTINCT",
	"AS",
	"EXISTS",
	"ASC",
	"DESC",
	"INTO",
	"DUPLICATE",
	"KEY",
	"DEFAULT",
	"SET",
	"LOCK",
	"UNLOCK",
	"KEYS",
	"DO",
	"DISTINCTROW",
	"OUTFILE",
	"S3",
	"DATA",
	"LOAD",
	"VALUES",
	"LAST_INSERT_ID",
	"NEXT",
	"VALUE",
	"SHARE",
	"MODE",
	"SQL_NO_CACHE",
	"SQL_CACHE",
	"SQL_CALC_FOUND_ROWS",
	"JOIN",
	"STRAIGHT_JOIN",
	"LEFT",
	"RIGHT",
	"INNER",
	"OUTER",
	"CROSS",
	"NATURAL",
	"USE",
	"FORCE",
	"ON",
	"USING",
	"'('",
	"','",
	"')'",
	"ID",
	"AT_ID",
	"AT_AT_ID",
	"HEX",
	"STRING",
	"INTEGRAL",
	"FLOAT",
	"HEXNUM",
	"VALUE_ARG",
	"LIST_ARG",
	"COMMENT",
	"COMMENT_KEYWORD",
	"BIT_LITERAL",
	"NULL",
	"TRUE",
	"FALSE",
	"OFF",
	"OR",
	"XOR",
	"AND",
	"NOT",
	"'!'",
	"BETWEEN",
	"CASE",
	"WHEN",
	"THEN",
	"ELSE",
	"END",
	"'='",
	"'<'",
	"'>'",
	"LE",
	"GE",
	"NE",
	"NULL_SAFE_EQUAL",
	"IS",
	"LIKE",
	"REGEXP",
	"IN",
	"'|'",
	"'&'",
	"SHIFT_LEFT",
	"SHIFT_RIGHT",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"DIV",
	"'%'",
	"MOD",
	"'^'",
	"'~'",
	"UNARY",
	"COLLATE",
	"BINARY",
	"UNDERSCORE_BINARY",
	"UNDERSCORE_UTF8MB4",
	"UNDERSCORE_UTF8",
	"UNDERSCORE_LATIN1",
	"INTERVAL",
	"'.'",
	"JSON_EXTRACT_OP",
	"JSON_UNQUOTE_EXTRACT_OP",
	"CREATE",
	"ALTER",
	"DROP",
	"RENAME",
	"ANALYZE",
	"ADD",
	"FLUSH",
	"SCHEMA",
	"TABLE",
	"INDEX",
	"VIEW",
	"TO",
	"IGNORE",
	"IF",
	"UNIQUE",
	"PRIMARY",
	"COLUMN",
	"SPATIAL",
	"FULLTEXT",
	"KEY_BLOCK_SIZE",
	"CHECK",
	"INDEXES",
	"ACTION",
	"CASCADE",
	"CONSTRAINT",
	"FOREIGN",
	"NO",
	"REFERENCES",
	"RESTRICT",
	"SHOW",
	"DESCRIBE",
	"EXPLAIN",
	"DATE",
	"ESCAPE",
	"REPAIR",
	"OPTIMIZE",
	"TRUNCATE",
	"MAXVALUE",
	"PARTITION",
	"REORGANIZE",
	"LESS",
	"THAN",
	"PROCEDURE",
	"TRIGGER",
	"VINDEX",
	"VINDEXES",
	"STATUS",
	"VARIABLES",
	"WARNINGS",
	"SEQUENCE",
	"BEGIN",
	"START",
	"TRANSACTION",
	"COMMIT",
	"ROLLBACK",
	"SAVEPOINT",
	"RELEASE",
	"WORK",
	"BIT",
	"TINYINT",
	"SMALLINT",
	"MEDIUMINT",
	"INT",
	"INTEGER",
	"BIGINT",
	"INTNUM",
	"REAL",
	"DOUBLE",
	"FLOAT_TYPE",
	"DECIMAL",
	"NUMERIC",
	"TIME",
	"TIMESTAMP",
	"DATETIME",
	"YEAR",
	"CHAR",
	"VARCHAR",
	"BOOL",
	"CHARACTER",
	"VARBINARY",
	"NCHAR",
	"TEXT",
	"TINYTEXT",
	"MEDIUMTEXT",
	"LONGTEXT",
	"BLOB",
	"TINYBLOB",
	"MEDIUMBLOB",
	"LONGBLOB",
	"JSON",
	"ENUM",
	"GEOMETRY",
	"POINT",
	"LINESTRING",
	"POLYGON",
	"GEOMETRYCOLLECTION",
	"MULTIPOINT",
	"MULTILINESTRING",
	"MULTIPOLYGON",
	"NULLX",
	"AUTO_INCREMENT",
	"APPROXNUM",
	"SIGNED",
	"UNSIGNED",
	"ZEROFILL",
	"COLLATION",
	"DATABASES",
	"TABLES",
	"VITESS_METADATA",
	"VSCHEMA",
	"FULL",
	"PROCESSLIST",
	"COLUMNS",
	"FIELDS",
	"ENGINES",
	"PLUGINS",
	"EXTENDED",
	"KEYSPACES",
	"VITESS_KEYSPACES",
	"VITESS_SHARDS",
	"VITESS_TABLETS",
	"NAMES",
	"CHARSET",
	"GLOBAL",
	"SESSION",
	"ISOLATION",
	"LEVEL",
	"READ",
	"WRITE",
	"ONLY",
	"REPEATABLE",
	"COMMITTED",
	"UNCOMMITTED",
	"SERIALIZABLE",
	"CURRENT_TIMESTAMP",
	"DATABASE",
	"CURRENT_DATE",
	"CURRENT_TIME",
	"LOCALTIME",
	"LOCALTIMESTAMP",
	"UTC_DATE",
	"UTC_TIME",
	"UTC_TIMESTAMP",
	"REPLACE",
	"CONVERT",
	"CAST",
	"SUBSTR",
	"SUBSTRING",
	"GROUP_CONCAT",
	"SEPARATOR",
	"TIMESTAMPADD",
	"TIMESTAMPDIFF",
	"MATCH",
	"AGAINST",
	"BOOLEAN",
	"LANGUAGE",
	"WITH",
	"QUERY",
	"EXPANSION",
	"UNUSED",
	"ARRAY",
	"CUME_DIST",
	"DESCRIPTION",
	"DENSE_RANK",
	"EMPTY",
	"EXCEPT",
	"FIRST_VALUE",
	"GROUPING",
	"GROUPS",
	"JSON_TABLE",
	"LAG",
	"LAST_VALUE",
	"LATERAL",
	"LEAD",
	"MEMBER",
	"NTH_VALUE",
	"NTILE",
	"OF",
	"OVER",
	"PERCENT_RANK",
	"RANK",
	"RECURSIVE",
	"ROW_NUMBER",
	"SYSTEM",
	"WINDOW",
	"ACTIVE",
	"ADMIN",
	"BUCKETS",
	"CLONE",
	"COMPONENT",
	"DEFINITION",
	"ENFORCED",
	"EXCLUDE",
	"FOLLOWING",
	"GEOMCOLLECTION",
	"GET_MASTER_PUBLIC_KEY",
	"HISTOGRAM",
	"HISTORY",
	"INACTIVE",
	"INVISIBLE",
	"LOCKED",
	"MASTER_COMPRESSION_ALGORITHMS",
	"MASTER_PUBLIC_KEY_PATH",
	"MASTER_TLS_CIPHERSUITES",
	"MASTER_ZSTD_COMPRESSION_LEVEL",
	"NESTED",
	"NETWORK_NAMESPACE",
	"NOWAIT",
	"NULLS",
	"OJ",
	"OLD",
	"OPTIONAL",
	"ORDINALITY",
	"ORGANIZATION",
	"OTHERS",
	"PATH",
	"PERSIST",
	"PERSIST_ONLY",
	"PRECEDING",
	"PRIVILEGE_CHECKS_USER",
	"PROCESS",
	"RANDOM",
	"REFERENCE",
	"REQUIRE_ROW_FORMAT",
	"RESOURCE",
	"RESPECT",
	"RESTART",
	"RETAIN",
	"REUSE",
	"ROLE",
	"SECONDARY",
	"SECONDARY_ENGINE",
	"SECONDARY_LOAD",
	"SECONDARY_UNLOAD",
	"SKIP",
	"SRID",
	"THREAD_PRIORITY",
	"TIES",
	"UNBOUNDED",
	"VCPU",
	"VISIBLE",
	"FORMAT",
	"TREE",
	"VITESS",
	"TRADITIONAL",
	"';'",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 45,
	34, 318,
	137, 318,
	149, 318,
	174, 332,
	175, 332,
	-2, 320,
	-1, 50,
	139, 342,
	-2, 340,
	-1, 74,
	43, 378,
	-2, 386,
	-1, 405,
	125, 714,
	-2, 710,
	-1, 406,
	125, 715,
	-2, 711,
	-1, 421,
	43, 379,
	-2, 391,
	-1, 422,
	43, 380,
	-2, 392,
	-1, 442,
	93, 973,
	-2, 76,
	-1, 443,
	93, 886,
	-2, 77,
	-1, 448,
	93, 852,
	-2, 673,
	-1, 450,
	93, 919,
	-2, 675,
	-1, 955,
	125, 717,
	-2, 713,
	-1, 1043,
	61, 58,
	63, 58,
	-2, 62,
	-1, 1399,
	5, 630,
	18, 630,
	20, 630,
	32, 630,
	64, 630,
	-2, 417,
}

const yyPrivate = 57344

const yyLast = 18737

var yyAct = [...]int{
	405, 1654, 1444, 1644, 1323, 1608, 1224, 349, 624, 1554,
	1520, 1065, 378, 1244, 1379, 364, 1225, 1506, 1037, 1376,
	1415, 1380, 1385, 1064, 1391, 744, 1273, 1109, 414, 1061,
	751, 605, 704, 1074, 1089, 1342, 1160, 942, 949, 1211,
	94, 1300, 876, 1291, 295, 789, 318, 295, 335, 447,
	73, 3, 94, 1078, 295, 1016, 1034, 782, 895, 1023,
	71, 772, 1039, 749, 771, 975, 423, 351, 919, 1105,
	786, 754, 379, 30, 408, 761, 1045, 69, 573, 614,
	74, 788, 94, 905, 68, 94, 295, 8, 295, 779,
	444, 7, 340, 347, 6, 1637, 1602, 1647, 1095, 1629,
	29, 1642, 717, 30, 336, 1616, 1639, 339, 1445, 718,
	1628, 594, 1615, 76, 77, 78, 79, 80, 81, 1359,
	1582, 666, 665, 675, 676, 668, 669, 670, 671, 672,
	673, 674, 667, 1474, 578, 677, 1409, 283, 1410, 1411,
	281, 790, 410, 791, 1128, 1056, 1057, 1261, 429, 433,
	1260, 31, 441, 1262, 62, 35, 36, 390, 1127, 396,
	397, 394, 395, 393, 392, 391, 1055, 637, 338, 337,
	409, 1282, 1088, 398, 399, 1325, 291, 287, 288, 289,
	632, 1510, 1096, 1465, 633, 630, 631, 96, 97, 98,
	1463, 328, 904, 96, 97, 98, 330, 635, 326, 627,
	864, 625, 626, 1327, 1126, 861, 863, 61, 96, 97,
	98, 1641, 1638, 1609, 1322, 1017, 1658, 1600, 620, 1662,
	31, 32, 33, 62, 35, 36, 595, 952, 1419, 636,
	580, 1326, 1082, 1418, 1245, 1247, 906, 907, 908, 284,
	66, 865, 862, 435, 1565, 37, 56, 57, 1328, 59,
	1319, 869, 1555, 640, 60, 1082, 1321, 1123, 1120, 1121,
	1402, 1119, 852, 1401, 1400, 282, 576, 1557, 96, 97,
	98, 583, 46, 298, 286, 1179, 61, 1140, 1589, 611,
	1139, 613, 295, 585, 586, 1488, 285, 295, 1408, 596,
	689, 690, 590, 295, 1130, 1133, 1176, 622, 1216, 295,
	603, 1583, 1189, 609, 290, 1168, 1051, 765, 702, 667,
	94, 601, 677, 610, 612, 1062, 1246, 677, 1257, 94,
	995, 619, 670, 671, 672, 673, 674, 667, 1096, 607,
	677, 94, 94, 621, 1125, 896, 1656, 1614, 1556, 1657,
	1081, 1655, 39, 40, 42, 41, 44, 615, 58, 638,
	96, 97, 98, 926, 891, 822, 1124, 1566, 1564, 654,
	587, 657, 588, 1081, 1320, 589, 1318, 924, 925, 923,
	1175, 45, 65, 64, 84, 657, 54, 55, 43, 1598,
	1574, 1389, 623, 646, 616, 617, 651, 652, 792, 689,
	690, 623, 47, 48, 650, 49, 50, 51, 52, 1361,
	1129, 597, 598, 599, 1431, 30, 608, 655, 656, 654,
	689, 690, 1631, 85, 687, 1131, 63, 606, 686, 688,
	649, 976, 976, 1186, 647, 657, 897, 648, 854, 655,
	656, 654, 94, 656, 654, 295, 1280, 295, 295, 741,
	94, 1604, 758, 810, 1619, 892, 94, 657, 444, 701,
	657, 1310, 1516, 706, 707, 708, 709, 710, 711, 712,
	713, 742, 716, 719, 719, 719, 725, 719, 719, 725,
	719, 733, 734, 735, 736, 737, 738, 739, 787, 1085,
	705, 1515, 1663, 30, 823, 63, 1086, 1306, 1307, 1308,
	755, 61, 743, 770, 720, 722, 724, 726, 728, 730,
	731, 721, 723, 922, 727, 729, 1295, 732, 1294, 776,
	836, 839, 840, 841, 842, 843, 844, 1283, 845, 846,
	847, 848, 849, 824, 825, 826, 827, 808, 809, 837,
	1664, 811, 1622, 812, 813, 814, 815, 816, 817, 818,
	819, 820, 821, 828, 829, 830, 831, 832, 833, 834,
	835, 1343, 579, 655, 656, 654, 914, 916, 917, 1309,
	439, 1363, 1599, 915, 1314, 1311, 1302, 1312, 1305, 1533,
	1301, 657, 1513, 295, 1303, 1304, 1478, 850, 94, 418,
	853, 1292, 855, 295, 295, 94, 94, 94, 1313, 1198,
	889, 295, 1345, 881, 867, 295, 591, 70, 295, 874,
	875, 1571, 295, 1570, 94, 1427, 838, 1560, 1640, 94,
	94, 94, 295, 94, 94, 1251, 639, 1046, 668, 669,
	670, 671, 672, 673, 674, 667, 94, 94, 677, 1347,
	1083, 1351, 1174, 1346, 1173, 1344, 880, 1000, 1001, 1009,
	1349, 1624, 418, 581, 582, 997, 1560, 1612, 753, 1348,
	623, 878, 434, 655, 656, 654, 418, 623, 623, 623,
	72, 1377, 1350, 1352, 1388, 367, 366, 369, 370, 371,
	372, 657, 1388, 920, 368, 373, 623, 1212, 943, 1560,
	418, 623, 623, 623, 870, 623, 623, 945, 899, 996,
	1008, 1153, 1154, 1155, 655, 656, 654, 1484, 623, 623,
	1047, 94, 1508, 653, 96, 97, 98, 1008, 655, 656,
	654, 953, 657, 1560, 1590, 901, 1560, 1559, 964, 967,
	655, 656, 654, 1212, 977, 1573, 657, 1020, 921, 1504,
	1503, 1435, 436, 437, 94, 94, 959, 61, 657, 96,
	97, 98, 1020, 944, 1630, 954, 96, 97, 98, 1048,
	1264, 1050, 955, 94, 1265, 1025, 1028, 1029, 1030, 1026,
	295, 1027, 1031, 94, 1054, 1392, 1393, 295, 1047, 295,
	990, 1490, 418, 1388, 953, 985, 986, 295, 295, 295,
	1002, 956, 1019, 946, 947, 94, 1487, 418, 94, 705,
	1437, 1436, 1192, 444, 1433, 1434, 444, 1433, 1432, 94,
	94, 1008, 418, 1020, 418, 653, 418, 1066, 1014, 799,
	798, 1191, 431, 1008, 1020, 955, 1046, 1048, 998, 1046,
	868, 784, 1010, 411, 31, 1522, 1277, 1035, 675, 676,
	668, 669, 670, 671, 672, 673, 674, 667, 1012, 1090,
	677, 1495, 1110, 1091, 1092, 1093, 1094, 1422, 1268, 1036,
	1392, 1393, 1324, 295, 94, 1052, 94, 1049, 1132, 1102,
	1103, 1104, 295, 295, 295, 295, 295, 1053, 1044, 295,
	295, 1106, 341, 295, 94, 851, 980, 1111, 1069, 61,
	61, 1101, 858, 859, 860, 31, 1025, 1028, 1029, 1030,
	1026, 295, 1027, 1031, 1100, 1523, 1113, 295, 295, 295,
	1649, 879, 1645, 295, 94, 1425, 883, 884, 885, 1471,
	887, 888, 1097, 1098, 1099, 1395, 1107, 1108, 1377, 1296,
	1540, 902, 872, 893, 894, 1236, 623, 1146, 623, 418,
	1237, 1150, 1234, 1398, 960, 961, 920, 1235, 966, 969,
	970, 61, 1238, 1397, 1029, 1030, 623, 1233, 1232, 1635,
	417, 666, 665, 675, 676, 668, 669, 670, 671, 672,
	673, 674, 667, 984, 1627, 677, 987, 988, 1369, 666,
	665, 675, 676, 668, 669, 670, 671, 672, 673, 674,
	667, 1201, 752, 677, 1633, 1210, 1209, 407, 1170, 1368,
	989, 921, 1156, 666, 665, 675, 676, 668, 669, 670,
	671, 672, 673, 674, 667, 1200, 972, 677, 1161, 1287,
	295, 797, 604, 1279, 31, 1606, 1199, 1605, 745, 1538,
	973, 295, 295, 295, 295, 295, 1167, 1226, 1205, 410,
	746, 1169, 1276, 295, 1270, 1482, 1518, 295, 993, 1219,
	1185, 295, 1116, 871, 1033, 415, 295, 295, 1470, 1220,
	295, 295, 295, 412, 413, 1217, 1208, 409, 1481, 416,
	1372, 72, 1204, 1263, 1207, 94, 1214, 1221, 1480, 1212,
	61, 634, 406, 1066, 1269, 1180, 1266, 1215, 1274, 1274,
	1213, 1177, 776, 1228, 1229, 1227, 1231, 1243, 1230, 1222,
	1223, 1239, 898, 776, 776, 776, 776, 776, 766, 1250,
	1258, 878, 1252, 1249, 759, 1275, 1254, 740, 1255, 1036,
	1651, 1248, 95, 1587, 94, 94, 296, 1511, 776, 296,
	1651, 1650, 776, 994, 95, 1286, 296, 1288, 1289, 1290,
	1271, 1272, 666, 665, 675, 676, 668, 669, 670, 671,
	672, 673, 674, 667, 94, 1293, 677, 424, 411, 70,
	75, 1115, 1621, 1117, 95, 1562, 658, 95, 296, 67,
	296, 425, 1315, 1, 317, 1643, 1446, 1299, 1519, 94,
	1122, 1144, 756, 757, 427, 943, 426, 1339, 1165, 1166,
	1607, 1553, 1414, 1072, 1063, 83, 571, 623, 82, 1597,
	1284, 1285, 341, 890, 1332, 618, 1341, 1071, 1364, 1183,
	1340, 715, 1070, 1563, 1330, 1281, 1338, 295, 1331, 1087,
	1509, 1354, 1353, 1424, 1360, 1278, 623, 94, 1603, 805,
	803, 804, 802, 94, 94, 1339, 1378, 1226, 747, 750,
	807, 424, 954, 1381, 806, 801, 310, 903, 327, 955,
	1032, 793, 1112, 760, 86, 425, 1375, 1367, 1317, 94,
	1316, 1118, 295, 1561, 1084, 1396, 421, 422, 427, 307,
	426, 628, 629, 312, 1387, 280, 94, 685, 94, 94,
	1206, 1403, 1274, 1274, 1066, 1259, 1066, 445, 438, 1413,
	1383, 992, 999, 748, 1479, 1371, 1184, 714, 1430, 1412,
	1404, 1477, 1406, 1382, 1407, 30, 974, 295, 1420, 1421,
	775, 350, 913, 1417, 365, 362, 363, 1003, 1405, 1218,
	659, 348, 342, 774, 1428, 1429, 767, 295, 1024, 1022,
	1021, 780, 1394, 94, 776, 1447, 94, 94, 94, 295,
	1390, 773, 666, 665, 675, 676, 668, 669, 670, 671,
	672, 673, 674, 667, 1007, 420, 677, 971, 1581, 1439,
	1473, 419, 53, 34, 296, 332, 642, 428, 28, 296,
	23, 22, 1452, 1453, 1440, 296, 1442, 21, 20, 1456,
	19, 296, 25, 18, 17, 1461, 16, 592, 1458, 1459,
	38, 1460, 95, 27, 1462, 26, 1464, 15, 14, 13,
	12, 95, 11, 10, 9, 5, 1226, 4, 1483, 645,
	24, 703, 2, 95, 95, 1492, 0, 0, 0, 0,
	0, 0, 1298, 94, 0, 0, 0, 0, 1491, 0,
	882, 1066, 0, 94, 1266, 0, 0, 0, 0, 0,
	0, 0, 1472, 0, 0, 1501, 0, 0, 0, 94,
	0, 1329, 0, 0, 0, 1502, 94, 900, 0, 0,
	0, 1505, 0, 0, 1521, 0, 0, 0, 0, 0,
	1526, 0, 0, 0, 0, 0, 909, 910, 911, 912,
	0, 0, 0, 1497, 1498, 1499, 0, 0, 0, 0,
	0, 0, 1524, 0, 0, 0, 0, 0, 94, 94,
	0, 94, 0, 0, 0, 0, 94, 1381, 94, 94,
	94, 295, 1532, 0, 95, 94, 1539, 296, 0, 296,
	296, 623, 95, 1546, 1537, 1547, 1549, 1550, 95, 1551,
	1545, 962, 963, 94, 295, 1558, 0, 1567, 0, 0,
	1552, 1512, 0, 1514, 0, 0, 0, 1541, 0, 0,
	1575, 0, 1568, 0, 1569, 0, 0, 0, 0, 0,
	0, 0, 0, 1381, 0, 1588, 1596, 1382, 1525, 30,
	0, 94, 0, 1595, 376, 1594, 0, 0, 0, 0,
	0, 0, 0, 0, 94, 94, 0, 0, 0, 0,
	957, 958, 1521, 1066, 1610, 0, 1611, 0, 0, 0,
	94, 1572, 0, 0, 1617, 1226, 0, 96, 97, 98,
	0, 295, 0, 0, 93, 1060, 0, 0, 0, 0,
	94, 0, 0, 1382, 0, 0, 329, 1626, 0, 991,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1634,
	1632, 94, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 296, 446, 1648, 1636, 574,
	95, 299, 0, 1659, 0, 296, 296, 95, 95, 95,
	302, 0, 0, 296, 0, 0, 0, 296, 311, 0,
	296, 0, 0, 0, 296, 1476, 95, 0, 0, 0,
	0, 95, 95, 95, 296, 95, 95, 665, 675, 676,
	668, 669, 670, 671, 672, 673, 674, 667, 95, 95,
	677, 0, 309, 0, 0, 0, 1469, 0, 316, 0,
	0, 0, 0, 0, 1646, 0, 666, 665, 675, 676,
	668, 669, 670, 671, 672, 673, 674, 667, 0, 0,
	677, 661, 0, 664, 0, 0, 1517, 0, 300, 678,
	679, 680, 681, 682, 683, 684, 0, 662, 663, 660,
	666, 665, 675, 676, 668, 669, 670, 671, 672, 673,
	674, 667, 0, 0, 677, 313, 303, 0, 314, 315,
	322, 0, 0, 95, 306, 308, 319, 304, 305, 324,
	323, 0, 301, 321, 320, 0, 0, 0, 0, 1187,
	666, 665, 675, 676, 668, 669, 670, 671, 672, 673,
	674, 667, 0, 0, 677, 0, 95, 95, 0, 1202,
	1203, 750, 0, 0, 0, 1468, 0, 0, 0, 0,
	0, 0, 1163, 0, 0, 95, 1164, 0, 0, 0,
	0, 0, 296, 0, 0, 95, 0, 1171, 1172, 296,
	0, 296, 0, 1178, 0, 0, 1181, 1182, 0, 296,
	296, 296, 0, 0, 1188, 0, 0, 95, 1190, 0,
	95, 1193, 1194, 1195, 1196, 1197, 0, 0, 0, 0,
	0, 95, 95, 0, 446, 0, 0, 0, 0, 0,
	0, 0, 0, 446, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 641, 643, 0, 0, 666,
	665, 675, 676, 668, 669, 670, 671, 672, 673, 674,
	667, 1241, 1242, 677, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 296, 95, 0, 95, 0,
	0, 0, 0, 0, 296, 296, 296, 296, 296, 0,
	0, 296, 296, 0, 0, 296, 95, 0, 0, 344,
	0, 0, 0, 777, 0, 0, 0, 1333, 0, 0,
	0, 0, 0, 296, 0, 0, 0, 0, 0, 296,
	296, 296, 0, 0, 0, 296, 95, 666, 665, 675,
	676, 668, 669, 670, 671, 672, 673, 674, 667, 0,
	0, 677, 1162, 0, 0, 0, 763, 293, 0, 1362,
	0, 0, 0, 0, 446, 0, 0, 331, 0, 0,
	794, 0, 666, 665, 675, 676, 668, 669, 670, 671,
	672, 673, 674, 667, 0, 1373, 677, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 575,
	0, 577, 1336, 1337, 666, 665, 675, 676, 668, 669,
	670, 671, 672, 673, 674, 667, 0, 0, 677, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 296, 0, 0, 0, 0, 0, 0, 0,
	1423, 0, 0, 296, 296, 296, 296, 296, 0, 0,
	0, 0, 0, 0, 0, 296, 0, 0, 0, 296,
	0, 0, 0, 296, 0, 0, 0, 0, 296, 296,
	1399, 0, 296, 296, 296, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 95, 0, 0,
	0, 0, 446, 0, 0, 0, 0, 0, 0, 446,
	446, 446, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 446, 0,
	0, 0, 0, 446, 446, 446, 1475, 446, 446, 0,
	0, 0, 0, 0, 0, 0, 95, 95, 0, 0,
	446, 446, 0, 0, 0, 341, 0, 0, 0, 0,
	0, 0, 1493, 0, 0, 1494, 0, 0, 1496, 0,
	0, 0, 0, 0, 0, 1455, 95, 0, 0, 1457,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1466, 1467, 0, 0, 0, 584, 0, 0, 0, 0,
	593, 95, 0, 0, 0, 0, 600, 0, 0, 0,
	0, 0, 602, 0, 0, 0, 0, 0, 0, 1485,
	1486, 0, 1489, 0, 0, 948, 0, 446, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 296,
	1500, 978, 0, 0, 0, 0, 0, 0, 0, 95,
	0, 0, 0, 1536, 341, 95, 95, 0, 982, 983,
	0, 0, 691, 692, 693, 694, 695, 696, 697, 698,
	699, 700, 0, 0, 0, 0, 0, 1004, 0, 0,
	0, 95, 0, 0, 296, 0, 0, 763, 0, 0,
	446, 0, 0, 0, 0, 0, 0, 0, 95, 0,
	95, 95, 0, 0, 0, 0, 0, 0, 0, 446,
	0, 0, 446, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 446, 574, 0, 0, 0, 0, 296,
	0, 0, 0, 0, 1548, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 769, 296,
	0, 781, 0, 0, 0, 95, 0, 0, 95, 95,
	95, 296, 0, 0, 1577, 1578, 1579, 1580, 0, 1584,
	0, 1585, 1586, 0, 0, 0, 0, 0, 446, 0,
	446, 0, 0, 0, 1591, 0, 1592, 1593, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 446, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1613, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1152, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1623, 95, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 95, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 95, 0, 0, 0, 0, 0, 0, 95, 0,
	0, 0, 0, 0, 0, 0, 800, 0, 0, 1660,
	1661, 0, 0, 0, 0, 0, 856, 857, 0, 0,
	0, 0, 0, 0, 866, 0, 0, 0, 781, 0,
	0, 873, 0, 0, 0, 0, 0, 0, 0, 0,
	95, 95, 0, 95, 0, 886, 0, 0, 95, 0,
	95, 95, 95, 296, 0, 0, 0, 95, 0, 0,
	0, 0, 0, 0, 978, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 95, 296, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 377, 0, 0, 918,
	0, 0, 927, 928, 929, 930, 931, 932, 933, 934,
	935, 936, 937, 938, 939, 940, 941, 0, 0, 446,
	0, 0, 0, 95, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 95, 95, 0, 0,
	294, 0, 0, 325, 0, 0, 0, 0, 0, 0,
	294, 0, 95, 0, 0, 0, 0, 0, 0, 981,
	0, 0, 0, 296, 0, 0, 0, 0, 1297, 446,
	0, 0, 95, 432, 432, 0, 0, 0, 0, 0,
	0, 0, 294, 0, 294, 0, 0, 0, 0, 0,
	0, 0, 0, 95, 0, 0, 0, 0, 446, 0,
	0, 0, 0, 1011, 0, 0, 0, 0, 0, 0,
	1015, 0, 1018, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1043, 446, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 446, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 446, 0, 0, 978, 0, 0, 1384, 1386, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1114, 0, 0, 0,
	0, 0, 0, 1386, 0, 1134, 1135, 1136, 1137, 1138,
	0, 0, 1141, 1142, 0, 0, 1143, 0, 0, 0,
	446, 0, 446, 1416, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1145, 0, 0, 0, 0, 0,
	0, 0, 1149, 0, 0, 0, 1151, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1157, 1158, 1159, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1443, 294, 0,
	1448, 1449, 1450, 294, 0, 0, 0, 0, 0, 294,
	0, 0, 0, 0, 0, 294, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 978, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 446, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1507, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1253, 0, 0, 446, 0, 0, 0, 0, 0, 0,
	446, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 432, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 294, 0, 294, 783, 0, 0, 0, 0, 0,
	0, 0, 1542, 1543, 0, 1544, 0, 0, 0, 0,
	1507, 0, 1507, 1507, 1507, 0, 0, 0, 0, 1416,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 1507, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 1334, 1335, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 1601, 1355, 1356, 0, 1357,
	1358, 0, 0, 0, 0, 0, 0, 0, 446, 446,
	0, 1365, 1366, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 978, 0, 1618, 0, 0, 0, 0, 0,
	1370, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1625, 0, 0, 0, 0, 294,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 294,
	294, 0, 0, 0, 0, 1507, 0, 294, 0, 0,
	0, 294, 0, 0, 294, 0, 0, 0, 877, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 294, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 1426,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1438, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	1441, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 1451, 1454, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 432, 877,
	0, 0, 0, 432, 432, 0, 0, 432, 432, 432,
	0, 0, 0, 979, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 432, 432, 432, 432, 432, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 294, 0, 0, 0,
	0, 0, 877, 294, 0, 294, 0, 0, 0, 0,
	0, 0, 0, 294, 1041, 294, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 1527, 1528,
	1529, 1530, 1531, 0, 0, 0, 1534, 1535, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 294,
	0, 0, 0, 0, 0, 0, 0, 0, 294, 294,
	294, 294, 294, 0, 0, 294, 294, 1576, 0, 294,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 294, 0, 0,
	0, 0, 0, 1147, 1148, 294, 0, 0, 0, 294,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 1620, 0, 0, 432, 432, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 432, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 1652, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 432, 294, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 979, 294, 294, 294,
	294, 294, 0, 0, 0, 0, 0, 0, 0, 1240,
	0, 0, 0, 294, 0, 0, 0, 1041, 0, 0,
	0, 0, 294, 294, 0, 0, 294, 1256, 877, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 432, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 877, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 294, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 979, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 294, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 294, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 294, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 294, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 979, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 557, 545, 0, 0, 501, 560, 474, 491, 568,
	492, 495, 532, 459, 514, 188, 489, 1041, 478, 454,
	485, 455, 476, 503, 129, 507, 473, 547, 517, 559,
	158, 0, 479, 534, 228, 122, 165, 566, 161, 523,
	294, 236, 176, 0, 0, 0, 505, 549, 512, 542,
	500, 533, 464, 522, 561, 490, 530, 562, 0, 0,
	0, 96, 97, 98, 0, 1067, 1068, 0, 0, 0,
	0, 0, 118, 0, 527, 556, 487, 529, 531, 570,
	453, 524, 0, 457, 460, 567, 552, 482, 483, 1267,
	0, 0, 0, 0, 0, 0, 504, 513, 539, 498,
	0, 0, 0, 0, 979, 0, 0, 0, 480, 0,
	521, 0, 0, 0, 461, 458, 0, 294, 0, 0,
	502, 0, 0, 0, 463, 0, 481, 540, 0, 451,
	138, 544, 551, 499, 297, 555, 497, 496, 558, 207,
	0, 240, 142, 157, 114, 154, 100, 110, 0, 140,
	185, 215, 219, 548, 477, 486, 123, 484, 217, 195,
	257, 520, 197, 216, 162, 246, 208, 256, 266, 267,
	243, 264, 275, 233, 103, 242, 254, 119, 227, 0,
	0, 0, 105, 252, 239, 174, 151, 152, 104, 0,
	213, 128, 136, 125, 187, 249, 250, 124, 278, 111,
	263, 107, 112, 262, 181, 245, 253, 175, 168, 106,
	251, 173, 167, 156, 132, 144, 205, 164, 206, 145,
	178, 177, 179, 0, 456, 0, 237, 260, 279, 116,
	472, 244, 271, 274, 0, 209, 117, 137, 131, 204,
	135, 159, 270, 272, 273, 180, 113, 147, 234, 155,
	163, 212, 277, 194, 218, 120, 259, 235, 468, 471,
	466, 467, 515, 516, 563, 564, 565, 541, 462, 0,
	469, 470, 0, 546, 553, 554, 519, 99, 108, 160,
	276, 210, 134, 261, 452, 465, 127, 475, 0, 0,
	488, 493, 494, 506, 508, 509, 510, 511, 518, 525,
	526, 528, 535, 536, 537, 538, 543, 550, 569, 101,
	102, 109, 115, 121, 126, 130, 133, 139, 143, 146,
	148, 149, 150, 153, 166, 169, 170, 171, 172, 182,
	183, 184, 186, 189, 190, 191, 192, 193, 196, 198,
	199, 200, 201, 202, 203, 211, 214, 220, 221, 222,
	223, 224, 225, 226, 229, 230, 231, 232, 238, 241,
	247, 248, 258, 265, 268, 141, 255, 269, 557, 545,
	0, 0, 501, 560, 474, 491, 568, 492, 495, 532,
	459, 514, 188, 489, 0, 478, 454, 485, 455, 476,
	503, 129, 507, 473, 547, 517, 559, 158, 0, 479,
	534, 228, 122, 165, 566, 161, 523, 0, 236, 176,
	0, 0, 0, 505, 549, 512, 542, 500, 533, 464,
	522, 561, 490, 530, 562, 0, 0, 0, 96, 97,
	98, 0, 1067, 1068, 0, 0, 0, 0, 0, 118,
	0, 527, 556, 487, 529, 531, 570, 453, 524, 0,
	457, 460, 567, 552, 482, 483, 0, 0, 0, 0,
	0, 0, 0, 504, 513, 539, 498, 0, 0, 0,
	0, 0, 0, 0, 0, 480, 0, 521, 0, 0,
	0, 461, 458, 0, 0, 0, 0, 502, 0, 0,
	0, 463, 0, 481, 540, 0, 451, 138, 544, 551,
	499, 297, 555, 497, 496, 558, 207, 0, 240, 142,
	157, 114, 154, 100, 110, 0, 140, 185, 215, 219,
	548, 477, 486, 123, 484, 217, 195, 257, 520, 197,
	216, 162, 246, 208, 256, 266, 267, 243, 264, 275,
	233, 103, 242, 254, 119, 227, 0, 0, 0, 105,
	252, 239, 174, 151, 152, 104, 0, 213, 128, 136,
	125, 187, 249, 250, 124, 278, 111, 263, 107, 112,
	262, 181, 245, 253, 175, 168, 106, 251, 173, 167,
	156, 132, 144, 205, 164, 206, 145, 178, 177, 179,
	0, 456, 0, 237, 260, 279, 116, 472, 244, 271,
	274, 0, 209, 117, 137, 131, 204, 135, 159, 270,
	272, 273, 180, 113, 147, 234, 155, 163, 212, 277,
	194, 218, 120, 259, 235, 468, 471, 466, 467, 515,
	516, 563, 564, 565, 541, 462, 0, 469, 470, 0,
	546, 553, 554, 519, 99, 108, 160, 276, 210, 134,
	261, 452, 465, 127, 475, 0, 0, 488, 493, 494,
	506, 508, 509, 510, 511, 518, 525, 526, 528, 535,
	536, 537, 538, 543, 550, 569, 101, 102, 109, 115,
	121, 126, 130, 133, 139, 143, 146, 148, 149, 150,
	153, 166, 169, 170, 171, 172, 182, 183, 184, 186,
	189, 190, 191, 192, 193, 196, 198, 199, 200, 201,
	202, 203, 211, 214, 220, 221, 222, 223, 224, 225,
	226, 229, 230, 231, 232, 238, 241, 247, 248, 258,
	265, 268, 141, 255, 269, 557, 545, 0, 0, 501,
	560, 474, 491, 568, 492, 495, 532, 459, 514, 188,
	489, 0, 478, 454, 485, 455, 476, 503, 129, 507,
	473, 547, 517, 559, 158, 0, 479, 534, 228, 122,
	165, 566, 161, 523, 0, 236, 176, 0, 0, 0,
	505, 549, 512, 542, 500, 533, 464, 522, 561, 490,
	530, 562, 61, 0, 0, 96, 97, 98, 0, 0,
	0, 0, 0, 0, 0, 0, 118, 0, 527, 556,
	487, 529, 531, 570, 453, 524, 0, 457, 460, 567,
	552, 482, 483, 0, 0, 0, 0, 0, 0, 0,
	504, 513, 539, 498, 0, 0, 0, 0, 0, 0,
	0, 0, 480, 0, 521, 0, 0, 0, 461, 458,
	0, 0, 0, 0, 502, 0, 0, 0, 463, 0,
	481, 540, 0, 451, 138, 544, 551, 499, 297, 555,
	497, 496, 558, 207, 0, 240, 142, 157, 114, 154,
	100, 110, 0, 140, 185, 215, 219, 548, 477, 486,
	123, 484, 217, 195, 257, 520, 197, 216, 162, 246,
	208, 256, 266, 267, 243, 264, 275, 233, 103, 242,
	254, 119, 227, 0, 0, 0, 105, 252, 239, 174,
	151, 152, 104, 0, 213, 128, 136, 125, 187, 249,
	250, 124, 278, 111, 263, 107, 112, 262, 181, 245,
	253, 175, 168, 106, 251, 173, 167, 156, 132, 144,
	205, 164, 206, 145, 178, 177, 179, 0, 456, 0,
	237, 260, 279, 116, 472, 244, 271, 274, 0, 209,
	117, 137, 131, 204, 135, 159, 270, 272, 273, 180,
	113, 147, 234, 155, 163, 212, 277, 194, 218, 120,
	259, 235, 468, 471, 466, 467, 515, 516, 563, 564,
	565, 541, 462, 0, 469, 470, 0, 546, 553, 554,
	519, 99, 108, 160, 276, 210, 134, 261, 452, 465,
	127, 475, 0, 0, 488, 493, 494, 506, 508, 509,
	510, 511, 518, 525, 526, 528, 535, 536, 537, 538,
	543, 550, 569, 101, 102, 109, 115, 121, 126, 130,
	133, 139, 143, 146, 148, 149, 150, 153, 166, 169,
	170, 171, 172, 182, 183, 184, 186, 189, 190, 191,
	192, 193, 196, 198, 199, 200, 201, 202, 203, 211,
	214, 220, 221, 222, 223, 224, 225, 226, 229, 230,
	231, 232, 238, 241, 247, 248, 258, 265, 268, 141,
	255, 269, 557, 545, 0, 0, 501, 560, 474, 491,
	568, 492, 495, 532, 459, 514, 188, 489, 0, 478,
	454, 485, 455, 476, 503, 129, 507, 473, 547, 517,
	559, 158, 0, 479, 534, 228, 122, 165, 566, 161,
	523, 0, 236, 176, 0, 0, 0, 505, 549, 512,
	542, 500, 533, 464, 522, 561, 490, 530, 562, 0,
	0, 0, 96, 97, 98, 0, 0, 0, 0, 0,
	0, 0, 0, 118, 0, 527, 556, 487, 529, 531,
	570, 453, 524, 0, 457, 460, 567, 552, 482, 483,
	0, 0, 0, 0, 0, 0, 0, 504, 513, 539,
	498, 0, 0, 0, 0, 0, 0, 1374, 0, 480,
	0, 521, 0, 0, 0, 461, 458, 0, 0, 0,
	0, 502, 0, 0, 0, 463, 0, 481, 540, 0,
	451, 138, 544, 551, 499, 297, 555, 497, 496, 558,
	207, 0, 240, 142, 157, 114, 154, 100, 110, 0,
	140, 185, 215, 219, 548, 477, 486, 123, 484, 217,
	195, 257, 520, 197, 216, 162, 246, 208, 256, 266,
	267, 243, 264, 275, 233, 103, 242, 254, 119, 227,
	0, 0, 0, 105, 252, 239, 174, 151, 152, 104,
	0, 213, 128, 136, 125, 187, 249, 250, 124, 278,
	111, 263, 107, 112, 262, 181, 245, 253, 175, 168,
	106, 251, 173, 167, 156, 132, 144, 205, 164, 206,
	145, 178, 177, 179, 0, 456, 0, 237, 260, 279,
	116, 472, 244, 271, 274, 0, 209, 117, 137, 131,
	204, 135, 159, 270, 272, 273, 180, 113, 147, 234,
	155, 163, 212, 277, 194, 218, 120, 259, 235, 468,
	471, 466, 467, 515, 516, 563, 564, 565, 541, 462,
	0, 469, 470, 0, 546, 553, 554, 519, 99, 108,
	160, 276, 210, 134, 261, 452, 465, 127, 475, 0,
	0, 488, 493, 494, 506, 508, 509, 510, 511, 518,
	525, 526, 528, 535, 536, 537, 538, 543, 550, 569,
	101, 102, 109, 115, 121, 126, 130, 133, 139, 143,
	146, 148, 149, 150, 153, 166, 169, 170, 171, 172,
	182, 183, 184, 186, 189, 190, 191, 192, 193, 196,
	198, 199, 200, 201, 202, 203, 211, 214, 220, 221,
	222, 223, 224, 225, 226, 229, 230, 231, 232, 238,
	241, 247, 248, 258, 265, 268, 141, 255, 269, 557,
	545, 0, 0, 501, 560, 474, 491, 568, 492, 495,
	532, 459, 514, 188, 489, 0, 478, 454, 485, 455,
	476, 503, 129, 507, 473, 547, 517, 559, 158, 0,
	479, 534, 228, 122, 165, 566, 161, 523, 0, 236,
	176, 0, 0, 0, 505, 549, 512, 542, 500, 533,
	464, 522, 561, 490, 530, 562, 0, 0, 0, 96,
	97, 98, 0, 0, 0, 0, 0, 0, 0, 0,
	118, 0, 527, 556, 487, 529, 531, 570, 453, 524,
	0, 457, 460, 567, 552, 482, 483, 0, 0, 0,
	0, 0, 0, 0, 504, 513, 539, 498, 0, 0,
	0, 0, 0, 0, 1257, 0, 480, 0, 521, 0,
	0, 0, 461, 458, 0, 0, 0, 0, 502, 0,
	0, 0, 463, 0, 481, 540, 0, 451, 138, 544,
	551, 499, 297, 555, 497, 496, 558, 207, 0, 240,
	142, 157, 114, 154, 100, 110, 0, 140, 185, 215,
	219, 548, 477, 486, 123, 484, 217, 195, 257, 520,
	197, 216, 162, 246, 208, 256, 266, 267, 243, 264,
	275, 233, 103, 242, 254, 119, 227, 0, 0, 0,
	105, 252, 239, 174, 151, 152, 104, 0, 213, 128,
	136, 125, 187, 249, 250, 124, 278, 111, 263, 107,
	112, 262, 181, 245, 253, 175, 168, 106, 251, 173,
	167, 156, 132, 144, 205, 164, 206, 145, 178, 177,
	179, 0, 456, 0, 237, 260, 279, 116, 472, 244,
	271, 274, 0, 209, 117, 137, 131, 204, 135, 159,
	270, 272, 273, 180, 113, 147, 234, 155, 163, 212,
	277, 194, 218, 120, 259, 235, 468, 471, 466, 467,
	515, 516, 563, 564, 565, 541, 462, 0, 469, 470,
	0, 546, 553, 554, 519, 99, 108, 160, 276, 210,
	134, 261, 452, 465, 127, 475, 0, 0, 488, 493,
	494, 506, 508, 509, 510, 511, 518, 525, 526, 528,
	535, 536, 537, 538, 543, 550, 569, 101, 102, 109,
	115, 121, 126, 130, 133, 139, 143, 146, 148, 149,
	150, 153, 166, 169, 170, 171, 172, 182, 183, 184,
	186, 189, 190, 191, 192, 193, 196, 198, 199, 200,
	201, 202, 203, 211, 214, 220, 221, 222, 223, 224,
	225, 226, 229, 230, 231, 232, 238, 241, 247, 248,
	258, 265, 268, 141, 255, 269, 557, 545, 0, 0,
	501, 560, 474, 491, 568, 492, 495, 532, 459, 514,
	188, 489, 0, 478, 454, 485, 455, 476, 503, 129,
	507, 473, 547, 517, 559, 158, 0, 479, 534, 228,
	122, 165, 566, 161, 523, 0, 236, 176, 0, 0,
	0, 505, 549, 512, 542, 500, 533, 464, 522, 561,
	490, 530, 562, 0, 0, 0, 96, 97, 98, 0,
	0, 0, 0, 0, 0, 0, 0, 118, 0, 527,
	556, 487, 529, 531, 570, 453, 524, 0, 457, 460,
	567, 552, 482, 483, 0, 0, 0, 0, 0, 0,
	0, 504, 513, 539, 498, 0, 0, 0, 0, 0,
	0, 1013, 0, 480, 0, 521, 0, 0, 0, 461,
	458, 0, 0, 0, 0, 502, 0, 0, 0, 463,
	0, 481, 540, 0, 451, 138, 544, 551, 499, 297,
	555, 497, 496, 558, 207, 0, 240, 142, 157, 114,
	154, 100, 110, 0, 140, 185, 215, 219, 548, 477,
	486, 123, 484, 217, 195, 257, 520, 197, 216, 162,
	246, 208, 256, 266, 267, 243, 264, 275, 233, 103,
	242, 254, 119, 227, 0, 0, 0, 105, 252, 239,
	174, 151, 152, 104, 0, 213, 128, 136, 125, 187,
	249, 250, 124, 278, 111, 263, 107, 112, 262, 181,
	245, 253, 175, 168, 106, 251, 173, 167, 156, 132,
	144, 205, 164, 206, 145, 178, 177, 179, 0, 456,
	0, 237, 260, 279, 116, 472, 244, 271, 274, 0,
	209, 117, 137, 131, 204, 135, 159, 270, 272, 273,
	180, 113, 147, 234, 155, 163, 212, 277, 194, 218,
	120, 259, 235, 468, 471, 466, 467, 515, 516, 563,
	564, 565, 541, 462, 0, 469, 470, 0, 546, 553,
	554, 519, 99, 108, 160, 276, 210, 134, 261, 452,
	465, 127, 475, 0, 0, 488, 493, 494, 506, 508,
	509, 510, 511, 518, 525, 526, 528, 535, 536, 537,
	538, 543, 550, 569, 101, 102, 109, 115, 121, 126,
	130, 133, 139, 143, 146, 148, 149, 150, 153, 166,
	169, 170, 171, 172, 182, 183, 184, 186, 189, 190,
	191, 192, 193, 196, 198, 199, 200, 201, 202, 203,
	211, 214, 220, 221, 222, 223, 224, 225, 226, 229,
	230, 231, 232, 238, 241, 247, 248, 258, 265, 268,
	141, 255, 269, 557, 545, 0, 0, 501, 560, 474,
	491, 568, 492, 495, 532, 459, 514, 188, 489, 0,
	478, 454, 485, 455, 476, 503, 129, 507, 473, 547,
	517, 559, 158, 0, 479, 534, 228, 122, 165, 566,
	161, 523, 0, 236, 176, 0, 0, 0, 505, 549,
	512, 542, 500, 533, 464, 522, 561, 490, 530, 562,
	0, 0, 0, 96, 97, 98, 0, 0, 0, 0,
	0, 0, 0, 0, 118, 0, 527, 556, 487, 529,
	531, 570, 453, 524, 0, 457, 460, 567, 552, 482,
	483, 0, 0, 0, 0, 0, 0, 0, 504, 513,
	539, 498, 0, 0, 0, 0, 0, 0, 0, 0,
	480, 0, 521, 0, 0, 0, 461, 458, 0, 0,
	0, 0, 502, 0, 0, 0, 463, 0, 481, 540,
	0, 451, 138, 544, 551, 499, 297, 555, 497, 496,
	558, 207, 0, 240, 142, 157, 114, 154, 100, 110,
	0, 140, 185, 215, 219, 548, 477, 486, 123, 484,
	217, 195, 257, 520, 197, 216, 162, 246, 208, 256,
	266, 267, 243, 264, 275, 233, 103, 242, 254, 119,
	227, 0, 0, 0, 105, 252, 239, 174, 151, 152,
	104, 0, 213, 128, 136, 125, 187, 249, 250, 124,
	278, 111, 263, 107, 112, 262, 181, 245, 253, 175,
	168, 106, 251, 173, 167, 156, 132, 144, 205, 164,
	206, 145, 178, 177, 179, 0, 456, 0, 237, 260,
	279, 116, 472, 244, 271, 274, 0, 209, 117, 137,
	131, 204, 135, 159, 270, 272, 273, 180, 113, 147,
	234, 155, 163, 212, 277, 194, 218, 120, 259, 235,
	468, 471, 466, 467, 515, 516, 563, 564, 565, 541,
	462, 0, 469, 470, 0, 546, 553, 554, 519, 99,
	108, 160, 276, 210, 134, 261, 452, 465, 127, 475,
	0, 0, 488, 493, 494, 506, 508, 509, 510, 511,
	518, 525, 526, 528, 535, 536, 537, 538, 543, 550,
	569, 101, 102, 109, 115, 121, 126, 130, 133, 139,
	143, 146, 148, 149, 150, 153, 166, 169, 170, 171,
	172, 182, 183, 184, 186, 189, 190, 191, 192, 193,
	196, 198, 199, 200, 201, 202, 203, 211, 214, 220,
	221, 222, 223, 224, 225, 226, 229, 230, 231, 232,
	238, 241, 247, 248, 258, 265, 268, 141, 255, 269,
	557, 545, 0, 0, 501, 560, 474, 491, 568, 492,
	495, 532, 459, 514, 188, 489, 0, 478, 454, 485,
	455, 476, 503, 129, 507, 473, 547, 517, 559, 158,
	0, 479, 534, 228, 122, 165, 566, 161, 523, 0,
	236, 176, 0, 0, 0, 505, 549, 512, 542, 500,
	533, 464, 522, 561, 490, 530, 562, 0, 0, 0,
	96, 97, 98, 0, 0, 0, 0, 0, 0, 0,
	0, 118, 0, 527, 556, 487, 529, 531, 570, 453,
	524, 0, 457, 460, 567, 552, 482, 483, 0, 0,
	0, 0, 0, 0, 0, 504, 513, 539, 498, 0,
	0, 0, 0, 0, 0, 0, 0, 480, 0, 521,
	0, 0, 0, 461, 458, 0, 0, 0, 0, 502,
	0, 0, 0, 463, 0, 481, 540, 0, 451, 138,
	544, 551, 499, 297, 555, 497, 496, 558, 207, 0,
	240, 142, 157, 114, 154, 100, 110, 0, 140, 185,
	215, 219, 548, 477, 486, 123, 484, 217, 195, 257,
	520, 197, 216, 162, 246, 208, 256, 266, 267, 243,
	264, 275, 233, 103, 242, 254, 119, 227, 0, 0,
	0, 105, 252, 239, 174, 151, 152, 104, 0, 213,
	128, 136, 125, 187, 249, 250, 124, 278, 111, 263,
	107, 449, 262, 181, 245, 253, 175, 168, 106, 251,
	173, 167, 156, 132, 144, 205, 164, 206, 145, 178,
	177, 179, 0, 456, 0, 237, 260, 279, 116, 472,
	244, 271, 274, 0, 209, 117, 137, 131, 204, 135,
	159, 270, 272, 273, 450, 448, 443, 442, 155, 163,
	212, 277, 194, 218, 120, 259, 235, 468, 471, 466,
	467, 515, 516, 563, 564, 565, 541, 462, 0, 469,
	470, 0, 546, 553, 554, 519, 99, 108, 160, 276,
	210, 134, 261, 452, 465, 127, 475, 0, 0, 488,
	493, 494, 506, 508, 509, 510, 511, 518, 525, 526,
	528, 535, 536, 537, 538, 543, 550, 569, 101, 102,
	109, 115, 121, 126, 130, 133, 139, 143, 146, 148,
	149, 150, 153, 166, 169, 170, 171, 172, 182, 183,
	184, 186, 189, 190, 191, 192, 193, 196, 198, 199,
	200, 201, 202, 203, 211, 214, 220, 221, 222, 223,
	224, 225, 226, 229, 230, 231, 232, 238, 241, 247,
	248, 258, 265, 268, 141, 255, 269, 557, 545, 0,
	0, 501, 560, 474, 491, 568, 492, 495, 532, 459,
	514, 188, 489, 0, 478, 454, 485, 455, 476, 503,
	129, 507, 473, 547, 517, 559, 158, 0, 479, 534,
	228, 122, 165, 566, 161, 523, 0, 236, 176, 0,
	0, 0, 505, 549, 512, 542, 500, 533, 464, 522,
	561, 490, 530, 562, 0, 0, 0, 96, 97, 98,
	0, 0, 0, 0, 0, 0, 0, 0, 118, 0,
	527, 556, 487, 529, 531, 570, 453, 524, 0, 457,
	460, 567, 552, 482, 483, 0, 0, 0, 0, 0,
	0, 0, 504, 513, 539, 498, 0, 0, 0, 0,
	0, 0, 0, 0, 480, 0, 521, 0, 0, 0,
	461, 458, 0, 0, 0, 0, 502, 0, 0, 0,
	463, 0, 481, 540, 0, 451, 138, 544, 551, 499,
	297, 555, 497, 496, 558, 207, 0, 240, 142, 157,
	114, 154, 100, 110, 0, 140, 185, 215, 219, 548,
	477, 486, 123, 484, 217, 195, 257, 520, 197, 216,
	162, 246, 208, 256, 266, 267, 243, 264, 275, 233,
	103, 242, 785, 119, 227, 0, 0, 0, 105, 252,
	239, 174, 151, 152, 104, 0, 213, 128, 136, 125,
	187, 249, 250, 124, 278, 111, 263, 107, 449, 262,
	181, 245, 253, 175, 168, 106, 251, 173, 167, 156,
	132, 144, 205, 164, 206, 145, 178, 177, 179, 0,
	456, 0, 237, 260, 279, 116, 472, 244, 271, 274,
	0, 209, 117, 137, 131, 204, 135, 159, 270, 272,
	273, 450, 448, 443, 442, 155, 163, 212, 277, 194,
	218, 120, 259, 235, 468, 471, 466, 467, 515, 516,
	563, 564, 565, 541, 462, 0, 469, 470, 0, 546,
	553, 554, 519, 99, 108, 160, 276, 210, 134, 261,
	452, 465, 127, 475, 0, 0, 488, 493, 494, 506,
	508, 509, 510, 511, 518, 525, 526, 528, 535, 536,
	537, 538, 543, 550, 569, 101, 102, 109, 115, 121,
	126, 130, 133, 139, 143, 146, 148, 149, 150, 153,
	166, 169, 170, 171, 172, 182, 183, 184, 186, 189,
	190, 191, 192, 193, 196, 198, 199, 200, 201, 202,
	203, 211, 214, 220, 221, 222, 223, 224, 225, 226,
	229, 230, 231, 232, 238, 241, 247, 248, 258, 265,
	268, 141, 255, 269, 557, 545, 0, 0, 501, 560,
	474, 491, 568, 492, 495, 532, 459, 514, 188, 489,
	0, 478, 454, 485, 455, 476, 503, 129, 507, 473,
	547, 517, 559, 158, 0, 479, 534, 228, 122, 165,
	566, 161, 523, 0, 236, 176, 0, 0, 0, 505,
	549, 512, 542, 500, 533, 464, 522, 561, 490, 530,
	562, 0, 0, 0, 96, 97, 98, 0, 0, 0,
	0, 0, 0, 0, 0, 118, 0, 527, 556, 487,
	529, 531, 570, 453, 524, 0, 457, 460, 567, 552,
	482, 483, 0, 0, 0, 0, 0, 0, 0, 504,
	513, 539, 498, 0, 0, 0, 0, 0, 0, 0,
	0, 480, 0, 521, 0, 0, 0, 461, 458, 0,
	0, 0, 0, 502, 0, 0, 0, 463, 0, 481,
	540, 0, 451, 138, 544, 551, 499, 297, 555, 497,
	496, 558, 207, 0, 240, 142, 157, 114, 154, 100,
	110, 0, 140, 185, 215, 219, 548, 477, 486, 123,
	484, 217, 195, 257, 520, 197, 216, 162, 246, 208,
	256, 266, 267, 243, 264, 275, 233, 103, 242, 440,
	119, 227, 0, 0, 0, 105, 252, 239, 174, 151,
	152, 104, 0, 213, 128, 136, 125, 187, 249, 250,
	124, 278, 111, 263, 107, 449, 262, 181, 245, 253,
	175, 168, 106, 251, 173, 167, 156, 132, 144, 205,
	164, 206, 145, 178, 177, 179, 0, 456, 0, 237,
	260, 279, 116, 472, 244, 271, 274, 0, 209, 117,
	137, 131, 204, 135, 159, 270, 272, 273, 450, 448,
	443, 442, 155, 163, 212, 277, 194, 218, 120, 259,
	235, 468, 471, 466, 467, 515, 516, 563, 564, 565,
	541, 462, 0, 469, 470, 0, 546, 553, 554, 519,
	99, 108, 160, 276, 210, 134, 261, 452, 465, 127,
	475, 0, 0, 488, 493, 494, 506, 508, 509, 510,
	511, 518, 525, 526, 528, 535, 536, 537, 538, 543,
	550, 569, 101, 102, 109, 115, 121, 126, 130, 133,
	139, 143, 146, 148, 149, 150, 153, 166, 169, 170,
	171, 172, 182, 183, 184, 186, 189, 190, 191, 192,
	193, 196, 198, 199, 200, 201, 202, 203, 211, 214,
	220, 221, 222, 223, 224, 225, 226, 229, 230, 231,
	232, 238, 241, 247, 248, 258, 265, 268, 141, 255,
	269, 188, 0, 0, 950, 0, 346, 0, 0, 0,
	129, 0, 345, 0, 0, 0, 158, 0, 951, 0,
	228, 122, 165, 389, 161, 0, 0, 236, 176, 0,
	0, 0, 0, 0, 380, 381, 0, 0, 0, 0,
	0, 0, 0, 0, 61, 0, 0, 96, 97, 98,
	367, 366, 369, 370, 371, 372, 0, 0, 118, 368,
	373, 374, 375, 0, 0, 0, 0, 343, 360, 0,
	388, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	357, 358, 430, 0, 0, 0, 403, 0, 359, 0,
	0, 352, 353, 355, 354, 356, 361, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 138, 402, 0, 0,
	297, 0, 0, 400, 0, 207, 0, 240, 142, 157,
	114, 154, 100, 110, 0, 140, 185, 215, 219, 0,
	0, 0, 123, 0, 217, 195, 257, 0, 197, 216,
	162, 246, 208, 256, 266, 267, 243, 264, 275, 233,
	103, 242, 254, 119, 227, 0, 0, 0, 105, 252,
	239, 174, 151, 152, 104, 0, 213, 128, 136, 125,
	187, 249, 250, 124, 278, 111, 263, 107, 112, 262,
	181, 245, 253, 175, 168, 106, 251, 173, 167, 156,
	132, 144, 205, 164, 206, 145, 178, 177, 179, 0,
	0, 0, 237, 260, 279, 116, 0, 244, 271, 274,
	0, 209, 117, 137, 131, 204, 135, 159, 270, 272,
	273, 180, 113, 147, 234, 155, 163, 212, 277, 194,
	218, 120, 259, 235, 390, 401, 396, 397, 394, 395,
	393, 392, 391, 404, 382, 383, 384, 385, 387, 0,
	398, 399, 386, 99, 108, 160, 276, 210, 134, 261,
	0, 0, 127, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 102, 109, 115, 121,
	126, 130, 133, 139, 143, 146, 148, 149, 150, 153,
	166, 169, 170, 171, 172, 182, 183, 184, 186, 189,
	190, 191, 192, 193, 196, 198, 199, 200, 201, 202,
	203, 211, 214, 220, 221, 222, 223, 224, 225, 226,
	229, 230, 231, 232, 238, 241, 247, 248, 258, 265,
	268, 141, 255, 269, 188, 0, 0, 0, 0, 346,
	0, 0, 0, 129, 0, 345, 0, 0, 0, 158,
	0, 0, 0, 228, 122, 165, 389, 161, 0, 0,
	236, 176, 0, 0, 0, 0, 0, 380, 381, 0,
	0, 0, 0, 0, 0, 1058, 0, 61, 0, 0,
	96, 97, 98, 367, 366, 369, 370, 371, 372, 0,
	0, 118, 368, 373, 374, 375, 1059, 0, 0, 0,
	343, 360, 0, 388, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 357, 358, 0, 0, 0, 0, 403,
	0, 359, 0, 0, 352, 353, 355, 354, 356, 361,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 138,
	402, 0, 0, 297, 0, 0, 400, 0, 207, 0,
	240, 142, 157, 114, 154, 100, 110, 0, 140, 185,
	215, 219, 0, 0, 0, 123, 0, 217, 195, 257,
	0, 197, 216, 162, 246, 208, 256, 266, 267, 243,
	264, 275, 233, 103, 242, 254, 119, 227, 0, 0,
	0, 105, 252, 239, 174, 151, 152, 104, 0, 213,
	128, 136, 125, 187, 249, 250, 124, 278, 111, 263,
	107, 112, 262, 181, 245, 253, 175, 168, 106, 251,
	173, 167, 156, 132, 144, 205, 164, 206, 145, 178,
	177, 179, 0, 0, 0, 237, 260, 279, 116, 0,
	244, 271, 274, 0, 209, 117, 137, 131, 204, 135,
	159, 270, 272, 273, 180, 113, 147, 234, 155, 163,
	212, 277, 194, 218, 120, 259, 235, 390, 401, 396,
	397, 394, 395, 393, 392, 391, 404, 382, 383, 384,
	385, 387, 0, 398, 399, 386, 99, 108, 160, 276,
	210, 134, 261, 0, 0, 127, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 102,
	109, 115, 121, 126, 130, 133, 139, 143, 146, 148,
	149, 150, 153, 166, 169, 170, 171, 172, 182, 183,
	184, 186, 189, 190, 191, 192, 193, 196, 198, 199,
	200, 201, 202, 203, 211, 214, 220, 221, 222, 223,
	224, 225, 226, 229, 230, 231, 232, 238, 241, 247,
	248, 258, 265, 268, 141, 255, 269, 188, 0, 0,
	0, 0, 346, 0, 0, 0, 129, 0, 345, 0,
	0, 0, 158, 0, 0, 0, 228, 122, 165, 389,
	161, 0, 0, 236, 176, 0, 0, 0, 0, 0,
	380, 381, 0, 0, 0, 0, 0, 0, 0, 0,
	61, 0, 418, 96, 97, 98, 367, 366, 369, 370,
	371, 372, 0, 0, 118, 368, 373, 374, 375, 0,
	0, 0, 0, 343, 360, 0, 388, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 357, 358, 0, 0,
	0, 0, 403, 0, 359, 0, 0, 352, 353, 355,
	354, 356, 361, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 138, 402, 0, 0, 297, 0, 0, 400,
	0, 207, 0, 240, 142, 157, 114, 154, 100, 110,
	0, 140, 185, 215, 219, 0, 0, 0, 123, 0,
	217, 195, 257, 0, 197, 216, 162, 246, 208, 256,
	266, 267, 243, 264, 275, 233, 103, 242, 254, 119,
	227, 0, 0, 0, 105, 252, 239, 174, 151, 152,
	104, 0, 213, 128, 136, 125, 187, 249, 250, 124,
	278, 111, 263, 107, 112, 262, 181, 245, 253, 175,
	168, 106, 251, 173, 167, 156, 132, 144, 205, 164,
	206, 145, 178, 177, 179, 0, 0, 0, 237, 260,
	279, 116, 0, 244, 271, 274, 0, 209, 117, 137,
	131, 204, 135, 159, 270, 272, 273, 180, 113, 147,
	234, 155, 163, 212, 277, 194, 218, 120, 259, 235,
	390, 401, 396, 397, 394, 395, 393, 392, 391, 404,
	382, 383, 384, 385, 387, 0, 398, 399, 386, 99,
	108, 160, 276, 210, 134, 261, 0, 0, 127, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 102, 109, 115, 121, 126, 130, 133, 139,
	143, 146, 148, 149, 150, 153, 166, 169, 170, 171,
	172, 182, 183, 184, 186, 189, 190, 191, 192, 193,
	196, 198, 199, 200, 201, 202, 203, 211, 214, 220,
	221, 222, 223, 224, 225, 226, 229, 230, 231, 232,
	238, 241, 247, 248, 258, 265, 268, 141, 255, 269,
	188, 0, 0, 0, 0, 346, 0, 0, 0, 129,
	0, 345, 0, 0, 0, 158, 0, 0, 0, 228,
	122, 165, 389, 161, 0, 0, 236, 176, 0, 0,
	0, 0, 0, 380, 381, 0, 0, 0, 0, 0,
	0, 0, 0, 61, 0, 0, 96, 97, 98, 367,
	366, 369, 370, 371, 372, 0, 0, 118, 368, 373,
	374, 375, 0, 0, 0, 0, 343, 360, 0, 388,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 357,
	358, 430, 0, 0, 0, 403, 0, 359, 0, 0,
	352, 353, 355, 354, 356, 361, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 138, 402, 0, 0, 297,
	0, 0, 400, 0, 207, 0, 240, 142, 157, 114,
	154, 100, 110, 0, 140, 185, 215, 219, 0, 0,
	0, 123, 0, 217, 195, 257, 0, 197, 216, 162,
	246, 208, 256, 266, 267, 243, 264, 275, 233, 103,
	242, 254, 119, 227, 0, 0, 0, 105, 252, 239,
	174, 151, 152, 104, 0, 213, 128, 136, 125, 187,
	249, 250, 124, 278, 111, 263, 107, 112, 262, 181,
	245, 253, 175, 168, 106, 251, 173, 167, 156, 132,
	144, 205, 164, 206, 145, 178, 177, 179, 0, 0,
	0, 237, 260, 279, 116, 0, 244, 271, 274, 0,
	209, 117, 137, 131, 204, 135, 159, 270, 272, 273,
	180, 113, 147, 234, 155, 163, 212, 277, 194, 218,
	120, 259, 235, 390, 401, 396, 397, 394, 395, 393,
	392, 391, 404, 382, 383, 384, 385, 387, 0, 398,
	399, 386, 99, 108, 160, 276, 210, 134, 261, 0,
	0, 127, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 102, 109, 115, 121, 126,
	130, 133, 139, 143, 146, 148, 149, 150, 153, 166,
	169, 170, 171, 172, 182, 183, 184, 186, 189, 190,
	191, 192, 193, 196, 198, 199, 200, 201, 202, 203,
	211, 214, 220, 221, 222, 223, 224, 225, 226, 229,
	230, 231, 232, 238, 241, 247, 248, 258, 265, 268,
	141, 255, 269, 188, 0, 0, 0, 0, 346, 0,
	0, 0, 129, 0, 345, 0, 0, 0, 158, 0,
	0, 0, 228, 122, 165, 389, 161, 0, 0, 236,
	176, 0, 0, 0, 0, 0, 380, 381, 0, 0,
	0, 0, 0, 0, 0, 0, 61, 0, 0, 96,
	97, 98, 367, 968, 369, 370, 371, 372, 0, 0,
	118, 368, 373, 374, 375, 0, 0, 0, 0, 343,
	360, 0, 388, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 357, 358, 430, 0, 0, 0, 403, 0,
	359, 0, 0, 352, 353, 355, 354, 356, 361, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 138, 402,
	0, 0, 297, 0, 0, 400, 0, 207, 0, 240,
	142, 157, 114, 154, 100, 110, 0, 140, 185, 215,
	219, 0, 0, 0, 123, 0, 217, 195, 257, 0,
	197, 216, 162, 246, 208, 256, 266, 267, 243, 264,
	275, 233, 103, 242, 254, 119, 227, 0, 0, 0,
	105, 252, 239, 174, 151, 152, 104, 0, 213, 128,
	136, 125, 187, 249, 250, 124, 278, 111, 263, 107,
	112, 262, 181, 245, 253, 175, 168, 106, 251, 173,
	167, 156, 132, 144, 205, 164, 206, 145, 178, 177,
	179, 0, 0, 0, 237, 260, 279, 116, 0, 244,
	271, 274, 0, 209, 117, 137, 131, 204, 135, 159,
	270, 272, 273, 180, 113, 147, 234, 155, 163, 212,
	277, 194, 218, 120, 259, 235, 390, 401, 396, 397,
	394, 395, 393, 392, 391, 404, 382, 383, 384, 385,
	387, 0, 398, 399, 386, 99, 108, 160, 276, 210,
	134, 261, 0, 0, 127, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 102, 109,
	115, 121, 126, 130, 133, 139, 143, 146, 148, 149,
	150, 153, 166, 169, 170, 171, 172, 182, 183, 184,
	186, 189, 190, 191, 192, 193, 196, 198, 199, 200,
	201, 202, 203, 211, 214, 220, 221, 222, 223, 224,
	225, 226, 229, 230, 231, 232, 238, 241, 247, 248,
	258, 265, 268, 141, 255, 269, 188, 0, 0, 0,
	0, 346, 0, 0, 0, 129, 0, 345, 0, 0,
	0, 158, 0, 0, 0, 228, 122, 165, 389, 161,
	0, 0, 236, 176, 0, 0, 0, 0, 0, 380,
	381, 0, 0, 0, 0, 0, 0, 0, 0, 61,
	0, 0, 96, 97, 98, 367, 965, 369, 370, 371,
	372, 0, 0, 118, 368, 373, 374, 375, 0, 0,
	0, 0, 343, 360, 0, 388, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 357, 358, 430, 0, 0,
	0, 403, 0, 359, 0, 0, 352, 353, 355, 354,
	356, 361, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 138, 402, 0, 0, 297, 0, 0, 400, 0,
	207, 0, 240, 142, 157, 114, 154, 100, 110, 0,
	140, 185, 215, 219, 0, 0, 0, 123, 0, 217,
	195, 257, 0, 197, 216, 162, 246, 208, 256, 266,
	267, 243, 264, 275, 233, 103, 242, 254, 119, 227,
	0, 0, 0, 105, 252, 239, 174, 151, 152, 104,
	0, 213, 128, 136, 125, 187, 249, 250, 124, 278,
	111, 263, 107, 112, 262, 181, 245, 253, 175, 168,
	106, 251, 173, 167, 156, 132, 144, 205, 164, 206,
	145, 178, 177, 179, 0, 0, 0, 237, 260, 279,
	116, 0, 244, 271, 274, 0, 209, 117, 137, 131,
	204, 135, 159, 270, 272, 273, 180, 113, 147, 234,
	155, 163, 212, 277, 194, 218, 120, 259, 235, 390,
	401, 396, 397, 394, 395, 393, 392, 391, 404, 382,
	383, 384, 385, 387, 0, 398, 399, 386, 99, 108,
	160, 276, 210, 134, 261, 0, 0, 127, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 102, 109, 115, 121, 126, 130, 133, 139, 143,
	146, 148, 149, 150, 153, 166, 169, 170, 171, 172,
	182, 183, 184, 186, 189, 190, 191, 192, 193, 196,
	198, 199, 200, 201, 202, 203, 211, 214, 220, 221,
	222, 223, 224, 225, 226, 229, 230, 231, 232, 238,
	241, 247, 248, 258, 265, 268, 141, 255, 269, 411,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 188, 0, 0, 0, 0, 346, 0, 0,
	0, 129, 0, 345, 0, 0, 0, 158, 0, 0,
	0, 228, 122, 165, 389, 161, 0, 0, 236, 176,
	0, 0, 0, 0, 0, 380, 381, 0, 0, 0,
	0, 0, 0, 0, 0, 61, 0, 0, 96, 97,
	98, 367, 366, 369, 370, 371, 372, 0, 0, 118,
	368, 373, 374, 375, 0, 0, 0, 0, 343, 360,
	0, 388, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 357, 358, 0, 0, 0, 0, 403, 0, 359,
	0, 0, 352, 353, 355, 354, 356, 361, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 138, 402, 0,
	0, 297, 0, 0, 400, 0, 207, 0, 240, 142,
	157, 114, 154, 100, 110, 0, 140, 185, 215, 219,
	0, 0, 0, 123, 0, 217, 195, 257, 0, 197,
	216, 162, 246, 208, 256, 266, 267, 243, 264, 275,
	233, 103, 242, 254, 119, 227, 0, 0, 0, 105,
	252, 239, 174, 151, 152, 104, 0, 213, 128, 136,
	125, 187, 249, 250, 124, 278, 111, 263, 107, 112,
	262, 181, 245, 253, 175, 168, 106, 251, 173, 167,
	156, 132, 144, 205, 164, 206, 145, 178, 177, 179,
	0, 0, 0, 237, 260, 279, 116, 0, 244, 271,
	274, 0, 209, 117, 137, 131, 204, 135, 159, 270,
	272, 273, 180, 113, 147, 234, 155, 163, 212, 277,
	194, 218, 120, 259, 235, 390, 401, 396, 397, 394,
	395, 393, 392, 391, 404, 382, 383, 384, 385, 387,
	0, 398, 399, 386, 99, 108, 160, 276, 210, 134,
	261, 0, 0, 127, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 102, 109, 115,
	121, 126, 130, 133, 139, 143, 146, 148, 149, 150,
	153, 166, 169, 170, 171, 172, 182, 183, 184, 186,
	189, 190, 191, 192, 193, 196, 198, 199, 200, 201,
	202, 203, 211, 214, 220, 221, 222, 223, 224, 225,
	226, 229, 230, 231, 232, 238, 241, 247, 248, 258,
	265, 268, 141, 255, 269, 188, 0, 0, 0, 0,
	346, 0, 0, 0, 129, 0, 345, 0, 0, 0,
	158, 0, 0, 0, 228, 122, 165, 389, 161, 0,
	0, 236, 176, 0, 0, 0, 0, 0, 380, 381,
	0, 0, 0, 0, 0, 0, 0, 0, 61, 0,
	0, 96, 97, 98, 367, 366, 369, 370, 371, 372,
	0, 0, 118, 368, 373, 374, 375, 0, 0, 0,
	0, 343, 360, 0, 388, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 357, 358, 0, 0, 0, 0,
	403, 0, 359, 0, 0, 352, 353, 355, 354, 356,
	361, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	138, 402, 0, 0, 297, 0, 0, 400, 0, 207,
	0, 240, 142, 157, 114, 154, 100, 110, 0, 140,
	185, 215, 219, 0, 0, 0, 123, 0, 217, 195,
	257, 0, 197, 216, 162, 246, 208, 256, 266, 267,
	243, 264, 275, 233, 103, 242, 254, 119, 227, 0,
	0, 0, 105, 252, 239, 174, 151, 152, 104, 0,
	213, 128, 136, 125, 187, 249, 250, 124, 278, 111,
	263, 107, 112, 262, 181, 245, 253, 175, 168, 106,
	251, 173, 167, 156, 132, 144, 205, 164, 206, 145,
	178, 177, 179, 0, 0, 0, 237, 260, 279, 116,
	0, 244, 271, 274, 0, 209, 117, 137, 131, 204,
	135, 159, 270, 272, 273, 180, 113, 147, 234, 155,
	163, 212, 277, 194, 218, 120, 259, 235, 390, 401,
	396, 397, 394, 395, 393, 392, 391, 404, 382, 383,
	384, 385, 387, 0, 398, 399, 386, 99, 108, 160,
	276, 210, 134, 261, 0, 0, 127, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	102, 109, 115, 121, 126, 130, 133, 139, 143, 146,
	148, 149, 150, 153, 166, 169, 170, 171, 172, 182,
	183, 184, 186, 189, 190, 191, 192, 193, 196, 198,
	199, 200, 201, 202, 203, 211, 214, 220, 221, 222,
	223, 224, 225, 226, 229, 230, 231, 232, 238, 241,
	247, 248, 258, 265, 268, 141, 255, 269, 188, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 0, 0,
	0, 0, 0, 158, 0, 0, 0, 228, 122, 165,
	389, 161, 0, 0, 236, 176, 0, 0, 0, 0,
	0, 380, 381, 0, 0, 0, 0, 0, 0, 0,
	0, 61, 0, 0, 96, 97, 98, 367, 366, 369,
	370, 371, 372, 0, 0, 118, 368, 373, 374, 375,
	0, 0, 0, 0, 0, 360, 0, 388, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 357, 358, 0,
	0, 0, 0, 403, 0, 359, 0, 0, 352, 353,
	355, 354, 356, 361, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 138, 402, 0, 0, 297, 0, 0,
	400, 0, 207, 0, 240, 142, 157, 114, 154, 100,
	110, 0, 140, 185, 215, 219, 0, 0, 0, 123,
	0, 217, 195, 257, 1653, 197, 216, 162, 246, 208,
	256, 266, 267, 243, 264, 275, 233, 103, 242, 254,
	119, 227, 0, 0, 0, 105, 252, 239, 174, 151,
	152, 104, 0, 213, 128, 136, 125, 187, 249, 250,
	124, 278, 111, 263, 107, 112, 262, 181, 245, 253,
	175, 168, 106, 251, 173, 167, 156, 132, 144, 205,
	164, 206, 145, 178, 177, 179, 0, 0, 0, 237,
	260, 279, 116, 0, 244, 271, 274, 0, 209, 117,
	137, 131, 204, 135, 159, 270, 272, 273, 180, 113,
	147, 234, 155, 163, 212, 277, 194, 218, 120, 259,
	235, 390, 401, 396, 397, 394, 395, 393, 392, 391,
	404, 382, 383, 384, 385, 387, 0, 398, 399, 386,
	99, 108, 160, 276, 210, 134, 261, 0, 0, 127,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 102, 109, 115, 121, 126, 130, 133,
	139, 143, 146, 148, 149, 150, 153, 166, 169, 170,
	171, 172, 182, 183, 184, 186, 189, 190, 191, 192,
	193, 196, 198, 199, 200, 201, 202, 203, 211, 214,
	220, 221, 222, 223, 224, 225, 226, 229, 230, 231,
	232, 238, 241, 247, 248, 258, 265, 268, 141, 255,
	269, 188, 0, 0, 0, 0, 0, 0, 0, 0,
	129, 0, 0, 0, 0, 0, 158, 0, 0, 0,
	228, 122, 165, 389, 161, 0, 0, 236, 176, 0,
	0, 0, 0, 0, 380, 381, 0, 0, 0, 0,
	0, 0, 0, 0, 61, 0, 418, 96, 97, 98,
	367, 366, 369, 370, 371, 372, 0, 0, 118, 368,
	373, 374, 375, 0, 0, 0, 0, 0, 360, 0,
	388, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	357, 358, 0, 0, 0, 0, 403, 0, 359, 0,
	0, 352, 353, 355, 354, 356, 361, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 138, 402, 0, 0,
	297, 0, 0, 400, 0, 207, 0, 240, 142, 157,
	114, 154, 100, 110, 0, 140, 185, 215, 219, 0,
	0, 0, 123, 0, 217, 195, 257, 0, 197, 216,
	162, 246, 208, 256, 266, 267, 243, 264, 275, 233,
	103, 242, 254, 119, 227, 0, 0, 0, 105, 252,
	239, 174, 151, 152, 104, 0, 213, 128, 136, 125,
	187, 249, 250, 124, 278, 111, 263, 107, 112, 262,
	181, 245, 253, 175, 168, 106, 251, 173, 167, 156,
	132, 144, 205, 164, 206, 145, 178, 177, 179, 0,
	0, 0, 237, 260, 279, 116, 0, 244, 271, 274,
	0, 209, 117, 137, 131, 204, 135, 159, 270, 272,
	273, 180, 113, 147, 234, 155, 163, 212, 277, 194,
	218, 120, 259, 235, 390, 401, 396, 397, 394, 395,
	393, 392, 391, 404, 382, 383, 384, 385, 387, 0,
	398, 399, 386, 99, 108, 160, 276, 210, 134, 261,
	0, 0, 127, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 102, 109, 115, 121,
	126, 130, 133, 139, 143, 146, 148, 149, 150, 153,
	166, 169, 170, 171, 172, 182, 183, 184, 186, 189,
	190, 191, 192, 193, 196, 198, 199, 200, 201, 202,
	203, 211, 214, 220, 221, 222, 223, 224, 225, 226,
	229, 230, 231, 232, 238, 241, 247, 248, 258, 265,
	268, 141, 255, 269, 188, 0, 0, 0, 0, 0,
	0, 0, 0, 129, 0, 0, 0, 0, 0, 158,
	0, 0, 0, 228, 122, 165, 389, 161, 0, 0,
	236, 176, 0, 0, 0, 0, 0, 380, 381, 0,
	0, 0, 0, 0, 0, 0, 0, 61, 0, 0,
	96, 97, 98, 367, 366, 369, 370, 371, 372, 0,
	0, 118, 368, 373, 374, 375, 0, 0, 0, 0,
	0, 360, 0, 388, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 357, 358, 0, 0, 0, 0, 403,
	0, 359, 0, 0, 352, 353, 355, 354, 356, 361,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 138,
	402, 0, 0, 297, 0, 0, 400, 0, 207, 0,
	240, 142, 157, 114, 154, 100, 110, 0, 140, 185,
	215, 219, 0, 0, 0, 123, 0, 217, 195, 257,
	0, 197, 216, 162, 246, 208, 256, 266, 267, 243,
	264, 275, 233, 103, 242, 254, 119, 227, 0, 0,
	0, 105, 252, 239, 174, 151, 152, 104, 0, 213,
	128, 136, 125, 187, 249, 250, 124, 278, 111, 263,
	107, 112, 262, 181, 245, 253, 175, 168, 106, 251,
	173, 167, 156, 132, 144, 205, 164, 206, 145, 178,
	177, 179, 0, 0, 0, 237, 260, 279, 116, 0,
	244, 271, 274, 0, 209, 117, 137, 131, 204, 135,
	159, 270, 272, 273, 180, 113, 147, 234, 155, 163,
	212, 277, 194, 218, 120, 259, 235, 390, 401, 396,
	397, 394, 395, 393, 392, 391, 404, 382, 383, 384,
	385, 387, 0, 398, 399, 386, 99, 108, 160, 276,
	210, 134, 261, 0, 0, 127, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 102,
	109, 115, 121, 126, 130, 133, 139, 143, 146, 148,
	149, 150, 153, 166, 169, 170, 171, 172, 182, 183,
	184, 186, 189, 190, 191, 192, 193, 196, 198, 199,
	200, 201, 202, 203, 211, 214, 220, 221, 222, 223,
	224, 225, 226, 229, 230, 231, 232, 238, 241, 247,
	248, 258, 265, 268, 141, 255, 269, 188, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 0, 0, 0,
	0, 0, 158, 0, 0, 0, 228, 122, 165, 0,
	161, 0, 0, 236, 176, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 96, 97, 98, 0, 0, 0, 0,
	0, 0, 0, 0, 118, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 666, 665, 675, 676, 668, 669, 670, 671,
	672, 673, 674, 667, 0, 0, 677, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 138, 0, 0, 0, 297, 0, 0, 0,
	0, 207, 0, 240, 142, 157, 114, 154, 100, 110,
	0, 140, 185, 215, 219, 0, 0, 0, 123, 0,
	217, 195, 257, 0, 197, 216, 162, 246, 208, 256,
	266, 267, 243, 264, 275, 233, 103, 242, 254, 119,
	227, 0, 0, 0, 105, 252, 239, 174, 151, 152,
	104, 0, 213, 128, 136, 125, 187, 249, 250, 124,
	278, 111, 263, 107, 112, 262, 181, 245, 253, 175,
	168, 106, 251, 173, 167, 156, 132, 144, 205, 164,
	206, 145, 178, 177, 179, 0, 0, 0, 237, 260,
	279, 116, 0, 244, 271, 274, 0, 209, 117, 137,
	131, 204, 135, 159, 270, 272, 273, 180, 113, 147,
	234, 155, 163, 212, 277, 194, 218, 120, 259, 235,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	108, 160, 276, 210, 134, 261, 0, 0, 127, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 102, 109, 115, 121, 126, 130, 133, 139,
	143, 146, 148, 149, 150, 153, 166, 169, 170, 171,
	172, 182, 183, 184, 186, 189, 190, 191, 192, 193,
	196, 198, 199, 200, 201, 202, 203, 211, 214, 220,
	221, 222, 223, 224, 225, 226, 229, 230, 231, 232,
	238, 241, 247, 248, 258, 265, 268, 141, 255, 269,
	188, 0, 0, 0, 762, 0, 0, 0, 0, 129,
	0, 0, 0, 0, 0, 158, 0, 0, 0, 228,
	122, 165, 0, 161, 0, 0, 236, 176, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 96, 97, 98, 0,
	764, 0, 0, 0, 0, 0, 0, 118, 0, 0,
	0, 0, 0, 655, 656, 654, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 657, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 138, 0, 0, 0, 297,
	0, 0, 0, 0, 207, 0, 240, 142, 157, 114,
	154, 100, 110, 0, 140, 185, 215, 219, 0, 0,
	0, 123, 0, 217, 195, 257, 0, 197, 216, 162,
	246, 208, 256, 266, 267, 243, 264, 275, 233, 103,
	242, 254, 119, 227, 0, 0, 0, 105, 252, 239,
	174, 151, 152, 104, 0, 213, 128, 136, 125, 187,
	249, 250, 124, 278, 111, 263, 107, 112, 262, 181,
	245, 253, 175, 168, 106, 251, 173, 167, 156, 132,
	144, 205, 164, 206, 145, 178, 177, 179, 0, 0,
	0, 237, 260, 279, 116, 0, 244, 271, 274, 0,
	209, 117, 137, 131, 204, 135, 159, 270, 272, 273,
	180, 113, 147, 234, 155, 163, 212, 277, 194, 218,
	120, 259, 235, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 108, 160, 276, 210, 134, 261, 0,
	0, 127, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 102, 109, 115, 121, 126,
	130, 133, 139, 143, 146, 148, 149, 150, 153, 166,
	169, 170, 171, 172, 182, 183, 184, 186, 189, 190,
	191, 192, 193, 196, 198, 199, 200, 201, 202, 203,
	211, 214, 220, 221, 222, 223, 224, 225, 226, 229,
	230, 231, 232, 238, 241, 247, 248, 258, 265, 268,
	141, 255, 269, 188, 0, 0, 0, 0, 0, 0,
	0, 0, 129, 0, 0, 0, 0, 0, 158, 0,
	0, 0, 228, 122, 165, 0, 161, 0, 0, 236,
	176, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	97, 98, 0, 0, 0, 0, 0, 0, 0, 0,
	118, 0, 0, 0, 0, 0, 88, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 138, 90,
	91, 0, 87, 0, 0, 0, 92, 207, 0, 240,
	142, 157, 114, 154, 100, 110, 0, 140, 185, 215,
	219, 0, 0, 0, 123, 0, 217, 195, 257, 0,
	197, 216, 162, 246, 208, 256, 266, 267, 243, 264,
	275, 233, 103, 242, 254, 119, 227, 0, 0, 0,
	105, 252, 239, 174, 151, 152, 104, 0, 213, 128,
	136, 125, 187, 249, 250, 124, 278, 111, 263, 107,
	112, 262, 181, 245, 253, 175, 168, 106, 251, 173,
	167, 156, 132, 144, 205, 164, 206, 145, 178, 177,
	179, 0, 0, 0, 237, 260, 279, 116, 0, 244,
	271, 274, 0, 209, 117, 137, 131, 204, 135, 159,
	270, 272, 273, 180, 113, 147, 234, 155, 163, 212,
	277, 194, 218, 120, 259, 235, 0, 89, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 108, 160, 276, 210,
	134, 261, 0, 0, 127, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 102, 109,
	115, 121, 126, 130, 133, 139, 143, 146, 148, 149,
	150, 153, 166, 169, 170, 171, 172, 182, 183, 184,
	186, 189, 190, 191, 192, 193, 196, 198, 199, 200,
	201, 202, 203, 211, 214, 220, 221, 222, 223, 224,
	225, 226, 229, 230, 231, 232, 238, 241, 247, 248,
	258, 265, 268, 141, 255, 269, 188, 0, 0, 0,
	0, 0, 0, 0, 0, 129, 1082, 0, 0, 0,
	0, 158, 0, 0, 0, 228, 122, 165, 0, 161,
	0, 0, 236, 176, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 97, 98, 0, 0, 0, 0, 0,
	0, 0, 0, 118, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 138, 0, 0, 1081, 297, 0, 0, 0, 1077,
	1075, 0, 1076, 142, 157, 1080, 154, 100, 110, 1073,
	1079, 185, 215, 219, 0, 0, 0, 123, 0, 217,
	195, 257, 0, 197, 216, 162, 246, 208, 256, 266,
	267, 243, 264, 275, 233, 103, 242, 254, 119, 227,
	0, 0, 0, 105, 252, 239, 174, 151, 152, 104,
	0, 213, 128, 136, 125, 187, 249, 250, 124, 278,
	111, 263, 107, 112, 262, 181, 245, 253, 175, 168,
	106, 251, 173, 167, 156, 132, 144, 205, 164, 206,
	145, 178, 177, 179, 0, 0, 0, 237, 260, 279,
	116, 0, 244, 271, 274, 0, 209, 117, 137, 131,
	204, 135, 159, 270, 272, 273, 180, 113, 147, 234,
	155, 163, 212, 277, 194, 218, 120, 259, 235, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 108,
	160, 276, 210, 134, 261, 0, 0, 127, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 102, 109, 115, 121, 126, 130, 133, 139, 143,
	146, 148, 149, 150, 153, 166, 169, 170, 171, 172,
	182, 183, 184, 186, 189, 190, 191, 192, 193, 196,
	198, 199, 200, 201, 202, 203, 211, 214, 220, 221,
	222, 223, 224, 225, 226, 229, 230, 231, 232, 238,
	241, 247, 248, 258, 265, 268, 141, 255, 269, 188,
	0, 0, 0, 1040, 0, 0, 0, 0, 129, 0,
	0, 0, 0, 0, 158, 0, 0, 0, 228, 122,
	165, 0, 161, 0, 0, 236, 176, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 97, 98, 0, 1042,
	0, 0, 0, 0, 0, 0, 118, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 138, 0, 0, 0, 297, 0,
	0, 0, 0, 207, 0, 240, 142, 157, 114, 154,
	100, 110, 0, 140, 185, 215, 219, 0, 0, 0,
	123, 0, 217, 195, 257, 0, 197, 216, 162, 246,
	208, 256, 266, 267, 243, 264, 275, 233, 103, 242,
	254, 119, 227, 0, 0, 0, 105, 252, 239, 174,
	151, 152, 104, 0, 213, 128, 136, 125, 187, 249,
	250, 124, 278, 111, 263, 107, 112, 262, 181, 245,
	253, 175, 168, 106, 251, 173, 167, 156, 132, 144,
	205, 164, 206, 145, 178, 177, 179, 0, 0, 0,
	237, 260, 279, 116, 0, 244, 271, 274, 0, 209,
	117, 137, 131, 204, 135, 159, 270, 272, 273, 180,
	113, 147, 234, 155, 163, 212, 277, 194, 218, 120,
	259, 235, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 99, 108, 160, 276, 210, 134, 261, 0, 0,
	127, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 102, 109, 115, 121, 126, 130,
	133, 139, 143, 146, 148, 149, 150, 153, 166, 169,
	170, 171, 172, 182, 183, 184, 186, 189, 190, 191,
	192, 193, 196, 198, 199, 200, 201, 202, 203, 211,
	214, 220, 221, 222, 223, 224, 225, 226, 229, 230,
	231, 232, 238, 241, 247, 248, 258, 265, 268, 141,
	255, 269, 31, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 188, 0, 0, 0, 0,
	0, 0, 0, 0, 129, 0, 0, 0, 0, 0,
	158, 0, 0, 0, 228, 122, 165, 0, 161, 0,
	0, 236, 176, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 61, 0,
	0, 96, 97, 98, 0, 0, 0, 0, 0, 0,
	0, 0, 118, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	138, 0, 0, 0, 297, 0, 0, 0, 0, 207,
	0, 240, 142, 157, 114, 154, 100, 110, 0, 140,
	185, 215, 219, 0, 0, 0, 123, 0, 217, 195,
	257, 0, 197, 216, 162, 246, 208, 256, 266, 267,
	243, 264, 275, 233, 103, 242, 254, 119, 227, 0,
	0, 0, 105, 252, 239, 174, 151, 152, 104, 0,
	213, 128, 136, 125, 187, 249, 250, 124, 278, 111,
	263, 107, 112, 262, 181, 245, 253, 175, 168, 106,
	251, 173, 167, 156, 132, 144, 205, 164, 206, 145,
	178, 177, 179, 0, 0, 0, 237, 260, 279, 116,
	0, 244, 271, 274, 0, 209, 117, 137, 131, 204,
	135, 159, 270, 272, 273, 180, 113, 147, 234, 155,
	163, 212, 277, 194, 218, 120, 259, 235, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 108, 160,
	276, 210, 134, 261, 0, 0, 127, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	102, 109, 115, 121, 126, 130, 133, 139, 143, 146,
	148, 149, 150, 153, 166, 169, 170, 171, 172, 182,
	183, 184, 186, 189, 190, 191, 192, 193, 196, 198,
	199, 200, 201, 202, 203, 211, 214, 220, 221, 222,
	223, 224, 225, 226, 229, 230, 231, 232, 238, 241,
	247, 248, 258, 265, 268, 141, 255, 269, 188, 0,
	0, 0, 1040, 0, 0, 0, 0, 129, 0, 0,
	0, 0, 0, 158, 0, 0, 0, 228, 122, 165,
	0, 161, 0, 0, 236, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 97, 98, 0, 1042, 0,
	0, 0, 0, 0, 0, 118, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 138, 0, 0, 0, 297, 0, 0,
	0, 0, 207, 0, 240, 142, 157, 114, 154, 100,
	110, 0, 140, 185, 215, 219, 0, 0, 0, 123,
	0, 217, 195, 257, 0, 1038, 216, 162, 246, 208,
	256, 266, 267, 243, 264, 275, 233, 103, 242, 254,
	119, 227, 0, 0, 0, 105, 252, 239, 174, 151,
	152, 104, 0, 213, 128, 136, 125, 187, 249, 250,
	124, 278, 111, 263, 107, 112, 262, 181, 245, 253,
	175, 168, 106, 251, 173, 167, 156, 132, 144, 205,
	164, 206, 145, 178, 177, 179, 0, 0, 0, 237,
	260, 279, 116, 0, 244, 271, 274, 0, 209, 117,
	137, 131, 204, 135, 159, 270, 272, 273, 180, 113,
	147, 234, 155, 163, 212, 277, 194, 218, 120, 259,
	235, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 108, 160, 276, 210, 134, 261, 0, 0, 127,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 102, 109, 115, 121, 126, 130, 133,
	139, 143, 146, 148, 149, 150, 153, 166, 169, 170,
	171, 172, 182, 183, 184, 186, 189, 190, 191, 192,
	193, 196, 198, 199, 200, 201, 202, 203, 211, 214,
	220, 221, 222, 223, 224, 225, 226, 229, 230, 231,
	232, 238, 241, 247, 248, 258, 265, 268, 141, 255,
	269, 188, 0, 0, 0, 0, 0, 0, 0, 0,
	129, 0, 0, 0, 0, 0, 158, 0, 0, 0,
	228, 122, 165, 0, 161, 0, 0, 236, 176, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 97, 98,
	0, 0, 1005, 0, 0, 1006, 0, 0, 118, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 138, 0, 0, 0,
	297, 0, 0, 0, 0, 207, 0, 240, 142, 157,
	114, 154, 100, 110, 0, 140, 185, 215, 219, 0,
	0, 0, 123, 0, 217, 195, 257, 0, 197, 216,
	162, 246, 208, 256, 266, 267, 243, 264, 275, 233,
	103, 242, 254, 119, 227, 0, 0, 0, 105, 252,
	239, 174, 151, 152, 104, 0, 213, 128, 136, 125,
	187, 249, 250, 124, 278, 111, 263, 107, 112, 262,
	181, 245, 253, 175, 168, 106, 251, 173, 167, 156,
	132, 144, 205, 164, 206, 145, 178, 177, 179, 0,
	0, 0, 237, 260, 279, 116, 0, 244, 271, 274,
	0, 209, 117, 137, 131, 204, 135, 159, 270, 272,
	273, 180, 113, 147, 234, 155, 163, 212, 277, 194,
	218, 120, 259, 235, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 108, 160, 276, 210, 134, 261,
	0, 0, 127, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 102, 109, 115, 121,
	126, 130, 133, 139, 143, 146, 148, 149, 150, 153,
	166, 169, 170, 171, 172, 182, 183, 184, 186, 189,
	190, 191, 192, 193, 196, 198, 199, 200, 201, 202,
	203, 211, 214, 220, 221, 222, 223, 224, 225, 226,
	229, 230, 231, 232, 238, 241, 247, 248, 258, 265,
	268, 141, 255, 269, 188, 0, 0, 0, 0, 0,
	0, 0, 0, 129, 0, 796, 0, 0, 0, 158,
	0, 0, 0, 228, 122, 165, 0, 161, 0, 0,
	236, 176, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 97, 98, 0, 795, 0, 0, 0, 0, 0,
	0, 118, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 138,
	0, 0, 0, 297, 0, 0, 0, 0, 207, 0,
	240, 142, 157, 114, 154, 100, 110, 0, 140, 185,
	215, 219, 0, 0, 0, 123, 0, 217, 195, 257,
	0, 197, 216, 162, 246, 208, 256, 266, 267, 243,
	264, 275, 233, 103, 242, 254, 119, 227, 0, 0,
	0, 105, 252, 239, 174, 151, 152, 104, 0, 213,
	128, 136, 125, 187, 249, 250, 124, 278, 111, 263,
	107, 112, 262, 181, 245, 253, 175, 168, 106, 251,
	173, 167, 156, 132, 144, 205, 164, 206, 145, 178,
	177, 179, 0, 0, 0, 237, 260, 279, 116, 0,
	244, 271, 274, 0, 209, 117, 137, 131, 204, 135,
	159, 270, 272, 273, 180, 113, 147, 234, 155, 163,
	212, 277, 194, 218, 120, 259, 235, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 108, 160, 276,
	210, 134, 261, 0, 0, 127, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 102,
	109, 115, 121, 126, 130, 133, 139, 143, 146, 148,
	149, 150, 153, 166, 169, 170, 171, 172, 182, 183,
	184, 186, 189, 190, 191, 192, 193, 196, 198, 199,
	200, 201, 202, 203, 211, 214, 220, 221, 222, 223,
	224, 225, 226, 229, 230, 231, 232, 238, 241, 247,
	248, 258, 265, 268, 141, 255, 269, 188, 0, 0,
	0, 0, 0, 0, 0, 0, 129, 0, 0, 0,
	0, 0, 158, 0, 0, 0, 228, 122, 165, 0,
	161, 0, 0, 236, 176, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 418, 96, 97, 98, 0, 0, 0, 0,
	0, 0, 0, 0, 118, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 138, 0, 0, 0, 297, 0, 0, 0,
	0, 207, 0, 240, 142, 157, 114, 154, 100, 110,
	0, 140, 185, 215, 219, 0, 0, 0, 123, 0,
	217, 195, 257, 0, 197, 216, 162, 246, 208, 256,
	266, 267, 243, 264, 275, 233, 103, 242, 254, 119,
	227, 0, 0, 0, 105, 252, 239, 174, 151, 152,
	104, 0, 213, 128, 136, 125, 187, 249, 250, 124,
	278, 111, 263, 107, 112, 262, 181, 245, 253, 175,
	168, 106, 251, 173, 167, 156, 132, 144, 205, 164,
	206, 145, 178, 177, 179, 0, 0, 0, 237, 260,
	279, 116, 0, 244, 271, 274, 0, 209, 117, 137,
	131, 204, 135, 159, 270, 272, 273, 180, 113, 147,
	234, 155, 163, 212, 277, 194, 218, 120, 259, 235,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 99,
	108, 160, 276, 210, 134, 261, 0, 0, 127, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 101, 102, 109, 115, 121, 126, 130, 133, 139,
	143, 146, 148, 149, 150, 153, 166, 169, 170, 171,
	172, 182, 183, 184, 186, 189, 190, 191, 192, 193,
	196, 198, 199, 200, 201, 202, 203, 211, 214, 220,
	221, 222, 223, 224, 225, 226, 229, 230, 231, 232,
	238, 241, 247, 248, 258, 265, 268, 141, 255, 269,
	188, 0, 0, 0, 0, 0, 0, 0, 0, 129,
	0, 0, 0, 0, 0, 158, 0, 0, 0, 228,
	122, 165, 0, 161, 0, 0, 236, 176, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 61, 0, 0, 96, 97, 98, 0,
	0, 0, 0, 0, 0, 0, 0, 118, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 138, 0, 0, 0, 297,
	0, 0, 0, 0, 207, 0, 240, 142, 157, 114,
	154, 100, 110, 0, 140, 185, 215, 219, 0, 0,
	0, 123, 0, 217, 195, 257, 0, 197, 216, 162,
	246, 208, 256, 266, 267, 243, 264, 275, 233, 103,
	242, 254, 119, 227, 0, 0, 0, 105, 252, 239,
	174, 151, 152, 104, 0, 213, 128, 136, 125, 187,
	249, 250, 124, 278, 111, 263, 107, 112, 262, 181,
	245, 253, 175, 168, 106, 251, 173, 167, 156, 132,
	144, 205, 164, 206, 145, 178, 177, 179, 0, 0,
	0, 237, 260, 279, 116, 0, 244, 271, 274, 0,
	209, 117, 137, 131, 204, 135, 159, 270, 272, 273,
	180, 113, 147, 234, 155, 163, 212, 277, 194, 218,
	120, 259, 235, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 99, 108, 160, 276, 210, 134, 261, 0,
	0, 127, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 101, 102, 109, 115, 121, 126,
	130, 133, 139, 143, 146, 148, 149, 150, 153, 166,
	169, 170, 171, 172, 182, 183, 184, 186, 189, 190,
	191, 192, 193, 196, 198, 199, 200, 201, 202, 203,
	211, 214, 220, 221, 222, 223, 224, 225, 226, 229,
	230, 231, 232, 238, 241, 247, 248, 258, 265, 268,
	141, 255, 269, 188, 0, 0, 0, 0, 0, 0,
	0, 0, 129, 0, 0, 0, 0, 0, 158, 0,
	0, 0, 228, 122, 165, 0, 161, 0, 0, 236,
	176, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 96,
	97, 98, 0, 1042, 0, 0, 0, 0, 0, 0,
	118, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 138, 0,
	0, 0, 297, 0, 0, 0, 0, 207, 0, 240,
	142, 157, 114, 154, 100, 110, 0, 140, 185, 215,
	219, 0, 0, 0, 123, 0, 217, 195, 257, 0,
	197, 216, 162, 246, 208, 256, 266, 267, 243, 264,
	275, 233, 103, 242, 254, 119, 227, 0, 0, 0,
	105, 252, 239, 174, 151, 152, 104, 0, 213, 128,
	136, 125, 187, 249, 250, 124, 278, 111, 263, 107,
	112, 262, 181, 245, 253, 175, 168, 106, 251, 173,
	167, 156, 132, 144, 205, 164, 206, 145, 178, 177,
	179, 0, 0, 0, 237, 260, 279, 116, 0, 244,
	271, 274, 0, 209, 117, 137, 131, 204, 135, 159,
	270, 272, 273, 180, 113, 147, 234, 155, 163, 212,
	277, 194, 218, 120, 259, 235, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 99, 108, 160, 276, 210,
	134, 261, 0, 0, 127, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 101, 102, 109,
	115, 121, 126, 130, 133, 139, 143, 146, 148, 149,
	150, 153, 166, 169, 170, 171, 172, 182, 183, 184,
	186, 189, 190, 191, 192, 193, 196, 198, 199, 200,
	201, 202, 203, 211, 214, 220, 221, 222, 223, 224,
	225, 226, 229, 230, 231, 232, 238, 241, 247, 248,
	258, 265, 268, 141, 255, 269, 188, 0, 0, 0,
	0, 0, 0, 0, 0, 129, 0, 0, 0, 0,
	0, 158, 0, 0, 0, 228, 122, 165, 0, 161,
	0, 0, 236, 176, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 97, 98, 0, 764, 0, 0, 0,
	0, 0, 0, 118, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 138, 0, 0, 0, 297, 0, 0, 0, 0,
	207, 0, 240, 142, 157, 114, 154, 100, 110, 0,
	140, 185, 215, 219, 0, 0, 0, 123, 0, 217,
	195, 257, 0, 197, 216, 162, 246, 208, 256, 266,
	267, 243, 264, 275, 233, 103, 242, 254, 119, 227,
	0, 0, 0, 105, 252, 239, 174, 151, 152, 104,
	0, 213, 128, 136, 125, 187, 249, 250, 124, 278,
	111, 263, 107, 112, 262, 181, 245, 253, 175, 168,
	106, 251, 173, 167, 156, 132, 144, 205, 164, 206,
	145, 178, 177, 179, 0, 0, 0, 237, 260, 279,
	116, 0, 244, 271, 274, 0, 209, 117, 137, 131,
	204, 135, 159, 270, 272, 273, 180, 113, 147, 234,
	155, 163, 212, 277, 194, 218, 120, 259, 235, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 108,
	160, 276, 210, 134, 261, 0, 0, 127, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 102, 109, 115, 121, 126, 130, 133, 139, 143,
	146, 148, 149, 150, 153, 166, 169, 170, 171, 172,
	182, 183, 184, 186, 189, 190, 191, 192, 193, 196,
	198, 199, 200, 201, 202, 203, 211, 214, 220, 221,
	222, 223, 224, 225, 226, 229, 230, 231, 232, 238,
	241, 247, 248, 258, 265, 268, 141, 255, 269, 778,
	0, 0, 0, 0, 0, 0, 188, 0, 0, 0,
	0, 0, 0, 0, 0, 129, 0, 0, 0, 0,
	0, 158, 0, 0, 0, 228, 122, 165, 0, 161,
	0, 0, 236, 176, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 96, 97, 98, 0, 0, 0, 0, 0,
	0, 0, 0, 118, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 138, 0, 0, 0, 297, 0, 0, 0, 0,
	207, 0, 240, 142, 157, 114, 154, 100, 110, 0,
	140, 185, 215, 219, 0, 0, 0, 123, 0, 217,
	195, 257, 0, 197, 216, 162, 246, 208, 256, 266,
	267, 243, 264, 275, 233, 103, 242, 254, 119, 227,
	0, 0, 0, 105, 252, 239, 174, 151, 152, 104,
	0, 213, 128, 136, 125, 187, 249, 250, 124, 278,
	111, 263, 107, 112, 262, 181, 245, 253, 175, 168,
	106, 251, 173, 167, 156, 132, 144, 205, 164, 206,
	145, 178, 177, 179, 0, 0, 0, 237, 260, 279,
	116, 0, 244, 271, 274, 0, 209, 117, 137, 131,
	204, 135, 159, 270, 272, 273, 180, 113, 147, 234,
	155, 163, 212, 277, 194, 218, 120, 259, 235, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 99, 108,
	160, 276, 210, 134, 261, 0, 0, 127, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	101, 102, 109, 115, 121, 126, 130, 133, 139, 143,
	146, 148, 149, 150, 153, 166, 169, 170, 171, 172,
	182, 183, 184, 186, 189, 190, 191, 192, 193, 196,
	198, 199, 200, 201, 202, 203, 211, 214, 220, 221,
	222, 223, 224, 225, 226, 229, 230, 231, 232, 238,
	241, 247, 248, 258, 265, 268, 141, 255, 269, 188,
	0, 0, 0, 0, 0, 0, 0, 768, 129, 0,
	0, 0, 0, 0, 158, 0, 0, 0, 228, 122,
	165, 0, 161, 0, 0, 236, 176, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 96, 97, 98, 0, 0,
	0, 0, 0, 0, 0, 0, 118, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 138, 0, 0, 0, 297, 0,
	0, 0, 0, 207, 0, 240, 142, 157, 114, 154,
	100, 110, 0, 140, 185, 215, 219, 0, 0, 0,
	123, 0, 217, 195, 257, 0, 197, 216, 162, 246,
	208, 256, 266, 267, 243, 264, 275, 233, 103, 242,
	254, 119, 227, 0, 0, 0, 105, 252, 239, 174,
	151, 152, 104, 0, 213, 128, 136, 125, 187, 249,
	250, 124, 278, 111, 263, 107, 112, 262, 181, 245,
	253, 175, 168, 106, 251, 173, 167, 156, 132, 144,
	205, 164, 206, 145, 178, 177, 179, 0, 0, 0,
	237, 260, 279, 116, 0, 244, 271, 274, 0, 209,
	117, 137, 131, 204, 135, 159, 270, 272, 273, 180,
	113, 147, 234, 155, 163, 212, 277, 194, 218, 120,
	259, 235, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 99, 108, 160, 276, 210, 134, 261, 0, 0,
	127, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 101, 102, 109, 115, 121, 126, 130,
	133, 139, 143, 146, 148, 149, 150, 153, 166, 169,
	170, 171, 172, 182, 183, 184, 186, 189, 190, 191,
	192, 193, 196, 198, 199, 200, 201, 202, 203, 211,
	214, 220, 221, 222, 223, 224, 225, 226, 229, 230,
	231, 232, 238, 241, 247, 248, 258, 265, 268, 141,
	255, 269, 188, 0, 0, 0, 0, 0, 0, 0,
	0, 129, 0, 0, 0, 0, 0, 158, 0, 0,
	0, 228, 122, 165, 0, 161, 0, 0, 236, 176,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 96, 97,
	98, 0, 644, 0, 0, 0, 0, 0, 0, 118,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 138, 0, 0,
	0, 297, 0, 0, 0, 0, 207, 0, 240, 142,
	157, 114, 154, 100, 110, 0, 140, 185, 215, 219,
	0, 0, 0, 123, 0, 217, 195, 257, 0, 197,
	216, 162, 246, 208, 256, 266, 267, 243, 264, 275,
	233, 103, 242, 254, 119, 227, 0, 0, 0, 105,
	252, 239, 174, 151, 152, 104, 0, 213, 128, 136,
	125, 187, 249, 250, 124, 278, 111, 263, 107, 112,
	262, 181, 245, 253, 175, 168, 106, 251, 173, 167,
	156, 132, 144, 205, 164, 206, 145, 178, 177, 179,
	0, 0, 0, 237, 260, 279, 116, 0, 244, 271,
	274, 0, 209, 117, 137, 131, 204, 135, 159, 270,
	272, 273, 180, 113, 147, 234, 155, 163, 212, 277,
	194, 218, 120, 259, 235, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 99, 108, 160, 276, 210, 134,
	261, 0, 0, 127, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 101, 102, 109, 115,
	121, 126, 130, 133, 139, 143, 146, 148, 149, 150,
	153, 166, 169, 170, 171, 172, 182, 183, 184, 186,
	189, 190, 191, 192, 193, 196, 198, 199, 200, 201,
	202, 203, 211, 214, 220, 221, 222, 223, 224, 225,
	226, 229, 230, 231, 232, 238, 241, 247, 248, 258,
	265, 268, 141, 255, 269, 188, 0, 0, 0, 0,
	0, 0, 0, 0, 129, 0, 0, 0, 0, 0,
	158, 0, 0, 0, 228, 122, 165, 0, 161, 0,
	0, 236, 176, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 96, 97, 98, 0, 0, 0, 0, 0, 0,
	0, 0, 118, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 572, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	138, 0, 0, 0, 297, 0, 0, 0, 0, 207,
	0, 240, 142, 157, 114, 154, 100, 110, 0, 140,
	185, 215, 219, 0, 0, 0, 123, 0, 217, 195,
	257, 0, 197, 216, 162, 246, 208, 256, 266, 267,
	243, 264, 275, 233, 103, 242, 254, 119, 227, 0,
	0, 0, 105, 252, 239, 174, 151, 152, 104, 0,
	213, 128, 136, 125, 187, 249, 250, 124, 278, 111,
	263, 107, 112, 262, 181, 245, 253, 175, 168, 106,
	251, 173, 167, 156, 132, 144, 205, 164, 206, 145,
	178, 177, 179, 0, 0, 0, 237, 260, 279, 116,
	0, 244, 271, 274, 0, 209, 117, 137, 131, 204,
	135, 159, 270, 272, 273, 180, 113, 147, 234, 155,
	163, 212, 277, 194, 218, 120, 259, 235, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 99, 108, 160,
	276, 210, 134, 261, 0, 0, 127, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 101,
	102, 109, 115, 121, 126, 130, 133, 139, 143, 146,
	148, 149, 150, 153, 166, 169, 170, 171, 172, 182,
	183, 184, 186, 189, 190, 191, 192, 193, 196, 198,
	199, 200, 201, 202, 203, 211, 214, 220, 221, 222,
	223, 224, 225, 226, 229, 230, 231, 232, 238, 241,
	247, 248, 258, 265, 268, 141, 255, 269, 188, 0,
	0, 0, 0, 0, 0, 0, 0, 129, 0, 0,
	0, 0, 0, 158, 0, 0, 0, 228, 122, 165,
	0, 161, 0, 0, 236, 176, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 96, 97, 98, 0, 0, 0,
	0, 0, 0, 0, 0, 118, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 334, 0, 138, 0, 0, 0, 297, 0, 0,
	0, 0, 207, 0, 240, 142, 157, 114, 154, 100,
	110, 0, 140, 185, 215, 219, 0, 0, 0, 123,
	0, 217, 195, 257, 0, 197, 216, 162, 246, 208,
	256, 266, 267, 243, 264, 275, 233, 103, 242, 254,
	119, 227, 0, 0, 0, 105, 252, 239, 174, 151,
	152, 104, 0, 213, 128, 136, 125, 187, 249, 250,
	124, 278, 111, 263, 107, 112, 262, 181, 245, 253,
	175, 168, 106, 251, 173, 167, 156, 132, 144, 205,
	164, 206, 145, 178, 177, 179, 0, 0, 0, 237,
	260, 279, 116, 0, 244, 271, 274, 0, 209, 117,
	137, 131, 204, 135, 159, 270, 272, 273, 180, 113,
	147, 234, 155, 163, 212, 277, 194, 218, 120, 259,
	235, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	99, 108, 160, 276, 210, 134, 261, 0, 0, 127,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 101, 102, 109, 115, 121, 126, 130, 133,
	139, 143, 146, 148, 149, 150, 153, 166, 169, 170,
	171, 172, 182, 183, 184, 186, 189, 190, 191, 192,
	193, 196, 198, 199, 200, 201, 202, 203, 211, 214,
	220, 221, 222, 223, 224, 225, 226, 229, 230, 231,
	232, 238, 241, 247, 248, 258, 265, 268, 333, 255,
	269, 188, 0, 0, 0, 0, 0, 0, 0, 0,
	129, 0, 0, 0, 0, 0, 158, 0, 0, 0,
	228, 122, 165, 0, 161, 0, 0, 236, 176, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 96, 97, 98,
	0, 0, 0, 0, 0, 0, 0, 0, 118, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 138, 0, 292, 0,
	297, 0, 0, 0, 0, 207, 0, 240, 142, 157,
	114, 154, 100, 110, 0, 140, 185, 215, 219, 0,
	0, 0, 123, 0, 217, 195, 257, 0, 197, 216,
	162, 246, 208, 256, 266, 267, 243, 264, 275, 233,
	103, 242, 254, 119, 227, 0, 0, 0, 105, 252,
	239, 174, 151, 152, 104, 0, 213, 128, 136, 125,
	187, 249, 250, 124, 278, 111, 263, 107, 112, 262,
	181, 245, 253, 175, 168, 106, 251, 173, 167, 156,
	132, 144, 205, 164, 206, 145, 178, 177, 179, 0,
	0, 0, 237, 260, 279, 116, 0, 244, 271, 274,
	0, 209, 117, 137, 131, 204, 135, 159, 270, 272,
	273, 180, 113, 147, 234, 155, 163, 212, 277, 194,
	218, 120, 259, 235, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 99, 108, 160, 276, 210, 134, 261,
	0, 0, 127, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 101, 102, 109, 115, 121,
	126, 130, 133, 139, 143, 146, 148, 149, 150, 153,
	166, 169, 170, 171, 172, 182, 183, 184, 186, 189,
	190, 191, 192, 193, 196, 198, 199, 200, 201, 202,
	203, 211, 214, 220, 221, 222, 223, 224, 225, 226,
	229, 230, 231, 232, 238, 241, 247, 248, 258, 265,
	268, 141, 255, 269, 188, 0, 0, 0, 0, 0,
	0, 0, 0, 129, 0, 0, 0, 0, 0, 158,
	0, 0, 0, 228, 122, 165, 0, 161, 0, 0,
	236, 176, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	96, 97, 98, 0, 0, 0, 0, 0, 0, 0,
	0, 118, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 138,
	0, 0, 0, 297, 0, 0, 0, 0, 207, 0,
	240, 142, 157, 114, 154, 100, 110, 0, 140, 185,
	215, 219, 0, 0, 0, 123, 0, 217, 195, 257,
	0, 197, 216, 162, 246, 208, 256, 266, 267, 243,
	264, 275, 233, 103, 242, 254, 119, 227, 0, 0,
	0, 105, 252, 239, 174, 151, 152, 104, 0, 213,
	128, 136, 125, 187, 249, 250, 124, 278, 111, 263,
	107, 112, 262, 181, 245, 253, 175, 168, 106, 251,
	173, 167, 156, 132, 144, 205, 164, 206, 145, 178,
	177, 179, 0, 0, 0, 237, 260, 279, 116, 0,
	244, 271, 274, 0, 209, 117, 137, 131, 204, 135,
	159, 270, 272, 273, 180, 113, 147, 234, 155, 163,
	212, 277, 194, 218, 120, 259, 235, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 99, 108, 160, 276,
	210, 134, 261, 0, 0, 127, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 101, 102,
	109, 115, 121, 126, 130, 133, 139, 143, 146, 148,
	149, 150, 153, 166, 169, 170, 171, 172, 182, 183,
	184, 186, 189, 190, 191, 192, 193, 196, 198, 199,
	200, 201, 202, 203, 211, 214, 220, 221, 222, 223,
	224, 225, 226, 229, 230, 231, 232, 238, 241, 247,
	248, 258, 265, 268, 141, 255, 269,
}

var yyPact = [...]int{
	214, -1000, -289, 1144, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1045,
	818, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 312, 12344,
	2, 138, 41, 18012, 137, 1532, 18365, -1000, 18, -1000,
	6, 18365, 13, 17659, -1000, -1000, -66, -67, -1000, 10226,
	948, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 817,
	1032, 1027, 1042, 592, 1209, -1000, 8801, 8801, 103, 103,
	103, 7389, -1000, -1000, 17306, 18365, 129, 18365, -137, 89,
	89, 89, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	135, 18365, 639, 639, 232, 527, 18365, 85, 639, 85,
	85, 85, 18365, -1000, 186, -1000, -1000, -1000, 18365, 639,
	981, 316, 143, 246, 246, 246, -1000, 184, -1000, 4820,
	27, 25, -55, 1058, 22, -6, -1000, 316, 4820, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 114, -1000, -1000,
	18365, 16953, 145, 301, -1000, -1000, -1000, -1000, -1000, -1000,
	640, 325, -1000, 10226, 1646, 675, 675, -1000, -1000, 164,
	-1000, -1000, 11285, 11285, 11285, 11285, 11285, 11285, 11285, 11285,
	11285, 11285, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 675, 183, -1000, 9873,
	675, 675, 675, 675, 675, 675, 675, 675, 10226, 675,
	675, 675, 675, 675, 675, 675, 675, 675, 675, 675,
	675, 675, 675, 675, 675, -1000, -1000, 1095, 1045, -1000,
	818, -1000, -1000, -1000, 998, 10226, 10226, 1045, -1000, 939,
	8801, -1000, -1000, 1125, -1000, -1000, -1000, -1000, 367, 1092,
	-1000, 11991, 182, 1086, 16600, -1000, 15181, 16247, 758, 7022,
	-112, -1000, -1000, -1000, 295, 14475, -1000, -1000, -1000, 980,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, 746, 18365, -1000, 324, -1000, 639, 4820, 124, 639,
	343, 639, 18365, 18365, 4820, 4820, 4820, 33, 70, 64,
	18365, 525, 757, 112, 18365, 1019, 862, 18365, 639, 639,
	-1000, 6288, -1000, 4820, 316, -1000, 524, 10226, 4820, 4820,
	4820, 18365, 4820, 4820, -1000, 521, -1000, -1000, 342, -1000,
	-1000, -1000, -1000, -1000, -1000, 4820, 4820, 323, 1080, 323,
	-1000, -1000, -1000, -1000, 10226, 246, -1000, 861, -1000, -1000,
	9, -1000, -1000, -1000, -1000, -1000, 1144, -1000, -1000, -1000,
	-134, -1000, -1000, 10226, 10226, 10226, 10226, 478, 261, 11285,
	429, 266, 11285, 11285, 11285, 11285, 11285, 11285, 11285, 11285,
	11285, 11285, 11285, 11285, 11285, 11285, 11285, 674, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 639, -1000, 1142, 597,
	597, 199, 199, 199, 199, 199, 199, 199, 199, 199,
	11638, 7742, 6288, 592, 742, 1045, 8801, 8801, 10226, 10226,
	9507, 9154, 8801, 984, 333, 325, 18365, -1000, -1000, 10932,
	-1000, -1000, -1000, -1000, -1000, 515, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 18365, 18365, 8801, 8801, 8801, 8801, 8801,
	952, 1027, 592, 1125, 1011, 1113, 217, 626, 755, -1000,
	612, 1027, 14122, 627, -1000, 1125, -1000, -1000, -1000, 18365,
	-1000, -1000, 15887, -1000, -1000, 5921, 18365, 49, 18365, -1000,
	751, 836, -1000, -1000, -1000, 1021, 13416, 13769, 18365, 756,
	688, -1000, -1000, 181, 6655, -112, -1000, 6655, 701, -1000,
	-88, -111, 8095, 197, -1000, -1000, -1000, -1000, 4453, 12697,
	566, 401, -59, -1000, -1000, -1000, 777, -1000, 777, 777,
	777, 777, -24, -24, -24, -24, -1000, -1000, -1000, -1000,
	-1000, 832, 819, -1000, 777, 777, 777, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 809, 809, 809, 780, 780,
	835, -1000, 18365, 4820, 1018, 4820, -1000, 128, -1000, -1000,
	-1000, 18365, 18365, 18365, 18365, 18365, 147, -1000, 18365, 18365,
	753, -1000, 18365, 4820, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 325, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	18365, -1000, -1000, -1000, -1000, 316, 18365, 18365, 18365, 316,
	325, -1000, 18365, 18365, -1000, -1000, -1000, -1000, -1000, 325,
	261, 350, 275, -1000, -1000, 613, -1000, -1000, 1940, -1000,
	-1000, -1000, -1000, 429, 11285, 11285, 11285, 847, 1940, 1908,
	722, 1582, 199, 212, 212, 194, 194, 194, 194, 194,
	510, 510, -1000, -1000, -1000, 515, -1000, -1000, -1000, 515,
	8801, 8801, 750, 675, 180, -1000, 817, -1000, -1000, 1027,
	738, 738, 571, 347, 284, 1069, 738, 263, 1063, 738,
	738, 8801, -1000, -1000, 332, -1000, 10226, 515, -1000, 177,
	-1000, 865, 748, 729, 738, 515, 515, 738, 738, 520,
	998, -1000, -1000, 968, -1000, 936, 10226, 10226, 10226, -1000,
	-1000, -1000, 998, 1044, -1000, 945, 944, 1056, 8801, 15181,
	1125, -1000, -1000, -1000, 173, 1056, 1008, 675, -1000, 18365,
	15181, 15181, 15181, 15181, 15181, -1000, 898, 897, -1000, 882,
	875, 892, 18365, -1000, 740, 592, 13416, 176, 675, -1000,
	15534, -1000, -1000, 49, 554, 15181, 18365, -1000, -1000, 15181,
	18365, 5554, -1000, 701, -112, -108, -1000, -1000, -1000, -1000,
	325, -1000, 681, 691, 4086, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, 786, 639, -1000, 1005, 226, 203, 639, 1003,
	764, -1000, -1000, -1000, 983, -1000, 358, -61, -1000, -1000,
	447, -24, -24, -1000, -1000, 197, 978, 197, 197, 197,
	512, 512, -1000, -1000, -1000, -1000, 438, -1000, -1000, -1000,
	436, -1000, 859, 18365, 4820, -1000, -1000, -1000, -1000, 422,
	422, 227, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 48, 791, -1000, -1000, -1000, -1000, 3,
	31, 109, -1000, 4820, -1000, 323, -1000, -1000, -1000, 323,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 847, 1940, 1873,
	-1000, 11285, 11285, -1000, -1000, 738, 738, 8801, 6288, 1045,
	998, -1000, -1000, 432, 674, 432, 11285, 11285, -1000, 11285,
	11285, -1000, -162, 644, 307, -1000, 10226, 471, -1000, 6288,
	-1000, 11285, 11285, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	951, 922, 325, 325, -1000, -1000, 18365, -1000, -1000, -1000,
	-1000, 1046, 10226, -1000, 679, -1000, 5187, 1027, 858, 18365,
	675, 1144, 13416, 18365, 710, -1000, 288, 836, 790, 855,
	705, -1000, -1000, -1000, -1000, 893, -1000, 883, -1000, -1000,
	-1000, -1000, -1000, 592, -1000, 127, 126, 123, 18365, -1000,
	1056, 15181, 664, -1000, 664, -1000, 163, -1000, -1000, -1000,
	-119, -121, -1000, -1000, -1000, 4453, -1000, 4453, 18365, 80,
	-1000, 639, 639, -1000, -1000, -1000, 785, 10226, 845, 11285,
	-1000, -1000, -1000, 541, 197, 197, -1000, 285, -1000, -1000,
	-1000, 734, -1000, 731, 668, 727, 18365, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 18365, -1000, -1000, -1000,
	-1000, -1000, 18365, -176, 639, 18365, 18365, 18365, 18365, -1000,
	316, 316, -1000, 11285, 1940, 1940, -1000, -1000, 515, -1000,
	1027, -1000, 515, 777, 777, -1000, 777, 780, -1000, 777,
	-1, 777, -8, 515, 515, 1795, 1686, 1028, 889, 675,
	-144, -1000, 325, 10226, -1000, 1612, 1228, -1000, 507, -1000,
	-1000, 1053, 1041, 325, -1000, -1000, -1000, 1007, 601, 634,
	-1000, -1000, 8448, 723, 160, 708, -1000, 1045, 18365, 10226,
	-1000, -1000, 10226, 779, -1000, 10226, -1000, -1000, -1000, 1045,
	675, 675, 675, 708, 1045, 664, -1000, -1000, 208, -1000,
	-1000, -1000, 4086, -1000, 666, -1000, 777, -1000, 1003, 764,
	-1000, -1000, 18365, 638, -47, 1107, 1940, -1000, -1000, -1000,
	-1000, -1000, -24, 503, -24, 411, -1000, 382, 4820, -1000,
	-1000, -1000, -1000, 1009, -1000, 6288, -1000, -1000, 763, 834,
	-1000, -1000, -1000, -1000, 1940, -1000, 998, -1000, -1000, 122,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 11285, 11285,
	11285, 11285, 11285, 1027, 500, 325, 11285, 11285, -1000, -1000,
	10226, 10226, 990, -1000, 675, -1000, 879, 18365, 18365, -1000,
	18365, 1027, -1000, 325, 325, 18365, 325, 14828, 18365, 18365,
	13050, 1027, -1000, 191, 18365, -1000, 653, -1000, -1000, 215,
	-1000, -105, 197, -1000, 197, 539, 537, -1000, 675, 662,
	-1000, 287, 18365, 18365, -1000, -1000, -1000, 865, 865, 865,
	865, 17, 515, -1000, 865, 865, 325, 640, 1103, -1000,
	675, 1144, 153, -1000, -1000, -1000, 650, 616, -1000, 616,
	616, 176, -1000, 191, -1000, 639, 286, 493, -1000, 62,
	18365, -1000, -223, 365, 988, -1000, 986, -1000, -1000, -1000,
	-1000, -1000, 47, 6288, 4453, 583, -1000, -1000, -1000, -1000,
	-1000, 515, 55, -180, -1000, -1000, -1000, 18365, 634, 18365,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 374, -1000, -1000,
	18365, -1000, -1000, -1000, 463, -1000, -1000, 578, -1000, 18365,
	-1000, -1000, 791, -1000, 918, -173, -187, 609, -1000, -1000,
	682, 327, -1000, -1000, 47, 943, -176, -1000, 903, -1000,
	18365, -224, -1000, 44, -1000, -178, 544, -1000, 42, -184,
	842, 675, -189, 840, -1000, 1110, 10579, -1000, -1000, 1100,
	185, 185, 865, 515, -1000, -1000, -1000, 69, 452, -1000,
	-1000, -1000, -1000, -1000, -1000,
}

var yyPgo = [...]int{
	0, 1402, 1401, 50, 100, 74, 1400, 1399, 1397, 1395,
	94, 91, 87, 1394, 1393, 1392, 1390, 1389, 1388, 1387,
	1385, 1383, 1380, 1377, 1376, 1374, 1373, 1372, 1370, 1368,
	1367, 1361, 1360, 1358, 80, 1357, 1356, 1355, 1353, 77,
	1352, 1351, 1350, 1348, 1347, 36, 227, 38, 71, 1345,
	66, 812, 1344, 56, 64, 61, 1331, 24, 1330, 1322,
	89, 1321, 1320, 59, 1319, 1318, 1953, 1316, 57, 1313,
	13, 39, 1312, 1311, 1310, 1309, 93, 1949, 1307, 1306,
	15, 1305, 1304, 109, 1302, 68, 32, 14, 12, 21,
	1301, 67, 1300, 7, 1296, 65, 1287, 1286, 1285, 1284,
	30, 1283, 63, 1282, 28, 1281, 25, 1280, 17, 55,
	22, 19, 6, 1278, 1277, 16, 70, 45, 81, 1275,
	1270, 1267, 652, 1265, 1263, 58, 1262, 1261, 1259, 31,
	79, 111, 552, 1254, 1253, 1251, 1250, 1248, 1244, 49,
	1072, 1564, 8, 75, 1243, 1242, 1241, 2606, 42, 62,
	18, 1240, 1238, 1237, 48, 297, 37, 478, 1236, 35,
	1235, 1234, 1230, 1222, 1221, 1220, 1219, 34, 1218, 1215,
	1213, 98, 29, 69, 27, 1210, 1209, 1205, 1203, 43,
	78, 1202, 1197, 53, 1195, 1193, 26, 1189, 1188, 1186,
	1185, 1184, 23, 11, 1183, 20, 1182, 9, 1181, 33,
	1180, 5, 1170, 10, 1168, 2, 0, 1166, 4, 41,
	1, 1165, 3, 1164, 1163, 1159, 72, 876, 76, 1155,
	1152, 1150, 102,
}

var yyR1 = [...]int{
	0, 214, 215, 215, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 206, 206, 206, 21, 33, 3, 3, 3, 3,
	2, 2, 8, 9, 4, 5, 5, 10, 10, 38,
	38, 11, 12, 12, 12, 12, 218, 218, 60, 60,
	61, 61, 109, 109, 13, 14, 14, 118, 118, 117,
	117, 117, 119, 119, 119, 119, 157, 157, 15, 15,
	15, 15, 15, 15, 15, 208, 208, 207, 205, 205,
	204, 204, 203, 22, 188, 190, 190, 189, 189, 189,
	189, 180, 160, 160, 160, 160, 163, 163, 161, 161,
	161, 161, 161, 161, 161, 161, 161, 162, 162, 162,
	162, 162, 164, 164, 164, 164, 164, 165, 165, 165,
	165, 165, 165, 165, 165, 165, 165, 165, 165, 165,
	165, 165, 166, 166, 166, 166, 166, 166, 166, 166,
	179, 179, 167, 167, 173, 173, 174, 174, 174, 176,
	176, 177, 177, 133, 133, 133, 169, 169, 170, 170,
	175, 175, 171, 171, 171, 172, 172, 172, 178, 178,
	178, 178, 178, 168, 168, 181, 181, 198, 198, 197,
	197, 197, 187, 187, 194, 194, 194, 194, 194, 184,
	184, 184, 185, 185, 183, 183, 186, 186, 196, 196,
	195, 182, 182, 199, 199, 199, 199, 199, 211, 212,
	210, 210, 210, 210, 210, 219, 220, 134, 191, 191,
	191, 192, 192, 192, 193, 193, 193, 16, 16, 16,
	16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
	16, 16, 16, 16, 209, 209, 209, 209, 209, 209,
	209, 209, 209, 209, 209, 209, 209, 209, 202, 200,
	200, 201, 201, 17, 23, 23, 18, 18, 18, 18,
	18, 19, 19, 24, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 25, 25, 25, 25, 25, 25,
	25, 25, 25, 25, 126, 126, 213, 213, 128, 128,
	124, 124, 127, 127, 125, 125, 125, 129, 129, 129,
	130, 130, 158, 158, 158, 26, 26, 28, 28, 29,
	30, 30, 152, 152, 153, 153, 31, 32, 37, 37,
	37, 37, 37, 37, 40, 40, 40, 7, 7, 7,
	7, 36, 36, 36, 6, 6, 27, 27, 27, 27,
	20, 221, 34, 35, 35, 39, 39, 39, 41, 41,
	41, 44, 44, 44, 47, 47, 49, 49, 49, 49,
	49, 50, 50, 50, 50, 50, 50, 46, 46, 48,
	48, 48, 48, 144, 144, 144, 143, 143, 52, 52,
	53, 53, 54, 54, 55, 55, 55, 92, 69, 69,
	108, 108, 110, 110, 56, 56, 56, 56, 57, 57,
	58, 58, 59, 59, 151, 151, 150, 150, 150, 149,
	149, 62, 62, 62, 64, 63, 63, 63, 63, 65,
	65, 67, 67, 66, 66, 68, 70, 70, 70, 70,
	70, 71, 71, 51, 51, 51, 51, 51, 51, 51,
	51, 121, 121, 73, 73, 72, 72, 72, 72, 72,
	72, 72, 72, 72, 72, 84, 84, 84, 84, 84,
	84, 74, 74, 74, 74, 74, 74, 74, 45, 45,
	85, 85, 85, 91, 86, 86, 77, 77, 77, 77,
	77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
	77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
	77, 77, 77, 77, 77, 77, 77, 77, 77, 77,
	81, 81, 81, 81, 79, 79, 79, 79, 79, 79,
	79, 79, 79, 79, 79, 79, 79, 80, 80, 80,
	80, 80, 80, 80, 80, 80, 80, 80, 80, 80,
	80, 80, 80, 222, 222, 83, 82, 82, 82, 82,
	82, 82, 82, 43, 43, 43, 43, 43, 156, 156,
	159, 159, 159, 159, 159, 159, 159, 159, 159, 159,
	159, 159, 159, 96, 96, 42, 42, 94, 94, 95,
	97, 97, 93, 93, 93, 76, 76, 76, 76, 76,
	76, 76, 76, 78, 78, 78, 98, 98, 99, 99,
	100, 100, 101, 101, 102, 103, 103, 103, 104, 104,
	104, 104, 106, 106, 106, 105, 105, 75, 75, 75,
	75, 107, 107, 107, 107, 111, 111, 87, 87, 89,
	89, 88, 90, 112, 112, 115, 113, 113, 116, 116,
	116, 116, 116, 114, 114, 114, 146, 146, 146, 120,
	120, 131, 131, 132, 132, 122, 122, 135, 135, 135,
	135, 135, 135, 135, 135, 135, 135, 123, 123, 123,
	136, 136, 136, 137, 137, 138, 138, 138, 145, 145,
	141, 141, 142, 142, 147, 147, 148, 148, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
	139, 139, 139, 139, 139, 139, 139, 139, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	140, 140, 140, 140, 140, 140, 140, 140, 140, 140,
	216, 217, 154, 155, 155, 155,
}

var yyR2 = [...]int{
	0, 2, 0, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	0, 1, 1, 1, 2, 6, 5, 6, 6, 7,
	4, 6, 5, 7, 8, 1, 3, 7, 8, 1,
	1, 9, 9, 8, 7, 7, 1, 1, 1, 3,
	1, 3, 0, 4, 3, 5, 4, 1, 3, 3,
	2, 2, 2, 2, 2, 1, 1, 1, 2, 2,
	8, 4, 6, 5, 5, 0, 2, 1, 0, 2,
	1, 3, 3, 4, 4, 2, 4, 1, 3, 3,
	3, 8, 3, 1, 1, 1, 2, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 2, 2, 2,
	2, 2, 1, 2, 2, 2, 1, 4, 4, 2,
	2, 3, 3, 3, 3, 1, 1, 1, 1, 1,
	6, 6, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 0, 3, 0, 5, 0, 3, 5, 0,
	1, 0, 1, 0, 1, 2, 0, 2, 0, 3,
	0, 1, 0, 3, 3, 0, 2, 2, 0, 2,
	1, 2, 1, 0, 2, 5, 4, 1, 2, 2,
	3, 2, 0, 1, 2, 3, 3, 2, 2, 1,
	1, 1, 1, 1, 1, 1, 0, 1, 1, 3,
	2, 3, 1, 10, 11, 11, 12, 5, 3, 3,
	1, 1, 2, 2, 2, 0, 0, 5, 0, 1,
	3, 1, 2, 3, 1, 1, 1, 6, 7, 7,
	7, 7, 4, 5, 4, 4, 7, 5, 5, 5,
	12, 7, 5, 9, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 7, 1,
	3, 8, 8, 3, 3, 5, 4, 6, 5, 4,
	4, 3, 2, 3, 4, 4, 3, 4, 4, 4,
	4, 4, 4, 3, 3, 3, 2, 7, 2, 3,
	4, 5, 7, 5, 4, 2, 4, 4, 3, 3,
	5, 2, 3, 3, 1, 1, 1, 1, 0, 1,
	0, 1, 1, 1, 0, 2, 2, 0, 2, 2,
	0, 2, 0, 1, 1, 2, 1, 1, 2, 1,
	1, 5, 0, 1, 0, 1, 2, 3, 0, 3,
	3, 3, 3, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 1, 1, 3, 3, 2, 2, 3, 3,
	2, 0, 2, 0, 2, 1, 2, 2, 0, 1,
	1, 0, 1, 1, 0, 1, 0, 1, 2, 3,
	4, 1, 1, 1, 1, 1, 1, 1, 3, 1,
	2, 3, 5, 0, 1, 2, 1, 1, 0, 2,
	1, 3, 1, 1, 1, 3, 3, 3, 3, 7,
	1, 3, 1, 3, 4, 4, 4, 3, 2, 4,
	0, 1, 0, 2, 0, 1, 0, 1, 2, 1,
	1, 1, 2, 2, 1, 2, 3, 2, 3, 2,
	2, 2, 1, 1, 3, 3, 0, 5, 4, 5,
	5, 0, 2, 1, 3, 3, 3, 2, 3, 1,
	2, 0, 3, 1, 1, 3, 3, 4, 4, 5,
	3, 4, 5, 6, 2, 1, 2, 1, 2, 1,
	2, 1, 1, 1, 1, 1, 1, 1, 0, 2,
	1, 1, 1, 3, 1, 3, 1, 1, 1, 1,
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 3, 1, 1, 1, 1,
	4, 5, 5, 6, 4, 4, 6, 6, 6, 8,
	8, 8, 8, 9, 8, 5, 4, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 8, 8, 0, 2, 3, 4, 4, 4, 4,
	4, 4, 4, 0, 3, 4, 7, 3, 1, 1,
	2, 3, 3, 1, 2, 2, 1, 2, 1, 2,
	2, 1, 2, 0, 1, 0, 2, 1, 2, 4,
	0, 2, 1, 3, 5, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 2, 2, 0, 3, 0, 2,
	0, 3, 1, 3, 2, 0, 1, 1, 0, 2,
	4, 4, 0, 2, 4, 0, 4, 2, 1, 5,
	4, 1, 3, 3, 5, 0, 5, 1, 3, 1,
	2, 3, 1, 1, 3, 3, 1, 3, 3, 3,
	3, 3, 2, 1, 2, 1, 1, 1, 1, 1,
	1, 0, 2, 0, 3, 0, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 0, 2, 3,
	0, 1, 1, 1, 1, 0, 1, 1, 0, 2,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 0, 0, 1, 1,
}

var yyChk = [...]int{
	-1000, -214, -1, -3, -8, -9, -10, -11, -12, -13,
	-14, -15, -16, -17, -18, -19, -24, -25, -26, -28,
	-29, -30, -31, -32, -6, -27, -20, -21, -33, -4,
	-216, 6, 7, 8, -38, 10, 11, 31, -22, 128,
	129, 131, 130, 164, 132, 157, 58, 178, 179, 181,
	182, 183, 184, -40, 162, 163, 32, 33, 134, 35,
	40, 62, 9, 271, 159, 158, 26, -215, 373, -39,
	5, -100, 16, -3, -34, -221, -34, -34, -34, -34,
	-34, -34, -188, -190, 62, 101, -138, 138, 82, 263,
	135, 136, 142, -141, -206, -140, 65, 66, 67, 281,
	150, 313, 314, 178, 192, 186, 213, 205, 282, 315,
	151, 203, 206, 250, 148, 316, 233, 240, 76, 181,
	259, 317, 39, 160, 201, 197, 318, 290, 195, 28,
	319, 242, 218, 320, 286, 244, 196, 241, 134, 321,
	153, 369, 146, 322, 219, 223, 323, 251, 324, 325,
	326, 190, 191, 327, 149, 253, 217, 147, 34, 245,
	283, 42, 168, 254, 221, 40, 328, 216, 212, 329,
	330, 331, 332, 215, 189, 211, 46, 225, 224, 226,
	249, 208, 333, 334, 335, 154, 336, 198, 19, 337,
	338, 339, 340, 341, 257, 163, 342, 166, 343, 344,
	345, 346, 347, 348, 243, 220, 222, 143, 170, 239,
	285, 349, 255, 194, 350, 155, 167, 162, 258, 156,
	351, 352, 353, 354, 355, 356, 357, 182, 38, 358,
	359, 360, 361, 177, 252, 261, 45, 230, 362, 188,
	145, 363, 179, 174, 235, 209, 169, 364, 365, 199,
	200, 214, 187, 210, 180, 370, 171, 164, 366, 260,
	231, 287, 207, 204, 175, 367, 172, 173, 368, 371,
	246, 236, 247, 248, 237, 176, 284, 256, 202, 232,
	-123, 138, 263, 135, 237, 284, 136, 136, 137, 138,
	263, 135, 136, -66, -147, -206, -140, 138, 136, 119,
	206, 250, 128, 234, 245, 246, 242, -128, 243, 170,
	-158, 136, -124, 233, 236, 237, 176, -213, -206, 244,
	252, 251, 238, 248, 247, -147, 180, -152, 185, -141,
	183, -66, -37, 369, 132, -154, -154, 235, 235, -154,
	-86, -51, -72, 85, -77, 30, 24, -76, -73, -93,
	-90, -91, 119, 120, 122, 121, 123, 108, 109, 116,
	86, 124, -81, -79, -80, -82, 69, 68, 77, 70,
	71, 72, 73, 78, 79, 80, -141, -147, -88, -216,
	52, 53, 272, 273, 274, 275, 280, 276, 88, 41,
	262, 270, 269, 268, 266, 267, 264, 265, 278, 279,
	141, 263, 135, 114, 271, -206, -140, 39, -5, -4,
	-216, 6, 21, 22, -104, 18, 17, -217, 64, -41,
	-49, 47, 48, -50, 22, 36, 51, 49, -35, -48,
	110, -51, -147, -48, -122, 140, -122, -122, -113, -157,
	180, -116, 252, 251, -142, -114, -141, -139, 250, 206,
	249, 133, 288, 84, 23, 25, 228, 87, 119, 17,
	88, 118, 272, 128, 56, 289, 264, 265, 262, 274,
	275, 263, 234, 30, 11, 291, 26, 158, 22, 36,
	112, 130, 91, 92, 161, 24, 159, 80, 294, 20,
	59, 12, 14, 295, 296, 15, 141, 140, 103, 137,
	54, 9, 124, 27, 100, 50, 297, 29, 298, 299,
	300, 301, 52, 101, 18, 266, 267, 32, 302, 280,
	165, 114, 57, 43, 85, 303, 304, 78, 305, 81,
	60, 82, 16, 55, 37, 306, 307, 308, 309, 102,
	131, 271, 53, 310, 135, 6, 277, 31, 157, 51,
	311, 136, 90, 278, 279, 139, 79, 5, 142, 33,
	10, 58, 61, 268, 269, 270, 41, 89, 13, 312,
	83, -189, 101, -180, -141, -66, 137, -66, 271, -132,
	141, -132, -132, 136, -66, -206, -206, 128, 130, 133,
	60, 69, -23, -66, -131, 141, -206, -131, -131, -131,
	-66, 125, -66, -206, 31, -129, 101, 13, 263, -206,
	170, 136, 171, 138, -130, 101, -130, -130, -184, 137,
	34, 149, -155, -216, -142, 174, 175, 174, -127, -126,
	240, 241, 235, 239, 13, 175, 235, 173, -129, -155,
	139, -141, -36, -141, 69, -7, -3, -11, -10, -12,
	93, -154, -154, 63, 84, 82, 83, 100, -51, -74,
	103, 85, 101, 102, 87, 105, 104, 115, 108, 109,
	110, 111, 112, 113, 114, 106, 107, 118, 93, 94,
	95, 96, 97, 98, 99, -121, -216, -91, -216, 126,
	127, -77, -77, -77, -77, -77, -77, -77, -77, -77,
	-77, -216, 125, -2, -86, -4, -216, -216, -216, -216,
	-216, -216, -216, -216, -96, -51, -216, -222, -83, -216,
	-222, -83, -222, -83, -222, -216, -222, -83, -222, -83,
	-222, -222, -83, -216, -216, -216, -216, -216, -216, -216,
	12, -100, -3, -34, -106, 20, 32, -51, -101, -102,
	-51, -100, 43, -46, -48, -50, 47, 48, 75, 12,
	-144, -143, 23, -141, 69, 125, 12, -67, 27, -66,
	-53, -54, -55, -56, -69, -92, -216, -66, 12, -60,
	-61, -66, -68, -147, 63, 180, -116, -157, -118, -117,
	253, 255, 93, -146, -141, 69, 30, 31, 64, 63,
	-66, -160, -163, -165, -164, -166, -161, -162, 203, 204,
	119, 207, 209, 210, 211, 212, 213, 214, 215, 216,
	217, 218, 31, 160, 199, 200, 201, 202, 219, 220,
	221, 222, 223, 224, 225, 226, 186, 205, 282, 187,
	188, 189, 190, 191, 192, 194, 195, 196, 197, 198,
	-206, -155, 138, -206, 85, -206, -66, -66, -155, -155,
	-155, 172, 172, 136, 136, 177, -66, 69, 63, 139,
	-60, 24, 60, -66, -206, -206, -148, -147, -139, -155,
	-129, 69, -51, -155, -155, -155, -66, -155, -155, 69,
	-185, 12, 103, -155, -155, -125, 12, 103, 12, -125,
	-51, -130, 60, -153, 183, 217, 370, 371, 372, -51,
	-51, -51, -51, -84, 78, 85, 79, 80, -77, -85,
	-88, -91, 74, 103, 101, 102, 87, -77, -77, -77,
	-77, -77, -77, -77, -77, -77, -77, -77, -77, -77,
	-77, -77, -156, -206, 69, -206, -76, -76, -141, -47,
	22, 36, -46, -142, -148, -139, -39, -217, -217, -100,
	-46, -46, -51, -51, -93, 69, -46, -93, 69, -46,
	-46, -44, 22, 36, -94, -95, 89, -93, -141, -147,
	-217, -77, -141, -141, -46, -47, -47, -46, -46, 38,
	-104, -217, -105, 27, 10, 103, 63, 19, 63, -103,
	25, 26, -104, -78, -141, 70, 73, -52, 63, 12,
	-50, -66, -143, 110, -148, -66, -109, 166, -66, 31,
	63, -62, -64, -63, -65, 50, 54, 56, 51, 52,
	53, 57, -151, 23, -53, -3, -216, -150, 166, -149,
	23, -147, 69, -66, -60, -218, 63, 12, 61, -218,
	63, 125, -116, -118, 63, 254, 256, 257, 60, 81,
	-51, -172, 118, -191, -192, -193, -142, 69, 70, -180,
	-181, -182, -194, 152, -199, 143, 145, 142, -183, 153,
	148, 137, 29, 64, -133, 78, 85, -176, 231, -167,
	62, -167, -167, -167, -167, -171, 206, -171, -171, -171,
	62, 62, -167, -167, -167, -173, 62, -173, -173, -174,
	62, -174, -145, 61, -66, -155, 24, -155, -135, 133,
	130, 131, -202, 129, 228, 206, 76, 30, 16, 272,
	166, 287, -206, 167, -66, -66, -66, -66, -66, 133,
	130, -66, -66, -66, -155, -66, -129, -147, -147, -66,
	-129, -66, -141, 78, 79, 80, -85, -77, -77, -77,
	-45, 161, 84, -217, -217, -46, -46, -216, 125, -5,
	-104, -217, -217, 63, 61, 23, 12, 12, -217, 12,
	12, -217, -217, -46, -97, -95, 91, -51, -217, 125,
	-217, 63, 63, -217, -217, -217, -217, -217, 69, -106,
	37, 45, -51, -51, -102, -106, -120, 20, 12, 41,
	41, -71, 13, -48, -53, -50, 125, -71, -75, 31,
	41, -3, -216, -216, -112, -115, -93, -54, -55, -55,
	-54, -55, 50, 50, 50, 55, 50, 55, 50, -63,
	-147, -217, -217, -3, -70, 58, 140, 59, -216, -149,
	-109, 61, -53, -66, -53, -68, -147, 110, -117, -119,
	258, 255, 261, -206, 69, 63, -193, 93, 62, -206,
	29, -183, -183, -186, -206, -186, 29, 62, -169, 30,
	78, -177, 232, 70, -171, -171, -172, 31, -172, -172,
	-172, -179, 69, -179, 70, 70, 60, -141, -155, -154,
	-209, 148, 144, 152, 153, 146, 65, 66, 67, 137,
	29, 143, 145, 166, 142, -209, -136, -137, 139, 23,
	137, 29, 166, -208, 61, 172, 228, 172, 139, -155,
	-125, -125, -45, 84, -77, -77, -217, -217, -47, -142,
	-100, -106, -159, 119, 203, 160, 201, 197, 217, 208,
	230, 199, 231, -156, -159, -77, -77, -77, -77, 281,
	-100, 92, -51, 90, -142, -77, -77, -154, 38, 46,
	-66, -98, 14, -51, 110, -104, -111, 60, -112, -87,
	-89, -88, -216, -107, -141, -110, -141, -71, 63, 93,
	-58, -57, 60, 61, -59, 60, -57, 50, 50, -217,
	137, 137, 137, -110, -71, -53, -71, -71, 125, 255,
	259, 260, -192, -193, -196, -195, -141, -199, 153, 148,
	-186, -186, 62, -51, -170, 60, -77, 64, -172, -172,
	-206, 119, 64, 63, 64, 63, 64, 63, -66, -154,
	-154, -66, -154, -141, -205, 284, -207, -206, -141, -141,
	-141, -66, -129, -129, -77, -217, -104, -217, -167, -167,
	-167, -174, -167, 191, -167, 191, -217, -217, 20, 20,
	20, 20, -216, -42, 277, -51, 63, 63, 69, -99,
	15, 17, 28, -111, 63, -217, -217, 63, 125, -217,
	63, -100, -115, -51, -51, 62, -51, -216, -216, -216,
	-217, -100, -71, 64, 63, -167, -108, -141, 64, -175,
	228, 10, -171, 69, -171, 70, 70, -155, 27, -204,
	-203, -142, 62, 61, -106, -171, -206, -77, -77, -77,
	-77, -77, -104, 69, -77, -77, -51, -86, 29, -89,
	41, -3, -141, -141, -141, -104, -108, -108, -217, -108,
	-108, -150, -104, -198, -197, 61, 147, 76, -195, 64,
	63, -134, -219, -178, 143, 29, 142, -80, -172, -172,
	64, 64, -216, 63, 93, -108, -66, -217, -217, -217,
	-217, -43, 103, 284, -217, -217, -217, 10, -87, 125,
	64, -217, -217, -217, -70, -197, -206, -187, 93, 69,
	155, -141, 319, -168, 76, 29, 29, -200, -201, 166,
	-203, -193, 64, -217, 282, 57, 285, -112, -141, 70,
	-66, -220, 69, -217, 63, -141, -208, 46, 283, 286,
	62, 85, -201, 41, -205, 46, -108, 319, 168, 284,
	64, 169, 285, -211, -212, 60, -216, 286, -212, 60,
	11, 10, -77, 165, -210, 156, 151, 154, 31, -210,
	-217, -217, 150, 30, 78,
}

var yyDef = [...]int{
	30, -2, 2, 4, 5, 6, 7, 8, 9, 10,
	11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
	21, 22, 23, 24, 25, 26, 27, 28, 29, 630,
	0, 371, 371, 371, 371, 371, 371, 371, 0, 705,
	697, 0, 0, 0, 0, -2, 336, 337, 0, 339,
	-2, 0, 0, 348, 1022, 1022, 0, 0, 1022, 0,
	0, 1020, 49, 50, 354, 355, 356, 1, 3, 0,
	375, 638, 0, 0, -2, 373, 0, 0, 685, 685,
	685, 0, 78, 79, 0, 0, 0, 1005, 0, 683,
	683, 683, 706, 707, 710, 711, 31, 32, 33, 838,
	839, 840, 841, 842, 843, 844, 845, 846, 847, 848,
	849, 850, 851, 852, 853, 854, 855, 856, 857, 858,
	859, 860, 861, 862, 863, 864, 865, 866, 867, 868,
	869, 870, 871, 872, 873, 874, 875, 876, 877, 878,
	879, 880, 881, 882, 883, 884, 885, 886, 887, 888,
	889, 890, 891, 892, 893, 894, 895, 896, 897, 898,
	899, 900, 901, 902, 903, 904, 905, 906, 907, 908,
	909, 910, 911, 912, 913, 914, 915, 916, 917, 918,
	919, 920, 921, 922, 923, 924, 925, 926, 927, 928,
	929, 930, 931, 932, 933, 934, 935, 936, 937, 938,
	939, 940, 941, 942, 943, 944, 945, 946, 947, 948,
	949, 950, 951, 952, 953, 954, 955, 956, 957, 958,
	959, 960, 961, 962, 963, 964, 965, 966, 967, 968,
	969, 970, 971, 972, 973, 974, 975, 976, 977, 978,
	979, 980, 981, 982, 983, 984, 985, 986, 987, 988,
	989, 990, 991, 992, 993, 994, 995, 996, 997, 998,
	999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009,
	1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019,
	0, 0, 0, 0, 0, 0, 0, 681, 0, 681,
	681, 681, 0, 282, 453, 714, 715, 1005, 0, 0,
	0, 327, 0, 330, 330, 330, 296, 0, 298, 1023,
	0, 0, 0, 305, 0, 0, 311, 327, 1023, 319,
	333, 334, 321, 316, 317, 335, 338, 0, 343, 346,
	0, 361, 0, 880, 353, 366, 367, 1022, 1022, 370,
	34, 504, 463, 0, 469, 471, 0, 506, 507, 508,
	509, 510, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 536, 537, 538, 539, 615, 616, 617, 618,
	619, 620, 621, 622, 473, 474, 612, 0, 662, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 603, 0,
	573, 573, 573, 573, 573, 573, 573, 573, 0, 0,
	0, 0, 0, 0, 0, -2, -2, 0, 630, 45,
	0, 371, 376, 377, 642, 0, 0, 630, 1021, 0,
	0, -2, -2, 387, 393, 394, 395, 396, 372, 0,
	399, 403, 0, 0, 0, 686, 0, 0, 64, 0,
	993, 666, -2, -2, 0, 0, 712, 713, -2, 851,
	-2, 718, 719, 720, 721, 722, 723, 724, 725, 726,
	727, 728, 729, 730, 731, 732, 733, 734, 735, 736,
	737, 738, 739, 740, 741, 742, 743, 744, 745, 746,
	747, 748, 749, 750, 751, 752, 753, 754, 755, 756,
	757, 758, 759, 760, 761, 762, 763, 764, 765, 766,
	767, 768, 769, 770, 771, 772, 773, 774, 775, 776,
	777, 778, 779, 780, 781, 782, 783, 784, 785, 786,
	787, 788, 789, 790, 791, 792, 793, 794, 795, 796,
	797, 798, 799, 800, 801, 802, 803, 804, 805, 806,
	807, 808, 809, 810, 811, 812, 813, 814, 815, 816,
	817, 818, 819, 820, 821, 822, 823, 824, 825, 826,
	827, 828, 829, 830, 831, 832, 833, 834, 835, 836,
	837, 0, 0, 97, 0, 95, 0, 1023, 0, 0,
	0, 0, 0, 0, 1023, 1023, 1023, 0, 0, 0,
	0, 698, 273, 0, 0, 0, 0, 0, 0, 0,
	281, 0, 283, 1023, 327, 286, 0, 0, 1023, 1023,
	1023, 0, 1023, 1023, 293, 0, 294, 295, 0, 199,
	200, 201, 299, 1024, 1025, 1023, 1023, 324, 0, 324,
	322, 323, 314, 315, 0, 330, 308, 309, 312, 313,
	344, 347, 364, 362, 363, 365, 357, 358, 359, 360,
	0, 368, 369, 0, 0, 0, 0, 0, 467, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 491, 492,
	493, 494, 495, 496, 497, 470, 0, 484, 0, 0,
	0, 526, 527, 528, 529, 530, 531, 532, 533, 534,
	0, 384, 0, 0, 0, 630, 0, 0, 0, 0,
	0, 0, 0, 381, 0, 604, 0, 557, 565, 0,
	558, 566, 559, 567, 560, 0, 561, 568, 562, 569,
	563, 564, 570, 0, 0, 0, 384, 384, 0, 0,
	0, 638, 0, 386, 645, 0, 0, 639, 631, 632,
	635, 638, 0, 408, 397, 388, 391, 392, 374, 0,
	400, 404, 0, 406, 407, 0, 0, 62, 0, 452,
	0, 410, 412, 413, 414, 434, 0, 436, 0, 0,
	0, 58, 60, 453, 0, 993, 672, 0, 66, 67,
	0, 0, 0, 175, 676, 677, 678, 674, 228, 0,
	0, 163, 159, 103, 104, 105, 152, 107, 152, 152,
	152, 152, 172, 172, 172, 172, 135, 136, 137, 138,
	139, 0, 0, 122, 152, 152, 152, 126, 142, 143,
	144, 145, 146, 147, 148, 149, 108, 109, 110, 111,
	112, 113, 114, 115, 116, 154, 154, 154, 156, 156,
	708, 81, 0, 1023, 0, 1023, 93, 0, 242, 244,
	245, 0, 0, 0, 0, 0, 0, 699, 0, 0,
	276, 682, 0, 1023, 279, 280, 454, 716, 717, 284,
	285, 328, 329, 287, 288, 289, 290, 291, 292, 331,
	0, 202, 203, 300, 304, 327, 0, 0, 0, 327,
	306, 307, 0, 0, 345, 349, 350, 351, 352, 505,
	464, 465, 466, 468, 485, 0, 487, 489, 475, 476,
	500, 501, 502, 0, 0, 0, 0, 498, 480, 0,
	511, 512, 513, 514, 515, 516, 517, 518, 519, 520,
	521, 522, 525, 588, 589, 0, 523, 524, 535, 0,
	0, 0, 385, 613, 0, -2, 0, 503, 661, 638,
	0, 0, 0, 0, 508, 615, 0, 508, 615, 0,
	0, 0, 382, 383, 610, 607, 0, 0, 612, 0,
	574, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	642, 46, 36, 0, 643, 0, 0, 0, 0, 634,
	636, 637, 642, 0, 623, 0, 0, 461, 0, 0,
	389, 42, 405, 401, 0, 461, 0, 0, 451, 0,
	0, 0, 0, 0, 0, 441, 0, 0, 444, 0,
	0, 0, 0, 435, 0, 0, 0, 456, 936, 437,
	0, 439, 440, -2, 0, 0, 0, 56, 57, 0,
	0, 0, 667, 65, 0, 0, 70, 71, 668, 669,
	670, 671, 0, 94, 229, 231, 234, 235, 236, 98,
	99, 100, 0, 0, 212, 946, 979, 206, 206, 879,
	853, 204, 205, 96, 166, 164, 0, 161, 160, 106,
	0, 172, 172, 129, 130, 175, 0, 175, 175, 175,
	0, 0, 123, 124, 125, 117, 0, 118, 119, 120,
	0, 121, 0, 0, 1023, 83, 684, 84, 1022, 0,
	0, 700, 243, 687, 688, 689, 690, 691, 692, 693,
	694, 695, 696, 0, 85, 247, 249, 248, 252, 0,
	0, 0, 274, 1023, 278, 324, 301, 325, 326, 324,
	303, 310, 341, 486, 488, 490, 477, 498, 481, 0,
	478, 0, 0, 472, 540, 0, 0, 384, 0, 630,
	642, 544, 545, 0, 0, 0, 0, 0, 581, 0,
	0, 582, 0, 630, 0, 608, 0, 0, 556, 0,
	575, 0, 0, 576, 577, 578, 579, 580, 1022, 38,
	0, 0, 640, 641, 633, 37, 0, 679, 680, 624,
	625, 626, 0, 398, 409, 390, 0, 638, 655, 0,
	0, 648, 0, 0, 461, 663, 0, 411, 430, 432,
	0, 427, 442, 443, 445, 0, 447, 0, 449, 450,
	415, 416, 417, 0, 418, 0, 0, 0, 0, 438,
	461, 0, 461, 59, 461, 61, 0, 455, 68, 69,
	0, 0, 75, 176, 177, 0, 232, 0, 0, 0,
	194, 206, 206, 197, 207, 198, 0, 0, 168, 0,
	165, 102, 162, 0, 175, 175, 131, 0, 132, 133,
	134, 0, 150, 0, 0, 0, 0, 709, 82, 237,
	1022, 254, 255, 256, 257, 258, 259, 260, 261, 262,
	263, 264, 265, 266, 267, 1022, 0, 1022, 701, 702,
	703, 704, 0, 88, 0, 0, 0, 0, 0, 277,
	327, 327, 479, 0, 499, 482, 541, 542, 0, 614,
	638, 40, 0, 152, 152, 593, 152, 156, 596, 152,
	598, 152, 601, 0, 0, 0, 0, 0, 0, 0,
	605, 555, 611, 0, 613, 0, 0, 35, 0, 644,
	39, 628, 0, 462, 402, 43, 47, 0, 655, 647,
	657, 659, 0, 0, 651, 0, 422, 630, 0, 0,
	424, 431, 0, 0, 425, 0, 426, 446, 448, -2,
	0, 0, 0, 0, 630, 461, 54, 55, 0, 72,
	73, 74, 230, 233, 0, 208, 152, 211, 0, 0,
	195, 196, 0, 0, 170, 0, 167, 153, 127, 128,
	173, 174, 172, 0, 172, 0, 157, 0, 1023, 238,
	239, 240, 241, 0, 246, 0, 86, 87, 0, 0,
	251, 275, 297, 302, 483, 543, 642, 546, 590, 172,
	594, 595, 597, 599, 600, 602, 548, 547, 0, 0,
	0, 0, 0, 638, 0, 609, 0, 0, 646, 44,
	0, 0, 0, 48, 0, 660, 0, 0, 0, 63,
	0, 638, 664, 665, 428, 0, 433, 0, 0, 0,
	436, 638, 53, 186, 0, 210, 0, 420, 225, 178,
	171, 0, 175, 151, 175, 0, 0, 80, 0, 89,
	90, 0, 0, 0, 41, 591, 592, 0, 0, 0,
	0, 583, 0, 606, 0, 0, 629, 627, 0, 658,
	0, 650, 653, 652, 423, 51, 0, 0, 458, 0,
	0, 456, 52, 185, 187, 0, 192, 0, 209, 0,
	0, 217, 0, 183, 0, 180, 182, 169, 140, 141,
	155, 158, 0, 0, 0, 0, 253, 549, 551, 550,
	552, 0, 0, 0, 554, 571, 572, 0, 649, 0,
	429, 457, 459, 460, 419, 188, 189, 0, 193, 191,
	0, 421, 226, 101, 0, 179, 181, 0, 269, 0,
	91, 92, 85, 553, 0, 0, 0, 656, 654, 190,
	0, 0, 184, 268, 0, 0, 88, 584, 0, 587,
	0, 0, 270, 0, 250, 585, 0, 227, 0, 0,
	213, 0, 0, 214, 215, 0, 0, 586, 216, 0,
	0, 0, 0, 0, 218, 220, 221, 0, 0, 219,
	271, 272, 222, 223, 224,
}

var yyTok1 = [...]int{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 86, 3, 3, 3, 113, 105, 3,
	62, 64, 110, 108, 63, 109, 125, 111, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 373,
	94, 93, 95, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 115, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 104, 3, 116,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	65, 66, 67, 68, 69, 70, 71, 72, 73, 74,
	75, 76, 77, 78, 79, 80, 81, 82, 83, 84,
	85, 87, 88, 89, 90, 91, 92, 96, 97, 98,
	99, 100, 101, 102, 103, 106, 107, 112, 114, 117,
	118, 119, 120, 121, 122, 123, 124, 126, 127, 128,
	129, 130, 131, 132, 133, 134, 135, 136, 137, 138,
	139, 140, 141, 142, 143, 144, 145, 146, 147, 148,
	149, 150, 151, 152, 153, 154, 155, 156, 157, 158,
	159, 160, 161, 162, 163, 164, 165, 166, 167, 168,
	169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
	179, 180, 181, 182, 183, 184, 185, 186, 187, 188,
	189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
	199, 200, 201, 202, 203, 204, 205, 206, 207, 208,
	209, 210, 211, 212, 213, 214, 215, 216, 217, 218,
	219, 220, 221, 222, 223, 224, 225, 226, 227, 228,
	229, 230, 231, 232, 233, 234, 235, 236, 237, 238,
	239, 240, 241, 242, 243, 244, 245, 246, 247, 248,
	249, 250, 251, 252, 253, 254, 255, 256, 257, 258,
	259, 260, 261, 262, 263, 264, 265, 266, 267, 268,
	269, 270, 271, 272, 273, 274,
}

var yyTok3 = [...]int{
	57600, 275, 57601, 276, 57602, 277, 57603, 278, 57604, 279,
	57605, 280, 57606, 281, 57607, 282, 57608, 283, 57609, 284,
	57610, 285, 57611, 286, 57612, 287, 57613, 288, 57614, 289,
	57615, 290, 57616, 291, 57617, 292, 57618, 293, 57619, 294,
	57620, 295, 57621, 296, 57622, 297, 57623, 298, 57624, 299,
	57625, 300, 57626, 301, 57627, 302, 57628, 303, 57629, 304,
	57630, 305, 57631, 306, 57632, 307, 57633, 308, 57634, 309,
	57635, 310, 57636, 311, 57637, 312, 57638, 313, 57639, 314,
	57640, 315, 57641, 316, 57642, 317, 57643, 318, 57644, 319,
	57645, 320, 57646, 321, 57647, 322, 57648, 323, 57649, 324,
	57650, 325, 57651, 326, 57652, 327, 57653, 328, 57654, 329,
	57655, 330, 57656, 331, 57657, 332, 57658, 333, 57659, 334,
	57660, 335, 57661, 336, 57662, 337, 57663, 338, 57664, 339,
	57665, 340, 57666, 341, 57667, 342, 57668, 343, 57669, 344,
	57670, 345, 57671, 346, 57672, 347, 57673, 348, 57674, 349,
	57675, 350, 57676, 351, 57677, 352, 57678, 353, 57679, 354,
	57680, 355, 57681, 356, 57682, 357, 57683, 358, 57684, 359,
	57685, 360, 57686, 361, 57687, 362, 57688, 363, 57689, 364,
	57690, 365, 57691, 366, 57692, 367, 57693, 368, 57694, 369,
	57695, 370, 57696, 371, 57697, 372, 0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:361
		{
			setParseTree(yylex, yyDollar[1].statement)
		}
	case 2:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:366
		{
		}
	case 3:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:367
		{
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:371
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 30:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:400
		{
			setParseTree(yylex, nil)
		}
	case 31:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:406
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), NoAt)
		}
	case 32:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:410
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), SingleAt)
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:414
		{
			yyVAL.colIdent = NewColIdentWithAt(string(yyDollar[1].bytes), DoubleAt)
		}
	case 34:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:420
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 35:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:426
		{
			yyVAL.statement = &Load{InfileS3: string(yyDollar[5].bytes)}
		}
	case 36:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:432
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].lock
			sel.IntoOutfileS3 = yyDollar[5].str
			yyVAL.selStmt = sel
		}
	case 37:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:441
		{
			yyVAL.selStmt = &Union{FirstStatement: &ParenSelect{Select: yyDollar[2].selStmt}, OrderBy: yyDollar[4].orderBy, Limit: yyDollar[5].limit, Lock: yyDollar[6].lock}
		}
	case 38:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:445
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].unionType, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].lock)
		}
	case 39:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:449
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), SelectExprs{Nextval{Expr: yyDollar[5].expr}}, []string{yyDollar[3].str} /*options*/, TableExprs{&AliasedTableExpr{Expr: yyDollar[7].tableName}}, nil /*where*/, nil /*groupBy*/, nil /*having*/)
		}
	case 40:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:472
		{
			sel := yyDollar[1].selStmt.(*Select)
			sel.OrderBy = yyDollar[2].orderBy
			sel.Limit = yyDollar[3].limit
			sel.Lock = yyDollar[4].lock
			yyVAL.selStmt = sel
		}
	case 41:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:480
		{
			yyVAL.selStmt = Unionize(yyDollar[1].selStmt, yyDollar[3].selStmt, yyDollar[2].unionType, yyDollar[4].orderBy, yyDollar[5].limit, yyDollar[6].lock)
		}
	case 42:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:486
		{
			yyVAL.statement = &Stream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName}
		}
	case 43:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:492
		{
			yyVAL.statement = &VStream{Comments: Comments(yyDollar[2].bytes2), SelectExpr: yyDollar[3].selectExpr, Table: yyDollar[5].tableName, Where: NewWhere(WhereClause, yyDollar[6].expr), Limit: yyDollar[7].limit}
		}
	case 44:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:500
		{
			yyVAL.selStmt = NewSelect(Comments(yyDollar[2].bytes2), yyDollar[4].selectExprs /*SelectExprs*/, yyDollar[3].strs /*options*/, yyDollar[5].tableExprs /*from*/, NewWhere(WhereClause, yyDollar[6].expr), GroupBy(yyDollar[7].exprs), NewWhere(HavingClause, yyDollar[8].expr))
		}
	case 45:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:506
		{
			yyVAL.selStmt = yyDollar[1].selStmt
		}
	case 46:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:510
		{
			yyVAL.selStmt = &ParenSelect{Select: yyDollar[2].selStmt}
		}
	case 47:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:517
		{
			// insert_data returns a *Insert pre-filled with Columns & Values
			ins := yyDollar[6].ins
			ins.Action = yyDollar[1].insertAction
			ins.Comments = yyDollar[2].bytes2
			ins.Ignore = yyDollar[3].ignore
			ins.Table = yyDollar[4].tableName
			ins.Partitions = yyDollar[5].partitions
			ins.OnDup = OnDup(yyDollar[7].updateExprs)
			yyVAL.statement = ins
		}
	case 48:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:529
		{
			cols := make(Columns, 0, len(yyDollar[7].updateExprs))
			vals := make(ValTuple, 0, len(yyDollar[8].updateExprs))
			for _, updateList := range yyDollar[7].updateExprs {
				cols = append(cols, updateList.Name.Name)
				vals = append(vals, updateList.Expr)
			}
			yyVAL.statement = &Insert{Action: yyDollar[1].insertAction, Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, Table: yyDollar[4].tableName, Partitions: yyDollar[5].partitions, Columns: cols, Rows: Values{vals}, OnDup: OnDup(yyDollar[8].updateExprs)}
		}
	case 49:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:541
		{
			yyVAL.insertAction = InsertAct
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:545
		{
			yyVAL.insertAction = ReplaceAct
		}
	case 51:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:551
		{
			yyVAL.statement = &Update{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, TableExprs: yyDollar[4].tableExprs, Exprs: yyDollar[6].updateExprs, Where: NewWhere(WhereClause, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 52:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:557
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, TableExprs: TableExprs{&AliasedTableExpr{Expr: yyDollar[5].tableName}}, Partitions: yyDollar[6].partitions, Where: NewWhere(WhereClause, yyDollar[7].expr), OrderBy: yyDollar[8].orderBy, Limit: yyDollar[9].limit}
		}
	case 53:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:561
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, Targets: yyDollar[5].tableNames, TableExprs: yyDollar[7].tableExprs, Where: NewWhere(WhereClause, yyDollar[8].expr)}
		}
	case 54:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:565
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereClause, yyDollar[7].expr)}
		}
	case 55:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:569
		{
			yyVAL.statement = &Delete{Comments: Comments(yyDollar[2].bytes2), Ignore: yyDollar[3].ignore, Targets: yyDollar[4].tableNames, TableExprs: yyDollar[6].tableExprs, Where: NewWhere(WhereClause, yyDollar[7].expr)}
		}
	case 56:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:574
		{
		}
	case 57:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:575
		{
		}
	case 58:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:579
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 59:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:583
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 60:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:589
		{
			yyVAL.tableNames = TableNames{yyDollar[1].tableName}
		}
	case 61:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:593
		{
			yyVAL.tableNames = append(yyVAL.tableNames, yyDollar[3].tableName)
		}
	case 62:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:598
		{
			yyVAL.partitions = nil
		}
	case 63:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:602
		{
			yyVAL.partitions = yyDollar[3].partitions
		}
	case 64:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:608
		{
			yyVAL.statement = &Set{Comments: Comments(yyDollar[2].bytes2), Exprs: yyDollar[3].setExprs}
		}
	case 65:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:614
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Scope: yyDollar[3].scope, Characteristics: yyDollar[5].characteristics}
		}
	case 66:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:618
		{
			yyVAL.statement = &SetTransaction{Comments: Comments(yyDollar[2].bytes2), Characteristics: yyDollar[4].characteristics, Scope: ImplicitScope}
		}
	case 67:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:624
		{
			yyVAL.characteristics = []Characteristic{yyDollar[1].characteristic}
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:628
		{
			yyVAL.characteristics = append(yyVAL.characteristics, yyDollar[3].characteristic)
		}
	case 69:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:634
		{
			yyVAL.characteristic = yyDollar[3].isolationLevel
		}
	case 70:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:638
		{
			yyVAL.characteristic = ReadWrite
		}
	case 71:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:642
		{
			yyVAL.characteristic = ReadOnly
		}
	case 72:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:648
		{
			yyVAL.isolationLevel = RepeatableRead
		}
	case 73:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:652
		{
			yyVAL.isolationLevel = ReadCommitted
		}
	case 74:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:656
		{
			yyVAL.isolationLevel = ReadUncommitted
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:660
		{
			yyVAL.isolationLevel = Serializable
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:666
		{
			yyVAL.scope = SessionScope
		}
	case 77:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:670
		{
			yyVAL.scope = GlobalScope
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:676
		{
			yyDollar[1].ddl.TableSpec = yyDollar[2].TableSpec
			yyVAL.statement = yyDollar[1].ddl
		}
	case 79:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:681
		{
			// Create table [name] like [name]
			yyDollar[1].ddl.OptLike = yyDollar[2].optLike
			yyVAL.statement = yyDollar[1].ddl
		}
	case 80:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:687
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[7].tableName}
		}
	case 81:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:692
		{
			yyVAL.statement = &DDL{Action: CreateDDLAction, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 82:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:696
		{
			yyVAL.statement = &DDL{Action: CreateDDLAction, Table: yyDollar[5].tableName.ToViewName()}
		}
	case 83:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:700
		{
			yyVAL.statement = &DBDDL{Action: CreateDBDDLAction, DBName: string(yyDollar[4].colIdent.String()), IfNotExists: yyDollar[3].boolean}
		}
	case 84:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:704
		{
			yyVAL.statement = &DBDDL{Action: CreateDBDDLAction, DBName: string(yyDollar[4].colIdent.String()), IfNotExists: yyDollar[3].boolean}
		}
	case 85:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:709
		{
			yyVAL.colIdent = NewColIdent("")
		}
	case 86:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:713
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 87:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:719
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 88:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:724
		{
			var v []VindexParam
			yyVAL.vindexParams = v
		}
	case 89:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:729
		{
			yyVAL.vindexParams = yyDollar[2].vindexParams
		}
	case 90:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:735
		{
			yyVAL.vindexParams = make([]VindexParam, 0, 4)
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[1].vindexParam)
		}
	case 91:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:740
		{
			yyVAL.vindexParams = append(yyVAL.vindexParams, yyDollar[3].vindexParam)
		}
	case 92:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:746
		{
			yyVAL.vindexParam = VindexParam{Key: yyDollar[1].colIdent, Val: yyDollar[3].str}
		}
	case 93:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:752
		{
			yyVAL.ddl = &DDL{Action: CreateDDLAction, Table: yyDollar[4].tableName}
			setDDL(yylex, yyVAL.ddl)
		}
	case 94:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:759
		{
			yyVAL.TableSpec = yyDollar[2].TableSpec
			yyVAL.TableSpec.Options = yyDollar[4].str
		}
	case 95:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:766
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[2].tableName}
		}
	case 96:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:770
		{
			yyVAL.optLike = &OptLike{LikeTable: yyDollar[3].tableName}
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:776
		{
			yyVAL.TableSpec = &TableSpec{}
			yyVAL.TableSpec.AddColumn(yyDollar[1].columnDefinition)
		}
	case 98:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:781
		{
			yyVAL.TableSpec.AddColumn(yyDollar[3].columnDefinition)
		}
	case 99:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:785
		{
			yyVAL.TableSpec.AddIndex(yyDollar[3].indexDefinition)
		}
	case 100:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:789
		{
			yyVAL.TableSpec.AddConstraint(yyDollar[3].constraintDefinition)
		}
	case 101:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:795
		{
			yyDollar[2].columnType.NotNull = yyDollar[3].boolean
			yyDollar[2].columnType.Default = yyDollar[4].optVal
			yyDollar[2].columnType.OnUpdate = yyDollar[5].optVal
			yyDollar[2].columnType.Autoincrement = yyDollar[6].boolean
			yyDollar[2].columnType.KeyOpt = yyDollar[7].colKeyOpt
			yyDollar[2].columnType.Comment = yyDollar[8].literal
			yyVAL.columnDefinition = &ColumnDefinition{Name: yyDollar[1].colIdent, Type: yyDollar[2].columnType}
		}
	case 102:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:806
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Unsigned = yyDollar[2].boolean
			yyVAL.columnType.Zerofill = yyDollar[3].boolean
		}
	case 106:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:817
		{
			yyVAL.columnType = yyDollar[1].columnType
			yyVAL.columnType.Length = yyDollar[2].literal
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:822
		{
			yyVAL.columnType = yyDollar[1].columnType
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:828
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:832
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:836
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:840
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:844
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:848
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:852
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 115:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:856
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:860
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 117:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:866
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:872
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 119:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:878
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 120:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:884
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 121:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:890
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
			yyVAL.columnType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.columnType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 122:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:898
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 123:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:902
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 124:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:906
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 125:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:910
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 126:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:914
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 127:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:920
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 128:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:924
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: yyDollar[3].str, Collate: yyDollar[4].str}
		}
	case 129:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:928
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 130:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:932
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 131:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:936
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 132:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:940
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 133:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:944
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 134:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:948
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), Charset: yyDollar[2].str, Collate: yyDollar[3].str}
		}
	case 135:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:952
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:956
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 137:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:960
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:964
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 139:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:968
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 140:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:972
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 141:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:977
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes), EnumValues: yyDollar[3].strs, Charset: yyDollar[5].str, Collate: yyDollar[6].str}
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:983
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 143:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:987
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:991
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 145:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:995
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 146:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:999
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 147:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1003
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1007
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 149:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1011
		{
			yyVAL.columnType = ColumnType{Type: string(yyDollar[1].bytes)}
		}
	case 150:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1017
		{
			yyVAL.strs = make([]string, 0, 4)
			yyVAL.strs = append(yyVAL.strs, "'"+string(yyDollar[1].bytes)+"'")
		}
	case 151:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1022
		{
			yyVAL.strs = append(yyDollar[1].strs, "'"+string(yyDollar[3].bytes)+"'")
		}
	case 152:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1027
		{
			yyVAL.literal = nil
		}
	case 153:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1031
		{
			yyVAL.literal = NewIntLiteral(yyDollar[2].bytes)
		}
	case 154:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1036
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 155:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1040
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(yyDollar[2].bytes),
				Scale:  NewIntLiteral(yyDollar[4].bytes),
			}
		}
	case 156:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1048
		{
			yyVAL.LengthScaleOption = LengthScaleOption{}
		}
	case 157:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1052
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(yyDollar[2].bytes),
			}
		}
	case 158:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1058
		{
			yyVAL.LengthScaleOption = LengthScaleOption{
				Length: NewIntLiteral(yyDollar[2].bytes),
				Scale:  NewIntLiteral(yyDollar[4].bytes),
			}
		}
	case 159:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1066
		{
			yyVAL.boolean = false
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1070
		{
			yyVAL.boolean = true
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1075
		{
			yyVAL.boolean = false
		}
	case 162:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1079
		{
			yyVAL.boolean = true
		}
	case 163:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1085
		{
			yyVAL.boolean = false
		}
	case 164:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1089
		{
			yyVAL.boolean = false
		}
	case 165:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1093
		{
			yyVAL.boolean = true
		}
	case 166:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1098
		{
			yyVAL.optVal = nil
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1102
		{
			yyVAL.optVal = yyDollar[2].expr
		}
	case 168:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1107
		{
			yyVAL.optVal = nil
		}
	case 169:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1111
		{
			yyVAL.optVal = yyDollar[3].expr
		}
	case 170:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1116
		{
			yyVAL.boolean = false
		}
	case 171:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1120
		{
			yyVAL.boolean = true
		}
	case 172:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1125
		{
			yyVAL.str = ""
		}
	case 173:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1129
		{
			yyVAL.str = string(yyDollar[3].colIdent.String())
		}
	case 174:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1133
		{
			yyVAL.str = string(yyDollar[3].bytes)
		}
	case 175:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1138
		{
			yyVAL.str = ""
		}
	case 176:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1142
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 177:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1146
		{
			yyVAL.str = string(yyDollar[2].bytes)
		}
	case 178:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1151
		{
			yyVAL.colKeyOpt = colKeyNone
		}
	case 179:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1155
		{
			yyVAL.colKeyOpt = colKeyPrimary
		}
	case 180:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1159
		{
			yyVAL.colKeyOpt = colKey
		}
	case 181:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1163
		{
			yyVAL.colKeyOpt = colKeyUniqueKey
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1167
		{
			yyVAL.colKeyOpt = colKeyUnique
		}
	case 183:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1172
		{
			yyVAL.literal = nil
		}
	case 184:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1176
		{
			yyVAL.literal = NewStrLiteral(yyDollar[2].bytes)
		}
	case 185:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1182
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns, Options: yyDollar[5].indexOptions}
		}
	case 186:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1186
		{
			yyVAL.indexDefinition = &IndexDefinition{Info: yyDollar[1].indexInfo, Columns: yyDollar[3].indexColumns}
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1192
		{
			yyVAL.indexOptions = []*IndexOption{yyDollar[1].indexOption}
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1196
		{
			yyVAL.indexOptions = append(yyVAL.indexOptions, yyDollar[2].indexOption)
		}
	case 189:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1202
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Using: string(yyDollar[2].colIdent.String())}
		}
	case 190:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1206
		{
			// should not be string
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewIntLiteral(yyDollar[3].bytes)}
		}
	case 191:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1211
		{
			yyVAL.indexOption = &IndexOption{Name: string(yyDollar[1].bytes), Value: NewStrLiteral(yyDollar[2].bytes)}
		}
	case 192:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1217
		{
			yyVAL.str = ""
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1221
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 194:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1227
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].bytes), Name: NewColIdent("PRIMARY"), Primary: true, Unique: true}
		}
	case 195:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1231
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Spatial: true, Unique: false}
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1235
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes) + " " + string(yyDollar[2].str), Name: NewColIdent(yyDollar[3].str), Unique: true}
		}
	case 197:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1239
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].bytes), Name: NewColIdent(yyDollar[2].str), Unique: true}
		}
	case 198:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1243
		{
			yyVAL.indexInfo = &IndexInfo{Type: string(yyDollar[1].str), Name: NewColIdent(yyDollar[2].str), Unique: false}
		}
	case 199:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1249
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1253
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 201:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1257
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1264
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 203:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1268
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 204:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1274
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1278
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 206:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1283
		{
			yyVAL.str = ""
		}
	case 207:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1287
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1293
		{
			yyVAL.indexColumns = []*IndexColumn{yyDollar[1].indexColumn}
		}
	case 209:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1297
		{
			yyVAL.indexColumns = append(yyVAL.indexColumns, yyDollar[3].indexColumn)
		}
	case 210:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1303
		{
			yyVAL.indexColumn = &IndexColumn{Column: yyDollar[1].colIdent, Length: yyDollar[2].literal}
		}
	case 211:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1309
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Name: string(yyDollar[2].colIdent.String()), Details: yyDollar[3].constraintInfo}
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1313
		{
			yyVAL.constraintDefinition = &ConstraintDefinition{Details: yyDollar[1].constraintInfo}
		}
	case 213:
		yyDollar = yyS[yypt-10 : yypt+1]
//line sql.y:1320
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns}
		}
	case 214:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1324
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction}
		}
	case 215:
		yyDollar = yyS[yypt-11 : yypt+1]
//line sql.y:1328
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnUpdate: yyDollar[11].ReferenceAction}
		}
	case 216:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1332
		{
			yyVAL.constraintInfo = &ForeignKeyDefinition{Source: yyDollar[4].columns, ReferencedTable: yyDollar[7].tableName, ReferencedColumns: yyDollar[9].columns, OnDelete: yyDollar[11].ReferenceAction, OnUpdate: yyDollar[12].ReferenceAction}
		}
	case 217:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1336
		{
			yyVAL.constraintInfo = &CheckConstraintDefinition{Expr: yyDollar[3].expr, Enforced: yyDollar[5].boolean}
		}
	case 218:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1342
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 219:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1348
		{
			yyVAL.ReferenceAction = yyDollar[3].ReferenceAction
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1354
		{
			yyVAL.ReferenceAction = Restrict
		}
	case 221:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1358
		{
			yyVAL.ReferenceAction = Cascade
		}
	case 222:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1362
		{
			yyVAL.ReferenceAction = NoAction
		}
	case 223:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1366
		{
			yyVAL.ReferenceAction = SetDefault
		}
	case 224:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1370
		{
			yyVAL.ReferenceAction = SetNull
		}
	case 225:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1375
		{
			yyVAL.boolean = true
		}
	case 226:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1379
		{
			yyVAL.boolean = true
		}
	case 227:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1383
		{
			yyVAL.boolean = false
		}
	case 228:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1388
		{
			yyVAL.str = ""
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1392
		{
			yyVAL.str = " " + string(yyDollar[1].str)
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1396
		{
			yyVAL.str = string(yyDollar[1].str) + ", " + string(yyDollar[3].str)
		}
	case 231:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1404
		{
			yyVAL.str = yyDollar[1].str
		}
	case 232:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1408
		{
			yyVAL.str = yyDollar[1].str + " " + yyDollar[2].str
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1412
		{
			yyVAL.str = yyDollar[1].str + "=" + yyDollar[3].str
		}
	case 234:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1418
		{
			yyVAL.str = yyDollar[1].colIdent.String()
		}
	case 235:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1422
		{
			yyVAL.str = "'" + string(yyDollar[1].bytes) + "'"
		}
	case 236:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1426
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 237:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1432
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, OnlineHint: yyDollar[2].OnlineDDLHint, Table: yyDollar[4].tableName}
		}
	case 238:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1436
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, OnlineHint: yyDollar[2].OnlineDDLHint, Table: yyDollar[4].tableName}
		}
	case 239:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1440
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, OnlineHint: yyDollar[2].OnlineDDLHint, Table: yyDollar[4].tableName}
		}
	case 240:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1444
		{
			// Change this to a rename statement
			yyVAL.statement = &DDL{Action: RenameDDLAction, FromTables: TableNames{yyDollar[4].tableName}, ToTables: TableNames{yyDollar[7].tableName}}
		}
	case 241:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1449
		{
			// Rename an index can just be an alter
			yyVAL.statement = &DDL{Action: AlterDDLAction, OnlineHint: yyDollar[2].OnlineDDLHint, Table: yyDollar[4].tableName}
		}
	case 242:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1454
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[3].tableName.ToViewName()}
		}
	case 243:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1458
		{
			yyVAL.statement = &DDL{Action: AlterDDLAction, OnlineHint: yyDollar[2].OnlineDDLHint, Table: yyDollar[4].tableName, PartitionSpec: yyDollar[5].partSpec}
		}
	case 244:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1462
		{
			yyVAL.statement = &DBDDL{Action: AlterDBDDLAction, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 245:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1466
		{
			yyVAL.statement = &DBDDL{Action: AlterDBDDLAction, DBName: string(yyDollar[3].colIdent.String())}
		}
	case 246:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1470
		{
			yyVAL.statement = &DDL{
				Action: CreateVindexDDLAction,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name:   NewColIdent(yyDollar[5].tableName.Name.String()),
					Type:   yyDollar[6].colIdent,
					Params: yyDollar[7].vindexParams,
				},
			}
		}
	case 247:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1482
		{
			yyVAL.statement = &DDL{
				Action: DropVindexDDLAction,
				Table:  yyDollar[5].tableName,
				VindexSpec: &VindexSpec{
					Name: NewColIdent(yyDollar[5].tableName.Name.String()),
				},
			}
		}
	case 248:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1492
		{
			yyVAL.statement = &DDL{Action: AddVschemaTableDDLAction, Table: yyDollar[5].tableName}
		}
	case 249:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1496
		{
			yyVAL.statement = &DDL{Action: DropVschemaTableDDLAction, Table: yyDollar[5].tableName}
		}
	case 250:
		yyDollar = yyS[yypt-12 : yypt+1]
//line sql.y:1500
		{
			yyVAL.statement = &DDL{
				Action: AddColVindexDDLAction,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name:   yyDollar[7].colIdent,
					Type:   yyDollar[11].colIdent,
					Params: yyDollar[12].vindexParams,
				},
				VindexCols: yyDollar[9].columns,
			}
		}
	case 251:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1513
		{
			yyVAL.statement = &DDL{
				Action: DropColVindexDDLAction,
				Table:  yyDollar[4].tableName,
				VindexSpec: &VindexSpec{
					Name: yyDollar[7].colIdent,
				},
			}
		}
	case 252:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1523
		{
			yyVAL.statement = &DDL{Action: AddSequenceDDLAction, Table: yyDollar[5].tableName}
		}
	case 253:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:1527
		{
			yyVAL.statement = &DDL{
				Action: AddAutoIncDDLAction,
				Table:  yyDollar[4].tableName,
				AutoIncSpec: &AutoIncSpec{
					Column:   yyDollar[7].colIdent,
					Sequence: yyDollar[9].tableName,
				},
			}
		}
	case 268:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1556
		{
			yyVAL.partSpec = &PartitionSpec{Action: ReorganizeAction, Name: yyDollar[3].colIdent, Definitions: yyDollar[6].partDefs}
		}
	case 269:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1562
		{
			yyVAL.partDefs = []*PartitionDefinition{yyDollar[1].partDef}
		}
	case 270:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1566
		{
			yyVAL.partDefs = append(yyDollar[1].partDefs, yyDollar[3].partDef)
		}
	case 271:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1572
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Limit: yyDollar[7].expr}
		}
	case 272:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:1576
		{
			yyVAL.partDef = &PartitionDefinition{Name: yyDollar[2].colIdent, Maxvalue: true}
		}
	case 273:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1582
		{
			yyVAL.statement = yyDollar[3].ddl
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1588
		{
			yyVAL.ddl = &DDL{Action: RenameDDLAction, FromTables: TableNames{yyDollar[1].tableName}, ToTables: TableNames{yyDollar[3].tableName}}
		}
	case 275:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1592
		{
			yyVAL.ddl = yyDollar[1].ddl
			yyVAL.ddl.FromTables = append(yyVAL.ddl.FromTables, yyDollar[3].tableName)
			yyVAL.ddl.ToTables = append(yyVAL.ddl.ToTables, yyDollar[5].tableName)
		}
	case 276:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1600
		{
			yyVAL.statement = &DDL{Action: DropDDLAction, FromTables: yyDollar[4].tableNames, IfExists: yyDollar[3].boolean}
		}
	case 277:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:1604
		{
			// Change this to an alter statement
			yyVAL.statement = &DDL{Action: AlterDDLAction, Table: yyDollar[5].tableName}
		}
	case 278:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1609
		{
			yyVAL.statement = &DDL{Action: DropDDLAction, FromTables: TableNames{yyDollar[4].tableName.ToViewName()}, IfExists: yyDollar[3].boolean}
		}
	case 279:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1613
		{
			yyVAL.statement = &DBDDL{Action: DropDBDDLAction, DBName: string(yyDollar[4].colIdent.String()), IfExists: yyDollar[3].boolean}
		}
	case 280:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1617
		{
			yyVAL.statement = &DBDDL{Action: DropDBDDLAction, DBName: string(yyDollar[4].colIdent.String()), IfExists: yyDollar[3].boolean}
		}
	case 281:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1623
		{
			yyVAL.statement = &DDL{Action: TruncateDDLAction, Table: yyDollar[3].tableName}
		}
	case 282:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1627
		{
			yyVAL.statement = &DDL{Action: TruncateDDLAction, Table: yyDollar[2].tableName}
		}
	case 283:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1632
		{
			yyVAL.statement = &OtherRead{}
		}
	case 284:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1638
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String()), Scope: ImplicitScope}
		}
	case 285:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1643
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Type: CharsetStr, ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}
		}
	case 286:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1648
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}
		}
	case 287:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1653
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}
		}
	case 288:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1658
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].colIdent.String()), Scope: ImplicitScope}
		}
	case 289:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1662
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}
		}
	case 290:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1666
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Table: yyDollar[4].tableName, Scope: ImplicitScope}
		}
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1670
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}
		}
	case 292:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1674
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}
		}
	case 293:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1678
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}
		}
	case 294:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1683
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}
		}
	case 295:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1688
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}
		}
	case 296:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1693
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}
		}
	case 297:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1697
		{
			showTablesOpt := &ShowTablesOpt{DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Extended: string(yyDollar[2].str), Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName, Scope: ImplicitScope}
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1702
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}
		}
	case 299:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1706
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}
		}
	case 300:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1710
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].scope, Type: string(yyDollar[3].bytes)}
		}
	case 301:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1714
		{
			yyVAL.statement = &ShowTableStatus{DatabaseName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
		}
	case 302:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:1718
		{
			showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[6].str, Filter: yyDollar[7].showFilter}
			yyVAL.statement = &Show{Type: string(yyDollar[3].str), ShowTablesOpt: showTablesOpt, OnTable: yyDollar[5].tableName, Scope: ImplicitScope}
		}
	case 303:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1723
		{
			// this is ugly, but I couldn't find a better way for now
			if yyDollar[3].str == "processlist" {
				yyVAL.statement = &Show{Type: yyDollar[3].str, Scope: ImplicitScope}
			} else {
				showTablesOpt := &ShowTablesOpt{Full: yyDollar[2].str, DbName: yyDollar[4].str, Filter: yyDollar[5].showFilter}
				yyVAL.statement = &Show{Type: yyDollar[3].str, ShowTablesOpt: showTablesOpt, Scope: ImplicitScope}
			}
		}
	case 304:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1733
		{
			yyVAL.statement = &Show{Scope: yyDollar[2].scope, Type: string(yyDollar[3].bytes)}
		}
	case 305:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1737
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}
		}
	case 306:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1741
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), ShowCollationFilterOpt: yyDollar[4].expr, Scope: ImplicitScope}
		}
	case 307:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:1745
		{
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[4].showFilter}
			yyVAL.statement = &Show{Scope: VitessMetadataScope, Type: string(yyDollar[3].bytes), ShowTablesOpt: showTablesOpt}
		}
	case 308:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1750
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}
		}
	case 309:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1754
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), Scope: ImplicitScope}
		}
	case 310:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1758
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes) + " " + string(yyDollar[3].bytes), OnTable: yyDollar[5].tableName, Scope: ImplicitScope}
		}
	case 311:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1762
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].bytes), Scope: ImplicitScope}
		}
	case 312:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1767
		{
			// This should probably be a different type (ShowVitessTopoOpt), but
			// just getting the thing working for now
			showTablesOpt := &ShowTablesOpt{Filter: yyDollar[3].showFilter}
			yyVAL.statement = &Show{Type: yyDollar[2].str, ShowTablesOpt: showTablesOpt}
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1781
		{
			yyVAL.statement = &Show{Type: string(yyDollar[2].colIdent.String()), Scope: ImplicitScope}
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1787
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 315:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1791
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 316:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1797
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 317:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1801
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 318:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1807
		{
			yyVAL.str = ""
		}
	case 319:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1811
		{
			yyVAL.str = "extended "
		}
	case 320:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1817
		{
			yyVAL.str = ""
		}
	case 321:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1821
		{
			yyVAL.str = "full "
		}
	case 322:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1827
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 323:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1831
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 324:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1837
		{
			yyVAL.str = ""
		}
	case 325:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1841
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 326:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1845
		{
			yyVAL.str = yyDollar[2].tableIdent.v
		}
	case 327:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1851
		{
			yyVAL.showFilter = nil
		}
	case 328:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1855
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 329:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1859
		{
			yyVAL.showFilter = &ShowFilter{Filter: yyDollar[2].expr}
		}
	case 330:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1865
		{
			yyVAL.showFilter = nil
		}
	case 331:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1869
		{
			yyVAL.showFilter = &ShowFilter{Like: string(yyDollar[2].bytes)}
		}
	case 332:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1875
		{
			yyVAL.scope = ImplicitScope
		}
	case 333:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1879
		{
			yyVAL.scope = SessionScope
		}
	case 334:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1883
		{
			yyVAL.scope = GlobalScope
		}
	case 335:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1889
		{
			yyVAL.statement = &Use{DBName: yyDollar[2].tableIdent}
		}
	case 336:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1893
		{
			yyVAL.statement = &Use{DBName: TableIdent{v: ""}}
		}
	case 337:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1899
		{
			yyVAL.statement = &Begin{}
		}
	case 338:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1903
		{
			yyVAL.statement = &Begin{}
		}
	case 339:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1909
		{
			yyVAL.statement = &Commit{}
		}
	case 340:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1915
		{
			yyVAL.statement = &Rollback{}
		}
	case 341:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:1919
		{
			yyVAL.statement = &SRollback{Name: yyDollar[5].colIdent}
		}
	case 342:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1924
		{
			yyVAL.empty = struct{}{}
		}
	case 343:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1926
		{
			yyVAL.empty = struct{}{}
		}
	case 344:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1929
		{
			yyVAL.empty = struct{}{}
		}
	case 345:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1931
		{
			yyVAL.empty = struct{}{}
		}
	case 346:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:1936
		{
			yyVAL.statement = &Savepoint{Name: yyDollar[2].colIdent}
		}
	case 347:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1942
		{
			yyVAL.statement = &Release{Name: yyDollar[3].colIdent}
		}
	case 348:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:1947
		{
			yyVAL.explainType = EmptyType
		}
	case 349:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1951
		{
			yyVAL.explainType = JSONType
		}
	case 350:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1955
		{
			yyVAL.explainType = TreeType
		}
	case 351:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1959
		{
			yyVAL.explainType = VitessType
		}
	case 352:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:1963
		{
			yyVAL.explainType = TraditionalType
		}
	case 353:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1967
		{
			yyVAL.explainType = AnalyzeType
		}
	case 354:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1973
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 355:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1977
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 356:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1981
		{
			yyVAL.bytes = yyDollar[1].bytes
		}
	case 357:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1987
		{
			yyVAL.statement = yyDollar[1].selStmt
		}
	case 358:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1991
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 359:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1995
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 360:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:1999
		{
			yyVAL.statement = yyDollar[1].statement
		}
	case 361:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2004
		{
			yyVAL.str = ""
		}
	case 362:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2008
		{
			yyVAL.str = ""
		}
	case 363:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2012
		{
			yyVAL.str = ""
		}
	case 364:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2018
		{
			yyVAL.statement = &OtherRead{}
		}
	case 365:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2022
		{
			yyVAL.statement = &Explain{Type: yyDollar[2].explainType, Statement: yyDollar[3].statement}
		}
	case 366:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2028
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 367:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2032
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 368:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2036
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 369:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2040
		{
			yyVAL.statement = &OtherAdmin{}
		}
	case 370:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2046
		{
			yyVAL.statement = &DDL{Action: FlushDDLAction}
		}
	case 371:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2050
		{
			setAllowComments(yylex, true)
		}
	case 372:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2054
		{
			yyVAL.bytes2 = yyDollar[2].bytes2
			setAllowComments(yylex, false)
		}
	case 373:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2060
		{
			yyVAL.bytes2 = nil
		}
	case 374:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2064
		{
			yyVAL.bytes2 = append(yyDollar[1].bytes2, yyDollar[2].bytes)
		}
	case 375:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2070
		{
			yyVAL.unionType = UnionBasic
		}
	case 376:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2074
		{
			yyVAL.unionType = UnionAll
		}
	case 377:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2078
		{
			yyVAL.unionType = UnionDistinct
		}
	case 378:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2083
		{
			yyVAL.str = ""
		}
	case 379:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2087
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 380:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2091
		{
			yyVAL.str = SQLCacheStr
		}
	case 381:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2096
		{
			yyVAL.boolean = false
		}
	case 382:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2100
		{
			yyVAL.boolean = true
		}
	case 383:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2104
		{
			yyVAL.boolean = true
		}
	case 384:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2109
		{
			yyVAL.selectExprs = nil
		}
	case 385:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2113
		{
			yyVAL.selectExprs = yyDollar[1].selectExprs
		}
	case 386:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2118
		{
			yyVAL.strs = nil
		}
	case 387:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2122
		{
			yyVAL.strs = []string{yyDollar[1].str}
		}
	case 388:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2126
		{ // TODO: This is a hack since I couldn't get it to work in a nicer way. I got 'conflicts: 8 shift/reduce'
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str}
		}
	case 389:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2130
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str}
		}
	case 390:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2134
		{
			yyVAL.strs = []string{yyDollar[1].str, yyDollar[2].str, yyDollar[3].str, yyDollar[4].str}
		}
	case 391:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2140
		{
			yyVAL.str = SQLNoCacheStr
		}
	case 392:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2144
		{
			yyVAL.str = SQLCacheStr
		}
	case 393:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2148
		{
			yyVAL.str = DistinctStr
		}
	case 394:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2152
		{
			yyVAL.str = DistinctStr
		}
	case 395:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2156
		{
			yyVAL.str = StraightJoinHint
		}
	case 396:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2160
		{
			yyVAL.str = SQLCalcFoundRowsStr
		}
	case 397:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2166
		{
			yyVAL.selectExprs = SelectExprs{yyDollar[1].selectExpr}
		}
	case 398:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2170
		{
			yyVAL.selectExprs = append(yyVAL.selectExprs, yyDollar[3].selectExpr)
		}
	case 399:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2176
		{
			yyVAL.selectExpr = &StarExpr{}
		}
	case 400:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2180
		{
			yyVAL.selectExpr = &AliasedExpr{Expr: yyDollar[1].expr, As: yyDollar[2].colIdent}
		}
	case 401:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2184
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Name: yyDollar[1].tableIdent}}
		}
	case 402:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2188
		{
			yyVAL.selectExpr = &StarExpr{TableName: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}}
		}
	case 403:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2193
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 404:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2197
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 405:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2201
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 407:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2208
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 408:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2213
		{
			yyVAL.tableExprs = TableExprs{&AliasedTableExpr{Expr: TableName{Name: NewTableIdent("dual")}}}
		}
	case 409:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2217
		{
			yyVAL.tableExprs = yyDollar[2].tableExprs
		}
	case 410:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2223
		{
			yyVAL.tableExprs = TableExprs{yyDollar[1].tableExpr}
		}
	case 411:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2227
		{
			yyVAL.tableExprs = append(yyVAL.tableExprs, yyDollar[3].tableExpr)
		}
	case 414:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2237
		{
			yyVAL.tableExpr = yyDollar[1].aliasedTableName
		}
	case 415:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2241
		{
			yyVAL.tableExpr = &AliasedTableExpr{Expr: yyDollar[1].subquery, As: yyDollar[3].tableIdent}
		}
	case 416:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2245
		{
			yyVAL.tableExpr = &ParenTableExpr{Exprs: yyDollar[2].tableExprs}
		}
	case 417:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2251
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 418:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2257
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, As: yyDollar[2].tableIdent, Hints: yyDollar[3].indexHints}
		}
	case 419:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:2261
		{
			yyVAL.aliasedTableName = &AliasedTableExpr{Expr: yyDollar[1].tableName, Partitions: yyDollar[4].partitions, As: yyDollar[6].tableIdent, Hints: yyDollar[7].indexHints}
		}
	case 420:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2267
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 421:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2271
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 422:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2277
		{
			yyVAL.partitions = Partitions{yyDollar[1].colIdent}
		}
	case 423:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2281
		{
			yyVAL.partitions = append(yyVAL.partitions, yyDollar[3].colIdent)
		}
	case 424:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2294
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 425:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2298
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 426:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2302
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr, Condition: yyDollar[4].joinCondition}
		}
	case 427:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2306
		{
			yyVAL.tableExpr = &JoinTableExpr{LeftExpr: yyDollar[1].tableExpr, Join: yyDollar[2].joinType, RightExpr: yyDollar[3].tableExpr}
		}
	case 428:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2312
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 429:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2314
		{
			yyVAL.joinCondition = JoinCondition{Using: yyDollar[3].columns}
		}
	case 430:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2318
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 431:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2320
		{
			yyVAL.joinCondition = yyDollar[1].joinCondition
		}
	case 432:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2324
		{
			yyVAL.joinCondition = JoinCondition{}
		}
	case 433:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2326
		{
			yyVAL.joinCondition = JoinCondition{On: yyDollar[2].expr}
		}
	case 434:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2329
		{
			yyVAL.empty = struct{}{}
		}
	case 435:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2331
		{
			yyVAL.empty = struct{}{}
		}
	case 436:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2334
		{
			yyVAL.tableIdent = NewTableIdent("")
		}
	case 437:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2338
		{
			yyVAL.tableIdent = yyDollar[1].tableIdent
		}
	case 438:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2342
		{
			yyVAL.tableIdent = yyDollar[2].tableIdent
		}
	case 440:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2349
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 441:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2355
		{
			yyVAL.joinType = NormalJoinType
		}
	case 442:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2359
		{
			yyVAL.joinType = NormalJoinType
		}
	case 443:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2363
		{
			yyVAL.joinType = NormalJoinType
		}
	case 444:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2369
		{
			yyVAL.joinType = StraightJoinType
		}
	case 445:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2375
		{
			yyVAL.joinType = LeftJoinType
		}
	case 446:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2379
		{
			yyVAL.joinType = LeftJoinType
		}
	case 447:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2383
		{
			yyVAL.joinType = RightJoinType
		}
	case 448:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2387
		{
			yyVAL.joinType = RightJoinType
		}
	case 449:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2393
		{
			yyVAL.joinType = NaturalJoinType
		}
	case 450:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2397
		{
			if yyDollar[2].joinType == LeftJoinType {
				yyVAL.joinType = NaturalLeftJoinType
			} else {
				yyVAL.joinType = NaturalRightJoinType
			}
		}
	case 451:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2407
		{
			yyVAL.tableName = yyDollar[2].tableName
		}
	case 452:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2411
		{
			yyVAL.tableName = yyDollar[1].tableName
		}
	case 453:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2417
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 454:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2421
		{
			yyVAL.tableName = TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}
		}
	case 455:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2427
		{
			yyVAL.tableName = TableName{Name: yyDollar[1].tableIdent}
		}
	case 456:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2432
		{
			yyVAL.indexHints = nil
		}
	case 457:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2436
		{
			yyVAL.indexHints = &IndexHints{Type: UseOp, Indexes: yyDollar[4].columns}
		}
	case 458:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2440
		{
			yyVAL.indexHints = &IndexHints{Type: UseOp}
		}
	case 459:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2444
		{
			yyVAL.indexHints = &IndexHints{Type: IgnoreOp, Indexes: yyDollar[4].columns}
		}
	case 460:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2448
		{
			yyVAL.indexHints = &IndexHints{Type: ForceOp, Indexes: yyDollar[4].columns}
		}
	case 461:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2453
		{
			yyVAL.expr = nil
		}
	case 462:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2457
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 463:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2463
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 464:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2467
		{
			yyVAL.expr = &AndExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 465:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2471
		{
			yyVAL.expr = &OrExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 466:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2475
		{
			yyVAL.expr = &XorExpr{Left: yyDollar[1].expr, Right: yyDollar[3].expr}
		}
	case 467:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2479
		{
			yyVAL.expr = &NotExpr{Expr: yyDollar[2].expr}
		}
	case 468:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2483
		{
			yyVAL.expr = &IsExpr{Operator: yyDollar[3].isExprOperator, Expr: yyDollar[1].expr}
		}
	case 469:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2487
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 470:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2491
		{
			yyVAL.expr = &Default{ColName: yyDollar[2].str}
		}
	case 471:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2497
		{
			yyVAL.str = ""
		}
	case 472:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2501
		{
			yyVAL.str = string(yyDollar[2].colIdent.String())
		}
	case 473:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2507
		{
			yyVAL.boolVal = BoolVal(true)
		}
	case 474:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2511
		{
			yyVAL.boolVal = BoolVal(false)
		}
	case 475:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2517
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: yyDollar[2].comparisonExprOperator, Right: yyDollar[3].expr}
		}
	case 476:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2521
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: InOp, Right: yyDollar[3].colTuple}
		}
	case 477:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2525
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotInOp, Right: yyDollar[4].colTuple}
		}
	case 478:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2529
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: LikeOp, Right: yyDollar[3].expr, Escape: yyDollar[4].expr}
		}
	case 479:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2533
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotLikeOp, Right: yyDollar[4].expr, Escape: yyDollar[5].expr}
		}
	case 480:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2537
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: RegexpOp, Right: yyDollar[3].expr}
		}
	case 481:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2541
		{
			yyVAL.expr = &ComparisonExpr{Left: yyDollar[1].expr, Operator: NotRegexpOp, Right: yyDollar[4].expr}
		}
	case 482:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2545
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: BetweenOp, From: yyDollar[3].expr, To: yyDollar[5].expr}
		}
	case 483:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2549
		{
			yyVAL.expr = &RangeCond{Left: yyDollar[1].expr, Operator: NotBetweenOp, From: yyDollar[4].expr, To: yyDollar[6].expr}
		}
	case 484:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2553
		{
			yyVAL.expr = &ExistsExpr{Subquery: yyDollar[2].subquery}
		}
	case 485:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2559
		{
			yyVAL.isExprOperator = IsNullOp
		}
	case 486:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2563
		{
			yyVAL.isExprOperator = IsNotNullOp
		}
	case 487:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2567
		{
			yyVAL.isExprOperator = IsTrueOp
		}
	case 488:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2571
		{
			yyVAL.isExprOperator = IsNotTrueOp
		}
	case 489:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2575
		{
			yyVAL.isExprOperator = IsFalseOp
		}
	case 490:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2579
		{
			yyVAL.isExprOperator = IsNotFalseOp
		}
	case 491:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2585
		{
			yyVAL.comparisonExprOperator = EqualOp
		}
	case 492:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2589
		{
			yyVAL.comparisonExprOperator = LessThanOp
		}
	case 493:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2593
		{
			yyVAL.comparisonExprOperator = GreaterThanOp
		}
	case 494:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2597
		{
			yyVAL.comparisonExprOperator = LessEqualOp
		}
	case 495:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2601
		{
			yyVAL.comparisonExprOperator = GreaterEqualOp
		}
	case 496:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2605
		{
			yyVAL.comparisonExprOperator = NotEqualOp
		}
	case 497:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2609
		{
			yyVAL.comparisonExprOperator = NullSafeEqualOp
		}
	case 498:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:2614
		{
			yyVAL.expr = nil
		}
	case 499:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2618
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 500:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2624
		{
			yyVAL.colTuple = yyDollar[1].valTuple
		}
	case 501:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2628
		{
			yyVAL.colTuple = yyDollar[1].subquery
		}
	case 502:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2632
		{
			yyVAL.colTuple = ListArg(yyDollar[1].bytes)
		}
	case 503:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2638
		{
			yyVAL.subquery = &Subquery{yyDollar[2].selStmt}
		}
	case 504:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2644
		{
			yyVAL.exprs = Exprs{yyDollar[1].expr}
		}
	case 505:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2648
		{
			yyVAL.exprs = append(yyDollar[1].exprs, yyDollar[3].expr)
		}
	case 506:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2654
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 507:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2658
		{
			yyVAL.expr = yyDollar[1].boolVal
		}
	case 508:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2662
		{
			yyVAL.expr = yyDollar[1].colName
		}
	case 509:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2666
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 510:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:2670
		{
			yyVAL.expr = yyDollar[1].subquery
		}
	case 511:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2674
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitAndOp, Right: yyDollar[3].expr}
		}
	case 512:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2678
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitOrOp, Right: yyDollar[3].expr}
		}
	case 513:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2682
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: BitXorOp, Right: yyDollar[3].expr}
		}
	case 514:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2686
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: PlusOp, Right: yyDollar[3].expr}
		}
	case 515:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2690
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MinusOp, Right: yyDollar[3].expr}
		}
	case 516:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2694
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: MultOp, Right: yyDollar[3].expr}
		}
	case 517:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2698
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: DivOp, Right: yyDollar[3].expr}
		}
	case 518:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2702
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: IntDivOp, Right: yyDollar[3].expr}
		}
	case 519:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2706
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModOp, Right: yyDollar[3].expr}
		}
	case 520:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2710
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ModOp, Right: yyDollar[3].expr}
		}
	case 521:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2714
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftLeftOp, Right: yyDollar[3].expr}
		}
	case 522:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2718
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].expr, Operator: ShiftRightOp, Right: yyDollar[3].expr}
		}
	case 523:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2722
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONExtractOp, Right: yyDollar[3].expr}
		}
	case 524:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2726
		{
			yyVAL.expr = &BinaryExpr{Left: yyDollar[1].colName, Operator: JSONUnquoteExtractOp, Right: yyDollar[3].expr}
		}
	case 525:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2730
		{
			yyVAL.expr = &CollateExpr{Expr: yyDollar[1].expr, Charset: yyDollar[3].str}
		}
	case 526:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2734
		{
			yyVAL.expr = &UnaryExpr{Operator: BinaryOp, Expr: yyDollar[2].expr}
		}
	case 527:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2738
		{
			yyVAL.expr = &UnaryExpr{Operator: UBinaryOp, Expr: yyDollar[2].expr}
		}
	case 528:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2742
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8Op, Expr: yyDollar[2].expr}
		}
	case 529:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2746
		{
			yyVAL.expr = &UnaryExpr{Operator: Utf8mb4Op, Expr: yyDollar[2].expr}
		}
	case 530:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2750
		{
			yyVAL.expr = &UnaryExpr{Operator: Latin1Op, Expr: yyDollar[2].expr}
		}
	case 531:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2754
		{
			if num, ok := yyDollar[2].expr.(*Literal); ok && num.Type == IntVal {
				yyVAL.expr = num
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UPlusOp, Expr: yyDollar[2].expr}
			}
		}
	case 532:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2762
		{
			if num, ok := yyDollar[2].expr.(*Literal); ok && num.Type == IntVal {
				// Handle double negative
				if num.Val[0] == '-' {
					num.Val = num.Val[1:]
					yyVAL.expr = num
				} else {
					yyVAL.expr = NewIntLiteral(append([]byte("-"), num.Val...))
				}
			} else {
				yyVAL.expr = &UnaryExpr{Operator: UMinusOp, Expr: yyDollar[2].expr}
			}
		}
	case 533:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2776
		{
			yyVAL.expr = &UnaryExpr{Operator: TildaOp, Expr: yyDollar[2].expr}
		}
	case 534:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2780
		{
			yyVAL.expr = &UnaryExpr{Operator: BangOp, Expr: yyDollar[2].expr}
		}
	case 535:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2784
		{
			// This rule prevents the usage of INTERVAL
			// as a function. If support is needed for that,
			// we'll need to revisit this. The solution
			// will be non-trivial because of grammar conflicts.
			yyVAL.expr = &IntervalExpr{Expr: yyDollar[2].expr, Unit: yyDollar[3].colIdent.String()}
		}
	case 540:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2802
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Exprs: yyDollar[3].selectExprs}
		}
	case 541:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2806
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 542:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2810
		{
			yyVAL.expr = &FuncExpr{Name: yyDollar[1].colIdent, Distinct: true, Exprs: yyDollar[4].selectExprs}
		}
	case 543:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2814
		{
			yyVAL.expr = &FuncExpr{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].colIdent, Exprs: yyDollar[5].selectExprs}
		}
	case 544:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2824
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("left"), Exprs: yyDollar[3].selectExprs}
		}
	case 545:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2828
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("right"), Exprs: yyDollar[3].selectExprs}
		}
	case 546:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2832
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 547:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2836
		{
			yyVAL.expr = &ConvertExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].convertType}
		}
	case 548:
		yyDollar = yyS[yypt-6 : yypt+1]
//line sql.y:2840
		{
			yyVAL.expr = &ConvertUsingExpr{Expr: yyDollar[3].expr, Type: yyDollar[5].str}
		}
	case 549:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2844
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 550:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2848
		{
			yyVAL.expr = &SubstrExpr{Name: yyDollar[3].colName, From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 551:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2852
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrLiteral(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 552:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2856
		{
			yyVAL.expr = &SubstrExpr{StrVal: NewStrLiteral(yyDollar[3].bytes), From: yyDollar[5].expr, To: yyDollar[7].expr}
		}
	case 553:
		yyDollar = yyS[yypt-9 : yypt+1]
//line sql.y:2860
		{
			yyVAL.expr = &MatchExpr{Columns: yyDollar[3].selectExprs, Expr: yyDollar[7].expr, Option: yyDollar[8].matchExprOption}
		}
	case 554:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2864
		{
			yyVAL.expr = &GroupConcatExpr{Distinct: yyDollar[3].boolean, Exprs: yyDollar[4].selectExprs, OrderBy: yyDollar[5].orderBy, Separator: yyDollar[6].str, Limit: yyDollar[7].limit}
		}
	case 555:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:2868
		{
			yyVAL.expr = &CaseExpr{Expr: yyDollar[2].expr, Whens: yyDollar[3].whens, Else: yyDollar[4].expr}
		}
	case 556:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2872
		{
			yyVAL.expr = &ValuesFuncExpr{Name: yyDollar[3].colName}
		}
	case 557:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2882
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_timestamp")}
		}
	case 558:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2886
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_timestamp")}
		}
	case 559:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2890
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_time")}
		}
	case 560:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2895
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("utc_date")}
		}
	case 561:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2900
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtime")}
		}
	case 562:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2905
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("localtimestamp")}
		}
	case 563:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2911
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_date")}
		}
	case 564:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2916
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("current_time")}
		}
	case 565:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2921
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 566:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2925
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_timestamp"), Fsp: yyDollar[2].expr}
		}
	case 567:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2929
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("utc_time"), Fsp: yyDollar[2].expr}
		}
	case 568:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2934
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtime"), Fsp: yyDollar[2].expr}
		}
	case 569:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2939
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("localtimestamp"), Fsp: yyDollar[2].expr}
		}
	case 570:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:2944
		{
			yyVAL.expr = &CurTimeFuncExpr{Name: NewColIdent("current_time"), Fsp: yyDollar[2].expr}
		}
	case 571:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2948
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampadd"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 572:
		yyDollar = yyS[yypt-8 : yypt+1]
//line sql.y:2952
		{
			yyVAL.expr = &TimestampFuncExpr{Name: string("timestampdiff"), Unit: yyDollar[3].colIdent.String(), Expr1: yyDollar[5].expr, Expr2: yyDollar[7].expr}
		}
	case 575:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:2962
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 576:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2972
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("if"), Exprs: yyDollar[3].selectExprs}
		}
	case 577:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2976
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("database"), Exprs: yyDollar[3].selectExprs}
		}
	case 578:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2980
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("schema"), Exprs: yyDollar[3].selectExprs}
		}
	case 579:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2984
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("mod"), Exprs: yyDollar[3].selectExprs}
		}
	case 580:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2988
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("replace"), Exprs: yyDollar[3].selectExprs}
		}
	case 581:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2992
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 582:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:2996
		{
			yyVAL.expr = &FuncExpr{Name: NewColIdent("substr"), Exprs: yyDollar[3].selectExprs}
		}
	case 583:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3002
		{
			yyVAL.matchExprOption = NoOption
		}
	case 584:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3006
		{
			yyVAL.matchExprOption = BooleanModeOpt
		}
	case 585:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3010
		{
			yyVAL.matchExprOption = NaturalLanguageModeOpt
		}
	case 586:
		yyDollar = yyS[yypt-7 : yypt+1]
//line sql.y:3014
		{
			yyVAL.matchExprOption = NaturalLanguageModeWithQueryExpansionOpt
		}
	case 587:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3018
		{
			yyVAL.matchExprOption = QueryExpansionOpt
		}
	case 588:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3024
		{
			yyVAL.str = string(yyDollar[1].colIdent.String())
		}
	case 589:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3028
		{
			yyVAL.str = string(yyDollar[1].bytes)
		}
	case 590:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3034
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 591:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3038
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: yyDollar[3].str, Operator: CharacterSetOp}
		}
	case 592:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3042
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal, Charset: string(yyDollar[3].colIdent.String())}
		}
	case 593:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3046
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 594:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3050
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 595:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3054
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
			yyVAL.convertType.Length = yyDollar[2].LengthScaleOption.Length
			yyVAL.convertType.Scale = yyDollar[2].LengthScaleOption.Scale
		}
	case 596:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3060
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 597:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3064
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 598:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3068
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 599:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3072
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 600:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3076
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes), Length: yyDollar[2].literal}
		}
	case 601:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3080
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 602:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3084
		{
			yyVAL.convertType = &ConvertType{Type: string(yyDollar[1].bytes)}
		}
	case 603:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3089
		{
			yyVAL.expr = nil
		}
	case 604:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3093
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 605:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3098
		{
			yyVAL.str = string("")
		}
	case 606:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3102
		{
			yyVAL.str = " separator '" + string(yyDollar[2].bytes) + "'"
		}
	case 607:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3108
		{
			yyVAL.whens = []*When{yyDollar[1].when}
		}
	case 608:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3112
		{
			yyVAL.whens = append(yyDollar[1].whens, yyDollar[2].when)
		}
	case 609:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3118
		{
			yyVAL.when = &When{Cond: yyDollar[2].expr, Val: yyDollar[4].expr}
		}
	case 610:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3123
		{
			yyVAL.expr = nil
		}
	case 611:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3127
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 612:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3133
		{
			yyVAL.colName = &ColName{Name: yyDollar[1].colIdent}
		}
	case 613:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3137
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Name: yyDollar[1].tableIdent}, Name: yyDollar[3].colIdent}
		}
	case 614:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3141
		{
			yyVAL.colName = &ColName{Qualifier: TableName{Qualifier: yyDollar[1].tableIdent, Name: yyDollar[3].tableIdent}, Name: yyDollar[5].colIdent}
		}
	case 615:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3147
		{
			yyVAL.expr = NewStrLiteral(yyDollar[1].bytes)
		}
	case 616:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3151
		{
			yyVAL.expr = NewHexLiteral(yyDollar[1].bytes)
		}
	case 617:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3155
		{
			yyVAL.expr = NewBitLiteral(yyDollar[1].bytes)
		}
	case 618:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3159
		{
			yyVAL.expr = NewIntLiteral(yyDollar[1].bytes)
		}
	case 619:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3163
		{
			yyVAL.expr = NewFloatLiteral(yyDollar[1].bytes)
		}
	case 620:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3167
		{
			yyVAL.expr = NewHexNumLiteral(yyDollar[1].bytes)
		}
	case 621:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3171
		{
			yyVAL.expr = NewArgument(yyDollar[1].bytes)
		}
	case 622:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3175
		{
			yyVAL.expr = &NullVal{}
		}
	case 623:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3181
		{
			// TODO(sougou): Deprecate this construct.
			if yyDollar[1].colIdent.Lowered() != "value" {
				yylex.Error("expecting value after next")
				return 1
			}
			yyVAL.expr = NewIntLiteral([]byte("1"))
		}
	case 624:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3190
		{
			yyVAL.expr = NewIntLiteral(yyDollar[1].bytes)
		}
	case 625:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3194
		{
			yyVAL.expr = NewArgument(yyDollar[1].bytes)
		}
	case 626:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3199
		{
			yyVAL.exprs = nil
		}
	case 627:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3203
		{
			yyVAL.exprs = yyDollar[3].exprs
		}
	case 628:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3208
		{
			yyVAL.expr = nil
		}
	case 629:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3212
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 630:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3217
		{
			yyVAL.orderBy = nil
		}
	case 631:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3221
		{
			yyVAL.orderBy = yyDollar[3].orderBy
		}
	case 632:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3227
		{
			yyVAL.orderBy = OrderBy{yyDollar[1].order}
		}
	case 633:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3231
		{
			yyVAL.orderBy = append(yyDollar[1].orderBy, yyDollar[3].order)
		}
	case 634:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3237
		{
			yyVAL.order = &Order{Expr: yyDollar[1].expr, Direction: yyDollar[2].orderDirection}
		}
	case 635:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3242
		{
			yyVAL.orderDirection = AscOrder
		}
	case 636:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3246
		{
			yyVAL.orderDirection = AscOrder
		}
	case 637:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3250
		{
			yyVAL.orderDirection = DescOrder
		}
	case 638:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3255
		{
			yyVAL.limit = nil
		}
	case 639:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3259
		{
			yyVAL.limit = &Limit{Rowcount: yyDollar[2].expr}
		}
	case 640:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3263
		{
			yyVAL.limit = &Limit{Offset: yyDollar[2].expr, Rowcount: yyDollar[4].expr}
		}
	case 641:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3267
		{
			yyVAL.limit = &Limit{Offset: yyDollar[4].expr, Rowcount: yyDollar[2].expr}
		}
	case 642:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3272
		{
			yyVAL.lock = NoLock
		}
	case 643:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3276
		{
			yyVAL.lock = ForUpdateLock
		}
	case 644:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3280
		{
			yyVAL.lock = ShareModeLock
		}
	case 645:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3285
		{
			yyVAL.str = ""
		}
	case 646:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3289
		{
			yyVAL.str = string(yyDollar[4].bytes)
		}
	case 647:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3302
		{
			yyVAL.ins = &Insert{Rows: yyDollar[2].values}
		}
	case 648:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3306
		{
			yyVAL.ins = &Insert{Rows: yyDollar[1].selStmt}
		}
	case 649:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3310
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[5].values}
		}
	case 650:
		yyDollar = yyS[yypt-4 : yypt+1]
//line sql.y:3314
		{
			yyVAL.ins = &Insert{Columns: yyDollar[2].columns, Rows: yyDollar[4].selStmt}
		}
	case 651:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3320
		{
			yyVAL.columns = Columns{yyDollar[1].colIdent}
		}
	case 652:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3324
		{
			yyVAL.columns = Columns{yyDollar[3].colIdent}
		}
	case 653:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3328
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[3].colIdent)
		}
	case 654:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3332
		{
			yyVAL.columns = append(yyVAL.columns, yyDollar[5].colIdent)
		}
	case 655:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3337
		{
			yyVAL.updateExprs = nil
		}
	case 656:
		yyDollar = yyS[yypt-5 : yypt+1]
//line sql.y:3341
		{
			yyVAL.updateExprs = yyDollar[5].updateExprs
		}
	case 657:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3347
		{
			yyVAL.values = Values{yyDollar[1].valTuple}
		}
	case 658:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3351
		{
			yyVAL.values = append(yyDollar[1].values, yyDollar[3].valTuple)
		}
	case 659:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3357
		{
			yyVAL.valTuple = yyDollar[1].valTuple
		}
	case 660:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3361
		{
			yyVAL.valTuple = ValTuple{}
		}
	case 661:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3367
		{
			yyVAL.valTuple = ValTuple(yyDollar[2].exprs)
		}
	case 662:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3373
		{
			if len(yyDollar[1].valTuple) == 1 {
				yyVAL.expr = yyDollar[1].valTuple[0]
			} else {
				yyVAL.expr = yyDollar[1].valTuple
			}
		}
	case 663:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3383
		{
			yyVAL.updateExprs = UpdateExprs{yyDollar[1].updateExpr}
		}
	case 664:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3387
		{
			yyVAL.updateExprs = append(yyDollar[1].updateExprs, yyDollar[3].updateExpr)
		}
	case 665:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3393
		{
			yyVAL.updateExpr = &UpdateExpr{Name: yyDollar[1].colName, Expr: yyDollar[3].expr}
		}
	case 666:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3399
		{
			yyVAL.setExprs = SetExprs{yyDollar[1].setExpr}
		}
	case 667:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3403
		{
			yyVAL.setExprs = append(yyDollar[1].setExprs, yyDollar[3].setExpr)
		}
	case 668:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3409
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Scope: ImplicitScope, Expr: NewStrLiteral([]byte("on"))}
		}
	case 669:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3413
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Scope: ImplicitScope, Expr: NewStrLiteral([]byte("off"))}
		}
	case 670:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3417
		{
			yyVAL.setExpr = &SetExpr{Name: yyDollar[1].colIdent, Scope: ImplicitScope, Expr: yyDollar[3].expr}
		}
	case 671:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3421
		{
			yyVAL.setExpr = &SetExpr{Name: NewColIdent(string(yyDollar[1].bytes)), Scope: ImplicitScope, Expr: yyDollar[2].expr}
		}
	case 672:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3425
		{
			yyDollar[2].setExpr.Scope = yyDollar[1].scope
			yyVAL.setExpr = yyDollar[2].setExpr
		}
	case 674:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3433
		{
			yyVAL.bytes = []byte("charset")
		}
	case 676:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3440
		{
			yyVAL.expr = NewStrLiteral([]byte(yyDollar[1].colIdent.String()))
		}
	case 677:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3444
		{
			yyVAL.expr = NewStrLiteral(yyDollar[1].bytes)
		}
	case 678:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3448
		{
			yyVAL.expr = &Default{}
		}
	case 681:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3457
		{
			yyVAL.boolean = false
		}
	case 682:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3459
		{
			yyVAL.boolean = true
		}
	case 683:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3462
		{
			yyVAL.boolean = false
		}
	case 684:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3464
		{
			yyVAL.boolean = true
		}
	case 685:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3467
		{
			yyVAL.ignore = false
		}
	case 686:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3469
		{
			yyVAL.ignore = true
		}
	case 687:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3473
		{
			yyVAL.empty = struct{}{}
		}
	case 688:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3475
		{
			yyVAL.empty = struct{}{}
		}
	case 689:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3477
		{
			yyVAL.empty = struct{}{}
		}
	case 690:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3479
		{
			yyVAL.empty = struct{}{}
		}
	case 691:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3481
		{
			yyVAL.empty = struct{}{}
		}
	case 692:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3483
		{
			yyVAL.empty = struct{}{}
		}
	case 693:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3485
		{
			yyVAL.empty = struct{}{}
		}
	case 694:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3487
		{
			yyVAL.empty = struct{}{}
		}
	case 695:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3489
		{
			yyVAL.empty = struct{}{}
		}
	case 696:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3491
		{
			yyVAL.empty = struct{}{}
		}
	case 697:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3495
		{
			yyVAL.OnlineDDLHint = &OnlineDDLHint{}
		}
	case 698:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3499
		{
			yyVAL.OnlineDDLHint = &OnlineDDLHint{
				Strategy: DDLStrategy(yyDollar[2].bytes),
			}
		}
	case 699:
		yyDollar = yyS[yypt-3 : yypt+1]
//line sql.y:3505
		{
			yyVAL.OnlineDDLHint = &OnlineDDLHint{
				Strategy: DDLStrategy(yyDollar[2].bytes),
				Options:  string(yyDollar[3].bytes),
			}
		}
	case 700:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3513
		{
			yyVAL.empty = struct{}{}
		}
	case 701:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3515
		{
			yyVAL.empty = struct{}{}
		}
	case 702:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3517
		{
			yyVAL.empty = struct{}{}
		}
	case 703:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3521
		{
			yyVAL.empty = struct{}{}
		}
	case 704:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3523
		{
			yyVAL.empty = struct{}{}
		}
	case 705:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3526
		{
			yyVAL.empty = struct{}{}
		}
	case 706:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3528
		{
			yyVAL.empty = struct{}{}
		}
	case 707:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3530
		{
			yyVAL.empty = struct{}{}
		}
	case 708:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3533
		{
			yyVAL.colIdent = ColIdent{}
		}
	case 709:
		yyDollar = yyS[yypt-2 : yypt+1]
//line sql.y:3535
		{
			yyVAL.colIdent = yyDollar[2].colIdent
		}
	case 710:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3539
		{
			yyVAL.colIdent = yyDollar[1].colIdent
		}
	case 711:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3543
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 713:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3550
		{
			yyVAL.colIdent = NewColIdent(string(yyDollar[1].bytes))
		}
	case 714:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3556
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].colIdent.String()))
		}
	case 715:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3560
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 717:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3567
		{
			yyVAL.tableIdent = NewTableIdent(string(yyDollar[1].bytes))
		}
	case 1020:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3895
		{
			if incNesting(yylex) {
				yylex.Error("max nesting level reached")
				return 1
			}
		}
	case 1021:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3904
		{
			decNesting(yylex)
		}
	case 1022:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3909
		{
			skipToEnd(yylex)
		}
	case 1023:
		yyDollar = yyS[yypt-0 : yypt+1]
//line sql.y:3914
		{
			skipToEnd(yylex)
		}
	case 1024:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3918
		{
			skipToEnd(yylex)
		}
	case 1025:
		yyDollar = yyS[yypt-1 : yypt+1]
//line sql.y:3922
		{
			skipToEnd(yylex)
		}
	}
	goto yystack /* stack new state and value */
}
